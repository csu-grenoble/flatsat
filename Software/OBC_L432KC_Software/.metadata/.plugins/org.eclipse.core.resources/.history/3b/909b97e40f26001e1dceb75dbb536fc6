/********************** INCLUDES *********************************/


#include <Port_Conf.h>
#include "stm32l4xx.h"
#include <stdio.h>

#include "main.h"

#include "I2C.h"
#include "Clocks.h"
#include "code_eleve.h"
#include "PWM.h"
#include "Timer.h"
#include "UART.h"
#include "MPL3115A2.h"

/********************** VARIABLES *********************************/
UART_HandleTypeDef huart2;

/*********************** Functions *******************************/

static void MX_USART2_UART_Init(void);
void __io_putchar(uint8_t ch);

void BNO_write(uint8_t Address, uint8_t *Reg, uint8_t *Data, uint8_t size){
	I2C_Start();
	I2C_Address(Address);
	I2C_Write(Reg, 1);
	I2C_Write(Data, size);
	I2C_Stop();
}

void BNO_read(uint8_t Address, uint8_t *Reg, uint8_t *buffer, uint8_t size){
	I2C_Start();
	I2C_Address(Address);
	I2C_Write(Reg,1);
	I2C_Start(); //repeated start
	I2C_Read(Address, buffer, size);
}



/******************************************** CODE *************************************************/


/*
 * PA9 -> I2C_SCL
 * PA10 -> I2C_SDA
 *
 * PA12 -> CAN1_TD
 * PA11 -> CAN1_RD
 *
 * PB7 -> UART1_RX
 * PB6 -> UART1_TX
 */

int main(void)
{
	//Init clock and flash
	uint8_t *buffer=0;
	SystemInit();
	MX_USART2_UART_Init();

	ClockConfiguration(); //must do a function setting the clock's source and setting the prescaler of HCLK, PCLK1 & PCLK2

	SetClocks();	//must do a function to set peripherals clocks

	InitPeripheral();		// Init peripheral I/O's
//	InitTimer_1();			//init timer 1
	I2C_Init();			//init I2C mode



	while (1)
	{

		BNO_read(MPL3115A2_ADDRESS, (uint8_t *) MPL3115A2_WHOAMI, buffer, 1);

		printf("\n Valor whomai: %x \r\n", *buffer);


	}

}

static void MX_USART2_UART_Init(void)
{

  /* USER CODE BEGIN USART2_Init 0 */

  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
  huart2.Init.BaudRate = 115200;
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
  huart2.Init.StopBits = UART_STOPBITS_1;
  huart2.Init.Parity = UART_PARITY_NONE;
  huart2.Init.Mode = UART_MODE_TX_RX;
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
  if (HAL_RS485Ex_Init(&huart2, UART_DE_POLARITY_HIGH, 0, 0) != HAL_OK)
  {
   // Error_Handler();
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}

void __io_putchar(uint8_t ch) {

	HAL_UART_Transmit(&huart2, &ch, 1, 1);

}

