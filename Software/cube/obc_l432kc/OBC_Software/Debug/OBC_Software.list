
OBC_Software.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006aa8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000424  08006c38  08006c38  00016c38  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800705c  0800705c  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  0800705c  0800705c  0001705c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007064  08007064  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007064  08007064  00017064  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007068  08007068  00017068  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  0800706c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000013c  200001dc  08007248  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000318  08007248  00020318  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001315f  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000275e  00000000  00000000  0003336b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001148  00000000  00000000  00035ad0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001030  00000000  00000000  00036c18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000222ae  00000000  00000000  00037c48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000139c0  00000000  00000000  00059ef6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d7ec8  00000000  00000000  0006d8b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0014577e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000587c  00000000  00000000  001457d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001dc 	.word	0x200001dc
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006c20 	.word	0x08006c20

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e0 	.word	0x200001e0
 80001cc:	08006c20 	.word	0x08006c20

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000bbc:	f000 b974 	b.w	8000ea8 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9d08      	ldr	r5, [sp, #32]
 8000bde:	4604      	mov	r4, r0
 8000be0:	468e      	mov	lr, r1
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d14d      	bne.n	8000c82 <__udivmoddi4+0xaa>
 8000be6:	428a      	cmp	r2, r1
 8000be8:	4694      	mov	ip, r2
 8000bea:	d969      	bls.n	8000cc0 <__udivmoddi4+0xe8>
 8000bec:	fab2 f282 	clz	r2, r2
 8000bf0:	b152      	cbz	r2, 8000c08 <__udivmoddi4+0x30>
 8000bf2:	fa01 f302 	lsl.w	r3, r1, r2
 8000bf6:	f1c2 0120 	rsb	r1, r2, #32
 8000bfa:	fa20 f101 	lsr.w	r1, r0, r1
 8000bfe:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c02:	ea41 0e03 	orr.w	lr, r1, r3
 8000c06:	4094      	lsls	r4, r2
 8000c08:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c0c:	0c21      	lsrs	r1, r4, #16
 8000c0e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c12:	fa1f f78c 	uxth.w	r7, ip
 8000c16:	fb08 e316 	mls	r3, r8, r6, lr
 8000c1a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c1e:	fb06 f107 	mul.w	r1, r6, r7
 8000c22:	4299      	cmp	r1, r3
 8000c24:	d90a      	bls.n	8000c3c <__udivmoddi4+0x64>
 8000c26:	eb1c 0303 	adds.w	r3, ip, r3
 8000c2a:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000c2e:	f080 811f 	bcs.w	8000e70 <__udivmoddi4+0x298>
 8000c32:	4299      	cmp	r1, r3
 8000c34:	f240 811c 	bls.w	8000e70 <__udivmoddi4+0x298>
 8000c38:	3e02      	subs	r6, #2
 8000c3a:	4463      	add	r3, ip
 8000c3c:	1a5b      	subs	r3, r3, r1
 8000c3e:	b2a4      	uxth	r4, r4
 8000c40:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c44:	fb08 3310 	mls	r3, r8, r0, r3
 8000c48:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c4c:	fb00 f707 	mul.w	r7, r0, r7
 8000c50:	42a7      	cmp	r7, r4
 8000c52:	d90a      	bls.n	8000c6a <__udivmoddi4+0x92>
 8000c54:	eb1c 0404 	adds.w	r4, ip, r4
 8000c58:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000c5c:	f080 810a 	bcs.w	8000e74 <__udivmoddi4+0x29c>
 8000c60:	42a7      	cmp	r7, r4
 8000c62:	f240 8107 	bls.w	8000e74 <__udivmoddi4+0x29c>
 8000c66:	4464      	add	r4, ip
 8000c68:	3802      	subs	r0, #2
 8000c6a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c6e:	1be4      	subs	r4, r4, r7
 8000c70:	2600      	movs	r6, #0
 8000c72:	b11d      	cbz	r5, 8000c7c <__udivmoddi4+0xa4>
 8000c74:	40d4      	lsrs	r4, r2
 8000c76:	2300      	movs	r3, #0
 8000c78:	e9c5 4300 	strd	r4, r3, [r5]
 8000c7c:	4631      	mov	r1, r6
 8000c7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c82:	428b      	cmp	r3, r1
 8000c84:	d909      	bls.n	8000c9a <__udivmoddi4+0xc2>
 8000c86:	2d00      	cmp	r5, #0
 8000c88:	f000 80ef 	beq.w	8000e6a <__udivmoddi4+0x292>
 8000c8c:	2600      	movs	r6, #0
 8000c8e:	e9c5 0100 	strd	r0, r1, [r5]
 8000c92:	4630      	mov	r0, r6
 8000c94:	4631      	mov	r1, r6
 8000c96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c9a:	fab3 f683 	clz	r6, r3
 8000c9e:	2e00      	cmp	r6, #0
 8000ca0:	d14a      	bne.n	8000d38 <__udivmoddi4+0x160>
 8000ca2:	428b      	cmp	r3, r1
 8000ca4:	d302      	bcc.n	8000cac <__udivmoddi4+0xd4>
 8000ca6:	4282      	cmp	r2, r0
 8000ca8:	f200 80f9 	bhi.w	8000e9e <__udivmoddi4+0x2c6>
 8000cac:	1a84      	subs	r4, r0, r2
 8000cae:	eb61 0303 	sbc.w	r3, r1, r3
 8000cb2:	2001      	movs	r0, #1
 8000cb4:	469e      	mov	lr, r3
 8000cb6:	2d00      	cmp	r5, #0
 8000cb8:	d0e0      	beq.n	8000c7c <__udivmoddi4+0xa4>
 8000cba:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cbe:	e7dd      	b.n	8000c7c <__udivmoddi4+0xa4>
 8000cc0:	b902      	cbnz	r2, 8000cc4 <__udivmoddi4+0xec>
 8000cc2:	deff      	udf	#255	; 0xff
 8000cc4:	fab2 f282 	clz	r2, r2
 8000cc8:	2a00      	cmp	r2, #0
 8000cca:	f040 8092 	bne.w	8000df2 <__udivmoddi4+0x21a>
 8000cce:	eba1 010c 	sub.w	r1, r1, ip
 8000cd2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cd6:	fa1f fe8c 	uxth.w	lr, ip
 8000cda:	2601      	movs	r6, #1
 8000cdc:	0c20      	lsrs	r0, r4, #16
 8000cde:	fbb1 f3f7 	udiv	r3, r1, r7
 8000ce2:	fb07 1113 	mls	r1, r7, r3, r1
 8000ce6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000cea:	fb0e f003 	mul.w	r0, lr, r3
 8000cee:	4288      	cmp	r0, r1
 8000cf0:	d908      	bls.n	8000d04 <__udivmoddi4+0x12c>
 8000cf2:	eb1c 0101 	adds.w	r1, ip, r1
 8000cf6:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000cfa:	d202      	bcs.n	8000d02 <__udivmoddi4+0x12a>
 8000cfc:	4288      	cmp	r0, r1
 8000cfe:	f200 80cb 	bhi.w	8000e98 <__udivmoddi4+0x2c0>
 8000d02:	4643      	mov	r3, r8
 8000d04:	1a09      	subs	r1, r1, r0
 8000d06:	b2a4      	uxth	r4, r4
 8000d08:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d0c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d10:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d14:	fb0e fe00 	mul.w	lr, lr, r0
 8000d18:	45a6      	cmp	lr, r4
 8000d1a:	d908      	bls.n	8000d2e <__udivmoddi4+0x156>
 8000d1c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d20:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000d24:	d202      	bcs.n	8000d2c <__udivmoddi4+0x154>
 8000d26:	45a6      	cmp	lr, r4
 8000d28:	f200 80bb 	bhi.w	8000ea2 <__udivmoddi4+0x2ca>
 8000d2c:	4608      	mov	r0, r1
 8000d2e:	eba4 040e 	sub.w	r4, r4, lr
 8000d32:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d36:	e79c      	b.n	8000c72 <__udivmoddi4+0x9a>
 8000d38:	f1c6 0720 	rsb	r7, r6, #32
 8000d3c:	40b3      	lsls	r3, r6
 8000d3e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d42:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d46:	fa20 f407 	lsr.w	r4, r0, r7
 8000d4a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d4e:	431c      	orrs	r4, r3
 8000d50:	40f9      	lsrs	r1, r7
 8000d52:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d56:	fa00 f306 	lsl.w	r3, r0, r6
 8000d5a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d5e:	0c20      	lsrs	r0, r4, #16
 8000d60:	fa1f fe8c 	uxth.w	lr, ip
 8000d64:	fb09 1118 	mls	r1, r9, r8, r1
 8000d68:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d6c:	fb08 f00e 	mul.w	r0, r8, lr
 8000d70:	4288      	cmp	r0, r1
 8000d72:	fa02 f206 	lsl.w	r2, r2, r6
 8000d76:	d90b      	bls.n	8000d90 <__udivmoddi4+0x1b8>
 8000d78:	eb1c 0101 	adds.w	r1, ip, r1
 8000d7c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000d80:	f080 8088 	bcs.w	8000e94 <__udivmoddi4+0x2bc>
 8000d84:	4288      	cmp	r0, r1
 8000d86:	f240 8085 	bls.w	8000e94 <__udivmoddi4+0x2bc>
 8000d8a:	f1a8 0802 	sub.w	r8, r8, #2
 8000d8e:	4461      	add	r1, ip
 8000d90:	1a09      	subs	r1, r1, r0
 8000d92:	b2a4      	uxth	r4, r4
 8000d94:	fbb1 f0f9 	udiv	r0, r1, r9
 8000d98:	fb09 1110 	mls	r1, r9, r0, r1
 8000d9c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000da0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000da4:	458e      	cmp	lr, r1
 8000da6:	d908      	bls.n	8000dba <__udivmoddi4+0x1e2>
 8000da8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dac:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000db0:	d26c      	bcs.n	8000e8c <__udivmoddi4+0x2b4>
 8000db2:	458e      	cmp	lr, r1
 8000db4:	d96a      	bls.n	8000e8c <__udivmoddi4+0x2b4>
 8000db6:	3802      	subs	r0, #2
 8000db8:	4461      	add	r1, ip
 8000dba:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dbe:	fba0 9402 	umull	r9, r4, r0, r2
 8000dc2:	eba1 010e 	sub.w	r1, r1, lr
 8000dc6:	42a1      	cmp	r1, r4
 8000dc8:	46c8      	mov	r8, r9
 8000dca:	46a6      	mov	lr, r4
 8000dcc:	d356      	bcc.n	8000e7c <__udivmoddi4+0x2a4>
 8000dce:	d053      	beq.n	8000e78 <__udivmoddi4+0x2a0>
 8000dd0:	b15d      	cbz	r5, 8000dea <__udivmoddi4+0x212>
 8000dd2:	ebb3 0208 	subs.w	r2, r3, r8
 8000dd6:	eb61 010e 	sbc.w	r1, r1, lr
 8000dda:	fa01 f707 	lsl.w	r7, r1, r7
 8000dde:	fa22 f306 	lsr.w	r3, r2, r6
 8000de2:	40f1      	lsrs	r1, r6
 8000de4:	431f      	orrs	r7, r3
 8000de6:	e9c5 7100 	strd	r7, r1, [r5]
 8000dea:	2600      	movs	r6, #0
 8000dec:	4631      	mov	r1, r6
 8000dee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000df2:	f1c2 0320 	rsb	r3, r2, #32
 8000df6:	40d8      	lsrs	r0, r3
 8000df8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000dfc:	fa21 f303 	lsr.w	r3, r1, r3
 8000e00:	4091      	lsls	r1, r2
 8000e02:	4301      	orrs	r1, r0
 8000e04:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e08:	fa1f fe8c 	uxth.w	lr, ip
 8000e0c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e10:	fb07 3610 	mls	r6, r7, r0, r3
 8000e14:	0c0b      	lsrs	r3, r1, #16
 8000e16:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e1a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e1e:	429e      	cmp	r6, r3
 8000e20:	fa04 f402 	lsl.w	r4, r4, r2
 8000e24:	d908      	bls.n	8000e38 <__udivmoddi4+0x260>
 8000e26:	eb1c 0303 	adds.w	r3, ip, r3
 8000e2a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000e2e:	d22f      	bcs.n	8000e90 <__udivmoddi4+0x2b8>
 8000e30:	429e      	cmp	r6, r3
 8000e32:	d92d      	bls.n	8000e90 <__udivmoddi4+0x2b8>
 8000e34:	3802      	subs	r0, #2
 8000e36:	4463      	add	r3, ip
 8000e38:	1b9b      	subs	r3, r3, r6
 8000e3a:	b289      	uxth	r1, r1
 8000e3c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e40:	fb07 3316 	mls	r3, r7, r6, r3
 8000e44:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e48:	fb06 f30e 	mul.w	r3, r6, lr
 8000e4c:	428b      	cmp	r3, r1
 8000e4e:	d908      	bls.n	8000e62 <__udivmoddi4+0x28a>
 8000e50:	eb1c 0101 	adds.w	r1, ip, r1
 8000e54:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000e58:	d216      	bcs.n	8000e88 <__udivmoddi4+0x2b0>
 8000e5a:	428b      	cmp	r3, r1
 8000e5c:	d914      	bls.n	8000e88 <__udivmoddi4+0x2b0>
 8000e5e:	3e02      	subs	r6, #2
 8000e60:	4461      	add	r1, ip
 8000e62:	1ac9      	subs	r1, r1, r3
 8000e64:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e68:	e738      	b.n	8000cdc <__udivmoddi4+0x104>
 8000e6a:	462e      	mov	r6, r5
 8000e6c:	4628      	mov	r0, r5
 8000e6e:	e705      	b.n	8000c7c <__udivmoddi4+0xa4>
 8000e70:	4606      	mov	r6, r0
 8000e72:	e6e3      	b.n	8000c3c <__udivmoddi4+0x64>
 8000e74:	4618      	mov	r0, r3
 8000e76:	e6f8      	b.n	8000c6a <__udivmoddi4+0x92>
 8000e78:	454b      	cmp	r3, r9
 8000e7a:	d2a9      	bcs.n	8000dd0 <__udivmoddi4+0x1f8>
 8000e7c:	ebb9 0802 	subs.w	r8, r9, r2
 8000e80:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000e84:	3801      	subs	r0, #1
 8000e86:	e7a3      	b.n	8000dd0 <__udivmoddi4+0x1f8>
 8000e88:	4646      	mov	r6, r8
 8000e8a:	e7ea      	b.n	8000e62 <__udivmoddi4+0x28a>
 8000e8c:	4620      	mov	r0, r4
 8000e8e:	e794      	b.n	8000dba <__udivmoddi4+0x1e2>
 8000e90:	4640      	mov	r0, r8
 8000e92:	e7d1      	b.n	8000e38 <__udivmoddi4+0x260>
 8000e94:	46d0      	mov	r8, sl
 8000e96:	e77b      	b.n	8000d90 <__udivmoddi4+0x1b8>
 8000e98:	3b02      	subs	r3, #2
 8000e9a:	4461      	add	r1, ip
 8000e9c:	e732      	b.n	8000d04 <__udivmoddi4+0x12c>
 8000e9e:	4630      	mov	r0, r6
 8000ea0:	e709      	b.n	8000cb6 <__udivmoddi4+0xde>
 8000ea2:	4464      	add	r4, ip
 8000ea4:	3802      	subs	r0, #2
 8000ea6:	e742      	b.n	8000d2e <__udivmoddi4+0x156>

08000ea8 <__aeabi_idiv0>:
 8000ea8:	4770      	bx	lr
 8000eaa:	bf00      	nop

08000eac <SetClocks>:
// Function  name  : SetClocks
// Description     : It will activate the peripheral clocks
// Parameters      : N/A
// Return          : N/A
// ***********************************************************************************************************************//
void SetClocks(){
 8000eac:	b480      	push	{r7}
 8000eae:	af00      	add	r7, sp, #0
	/Enable GPIOX clock
	/ Enable  clock
	*/

	//
	RCC->AHB2ENR |= (RCC_AHB2ENR_GPIOAEN); // peripheral clock GPIOA enabled
 8000eb0:	4b08      	ldr	r3, [pc, #32]	; (8000ed4 <SetClocks+0x28>)
 8000eb2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000eb4:	4a07      	ldr	r2, [pc, #28]	; (8000ed4 <SetClocks+0x28>)
 8000eb6:	f043 0301 	orr.w	r3, r3, #1
 8000eba:	64d3      	str	r3, [r2, #76]	; 0x4c

	//
	RCC->APB1ENR1 |= (1<<21) ; //I2C1 clock enabled
 8000ebc:	4b05      	ldr	r3, [pc, #20]	; (8000ed4 <SetClocks+0x28>)
 8000ebe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ec0:	4a04      	ldr	r2, [pc, #16]	; (8000ed4 <SetClocks+0x28>)
 8000ec2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000ec6:	6593      	str	r3, [r2, #88]	; 0x58
}
 8000ec8:	bf00      	nop
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed0:	4770      	bx	lr
 8000ed2:	bf00      	nop
 8000ed4:	40021000 	.word	0x40021000

08000ed8 <I2C_Init>:
// Function  name  : I2C_Init
// Description     : Configures I2C communication
// Parameters      : N/A
// Return          : N/A
// ***********************************************************************************************************************//
void I2C_Init(void) {
 8000ed8:	b480      	push	{r7}
 8000eda:	af00      	add	r7, sp, #0
	 * 5.Configure NOSTRETCH in I2C_CR1
	 * 6.
	 */

	//1.Clear PE bit in I2C_CR1
	I2C1->CR1 &= ~(1 << 0);  // Clear PE bit
 8000edc:	4b1e      	ldr	r3, [pc, #120]	; (8000f58 <I2C_Init+0x80>)
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	4a1d      	ldr	r2, [pc, #116]	; (8000f58 <I2C_Init+0x80>)
 8000ee2:	f023 0301 	bic.w	r3, r3, #1
 8000ee6:	6013      	str	r3, [r2, #0]

	//2.Configure ANFOFF and DNF[3:0] in I2C_CR1
	I2C1->CR1 |= (1 << 12);   // ANFOFF disabled
 8000ee8:	4b1b      	ldr	r3, [pc, #108]	; (8000f58 <I2C_Init+0x80>)
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	4a1a      	ldr	r2, [pc, #104]	; (8000f58 <I2C_Init+0x80>)
 8000eee:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000ef2:	6013      	str	r3, [r2, #0]
	I2C1->CR1 &= ~(0xF << 8); //Digital filter disabled
 8000ef4:	4b18      	ldr	r3, [pc, #96]	; (8000f58 <I2C_Init+0x80>)
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	4a17      	ldr	r2, [pc, #92]	; (8000f58 <I2C_Init+0x80>)
 8000efa:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8000efe:	6013      	str	r3, [r2, #0]

	// 3.Choose the clock source for I2C in RCC_CCIPR
	RCC->CCIPR &= ~(0b11 << 12);
 8000f00:	4b16      	ldr	r3, [pc, #88]	; (8000f5c <I2C_Init+0x84>)
 8000f02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f06:	4a15      	ldr	r2, [pc, #84]	; (8000f5c <I2C_Init+0x84>)
 8000f08:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000f0c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
	RCC->CCIPR |= (1 << 12); //SYSCLK as clock source for the I2C ( settled in Clocks.c )
 8000f10:	4b12      	ldr	r3, [pc, #72]	; (8000f5c <I2C_Init+0x84>)
 8000f12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f16:	4a11      	ldr	r2, [pc, #68]	; (8000f5c <I2C_Init+0x84>)
 8000f18:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000f1c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

	//4. Configure PRESC[3:0], SDADEL[3:0], SCLH[7:0], SCLL[7:0] in I2C_TIMINGR
	I2C1->TIMINGR &= ~(0xF << 28) | ~(0xF << 20) | ~(0xF << 16) | ~(0xFF << 8)
 8000f20:	4b0d      	ldr	r3, [pc, #52]	; (8000f58 <I2C_Init+0x80>)
 8000f22:	4a0d      	ldr	r2, [pc, #52]	; (8000f58 <I2C_Init+0x80>)
 8000f24:	691b      	ldr	r3, [r3, #16]
 8000f26:	6113      	str	r3, [r2, #16]
			| ~(0xFF << 0); //force 0
	I2C1->TIMINGR |= (0xD << 28) | (0x4 << 20) | (0x2 << 16) | (0xF << 8)
 8000f28:	4b0b      	ldr	r3, [pc, #44]	; (8000f58 <I2C_Init+0x80>)
 8000f2a:	691a      	ldr	r2, [r3, #16]
 8000f2c:	490a      	ldr	r1, [pc, #40]	; (8000f58 <I2C_Init+0x80>)
 8000f2e:	4b0c      	ldr	r3, [pc, #48]	; (8000f60 <I2C_Init+0x88>)
 8000f30:	4313      	orrs	r3, r2
 8000f32:	610b      	str	r3, [r1, #16]
			| (0x13 << 0);
	// PRESC = 20 (0x14), SCLDEL = 5 (0x5), SDADEL = 3 (0x3), SCLH = 15 (0xFU), SCLL=19 (0x13)

	//5. Configure NOSTRETCH in I2C_CR1
	I2C1->CR1 |= (1 << 17); //Clock stretch disabled
 8000f34:	4b08      	ldr	r3, [pc, #32]	; (8000f58 <I2C_Init+0x80>)
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	4a07      	ldr	r2, [pc, #28]	; (8000f58 <I2C_Init+0x80>)
 8000f3a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f3e:	6013      	str	r3, [r2, #0]

	//6. Enable PE
	I2C1->CR1 |= (1 << 0); // PE bit setted
 8000f40:	4b05      	ldr	r3, [pc, #20]	; (8000f58 <I2C_Init+0x80>)
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	4a04      	ldr	r2, [pc, #16]	; (8000f58 <I2C_Init+0x80>)
 8000f46:	f043 0301 	orr.w	r3, r3, #1
 8000f4a:	6013      	str	r3, [r2, #0]

}
 8000f4c:	bf00      	nop
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f54:	4770      	bx	lr
 8000f56:	bf00      	nop
 8000f58:	40005400 	.word	0x40005400
 8000f5c:	40021000 	.word	0x40021000
 8000f60:	d0420f13 	.word	0xd0420f13

08000f64 <I2C_Start>:
// Function  name  : I2C_Start
// Description     : Set PE bit in I2C_CR1
// Parameters      : N/A
// Return          : N/A
// ***********************************************************************************************************************//
void I2C_Start(void) {
 8000f64:	b480      	push	{r7}
 8000f66:	af00      	add	r7, sp, #0
	I2C1->CR2 |= (1 << 13); // Set start bit in I2C CR_2
 8000f68:	4b05      	ldr	r3, [pc, #20]	; (8000f80 <I2C_Start+0x1c>)
 8000f6a:	685b      	ldr	r3, [r3, #4]
 8000f6c:	4a04      	ldr	r2, [pc, #16]	; (8000f80 <I2C_Start+0x1c>)
 8000f6e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000f72:	6053      	str	r3, [r2, #4]
}
 8000f74:	bf00      	nop
 8000f76:	46bd      	mov	sp, r7
 8000f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7c:	4770      	bx	lr
 8000f7e:	bf00      	nop
 8000f80:	40005400 	.word	0x40005400

08000f84 <I2C_Stop>:
// Function  name  : I2C_Stop
// Description     : Reset PE bit in I2C_CR1
// Parameters      : N/A
// Return          : N/A
// ***********************************************************************************************************************//
void I2C_Stop(void) {
 8000f84:	b480      	push	{r7}
 8000f86:	af00      	add	r7, sp, #0
	I2C1->CR2 |= (1 << 14);  // Set stop bit
 8000f88:	4b05      	ldr	r3, [pc, #20]	; (8000fa0 <I2C_Stop+0x1c>)
 8000f8a:	685b      	ldr	r3, [r3, #4]
 8000f8c:	4a04      	ldr	r2, [pc, #16]	; (8000fa0 <I2C_Stop+0x1c>)
 8000f8e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f92:	6053      	str	r3, [r2, #4]
}
 8000f94:	bf00      	nop
 8000f96:	46bd      	mov	sp, r7
 8000f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9c:	4770      	bx	lr
 8000f9e:	bf00      	nop
 8000fa0:	40005400 	.word	0x40005400

08000fa4 <I2C_Write_Adress>:
	while ((I2C1->ISR & I2C_ISR_TC) == 0)
		;

}

void I2C_Write_Adress(uint8_t address, uint8_t *data, uint8_t size) {
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b082      	sub	sp, #8
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	4603      	mov	r3, r0
 8000fac:	6039      	str	r1, [r7, #0]
 8000fae:	71fb      	strb	r3, [r7, #7]
 8000fb0:	4613      	mov	r3, r2
 8000fb2:	71bb      	strb	r3, [r7, #6]
	 *3. In I2C CR_2 set the transfer direction RD_WRN
	 *4. In I2C CR_2 set NBYTES to transfer.
	 * */

	//0. Ensure STOP in I2C1_CR2 and AUTOEND=0
	I2C1->CR2 &= ~(1 << 14);
 8000fb4:	4b2a      	ldr	r3, [pc, #168]	; (8001060 <I2C_Write_Adress+0xbc>)
 8000fb6:	685b      	ldr	r3, [r3, #4]
 8000fb8:	4a29      	ldr	r2, [pc, #164]	; (8001060 <I2C_Write_Adress+0xbc>)
 8000fba:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000fbe:	6053      	str	r3, [r2, #4]
	I2C1->CR2 &= ~(1 << 25);
 8000fc0:	4b27      	ldr	r3, [pc, #156]	; (8001060 <I2C_Write_Adress+0xbc>)
 8000fc2:	685b      	ldr	r3, [r3, #4]
 8000fc4:	4a26      	ldr	r2, [pc, #152]	; (8001060 <I2C_Write_Adress+0xbc>)
 8000fc6:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8000fca:	6053      	str	r3, [r2, #4]

	//1. In I2C CR_2 choose addressing mode (7 BIT)
	I2C1->CR2 &= ~(1 << 11);
 8000fcc:	4b24      	ldr	r3, [pc, #144]	; (8001060 <I2C_Write_Adress+0xbc>)
 8000fce:	685b      	ldr	r3, [r3, #4]
 8000fd0:	4a23      	ldr	r2, [pc, #140]	; (8001060 <I2C_Write_Adress+0xbc>)
 8000fd2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8000fd6:	6053      	str	r3, [r2, #4]

	//2. In I2C CR_2set SADD
	I2C1->CR2 &= ~(0x3FF);
 8000fd8:	4b21      	ldr	r3, [pc, #132]	; (8001060 <I2C_Write_Adress+0xbc>)
 8000fda:	685b      	ldr	r3, [r3, #4]
 8000fdc:	4a20      	ldr	r2, [pc, #128]	; (8001060 <I2C_Write_Adress+0xbc>)
 8000fde:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8000fe2:	f023 0303 	bic.w	r3, r3, #3
 8000fe6:	6053      	str	r3, [r2, #4]
	I2C1->CR2 |= (address << 1);
 8000fe8:	4b1d      	ldr	r3, [pc, #116]	; (8001060 <I2C_Write_Adress+0xbc>)
 8000fea:	685b      	ldr	r3, [r3, #4]
 8000fec:	79fa      	ldrb	r2, [r7, #7]
 8000fee:	0052      	lsls	r2, r2, #1
 8000ff0:	4611      	mov	r1, r2
 8000ff2:	4a1b      	ldr	r2, [pc, #108]	; (8001060 <I2C_Write_Adress+0xbc>)
 8000ff4:	430b      	orrs	r3, r1
 8000ff6:	6053      	str	r3, [r2, #4]

	//3. In I2C CR_2 set the transfer direction RD_WRN (write for addressing phase)
	I2C1->CR2 &= ~(1 << 10);
 8000ff8:	4b19      	ldr	r3, [pc, #100]	; (8001060 <I2C_Write_Adress+0xbc>)
 8000ffa:	685b      	ldr	r3, [r3, #4]
 8000ffc:	4a18      	ldr	r2, [pc, #96]	; (8001060 <I2C_Write_Adress+0xbc>)
 8000ffe:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001002:	6053      	str	r3, [r2, #4]

	//4. In I2C CR_2 set NBYTES to transfer. (writing 1 bit)
	I2C1->CR2 &= ~(0xFF < 16);
 8001004:	4b16      	ldr	r3, [pc, #88]	; (8001060 <I2C_Write_Adress+0xbc>)
 8001006:	4a16      	ldr	r2, [pc, #88]	; (8001060 <I2C_Write_Adress+0xbc>)
 8001008:	685b      	ldr	r3, [r3, #4]
 800100a:	6053      	str	r3, [r2, #4]
	I2C1->CR2 |= ((uint32_t)(size) << 16);
 800100c:	4b14      	ldr	r3, [pc, #80]	; (8001060 <I2C_Write_Adress+0xbc>)
 800100e:	685a      	ldr	r2, [r3, #4]
 8001010:	79bb      	ldrb	r3, [r7, #6]
 8001012:	041b      	lsls	r3, r3, #16
 8001014:	4912      	ldr	r1, [pc, #72]	; (8001060 <I2C_Write_Adress+0xbc>)
 8001016:	4313      	orrs	r3, r2
 8001018:	604b      	str	r3, [r1, #4]

	//start
	I2C_Start();
 800101a:	f7ff ffa3 	bl	8000f64 <I2C_Start>
	 *2. Wait for start bit to reset
	 *3. Write the number of bytes to be written
	 *3. Loop for writing multiple size data in I2C1_TXDR
	 *4. Wait for I2C1_ISR.TC to be set
	 * */
	while (size) {
 800101e:	e00f      	b.n	8001040 <I2C_Write_Adress+0x9c>
		while ((I2C1->ISR & I2C_ISR_TXIS) == 0)
 8001020:	bf00      	nop
 8001022:	4b0f      	ldr	r3, [pc, #60]	; (8001060 <I2C_Write_Adress+0xbc>)
 8001024:	699b      	ldr	r3, [r3, #24]
 8001026:	f003 0302 	and.w	r3, r3, #2
 800102a:	2b00      	cmp	r3, #0
 800102c:	d0f9      	beq.n	8001022 <I2C_Write_Adress+0x7e>
					;
		I2C1->TXDR = *(data++);
 800102e:	683b      	ldr	r3, [r7, #0]
 8001030:	1c5a      	adds	r2, r3, #1
 8001032:	603a      	str	r2, [r7, #0]
 8001034:	781a      	ldrb	r2, [r3, #0]
 8001036:	4b0a      	ldr	r3, [pc, #40]	; (8001060 <I2C_Write_Adress+0xbc>)
 8001038:	629a      	str	r2, [r3, #40]	; 0x28
		size--;
 800103a:	79bb      	ldrb	r3, [r7, #6]
 800103c:	3b01      	subs	r3, #1
 800103e:	71bb      	strb	r3, [r7, #6]
	while (size) {
 8001040:	79bb      	ldrb	r3, [r7, #6]
 8001042:	2b00      	cmp	r3, #0
 8001044:	d1ec      	bne.n	8001020 <I2C_Write_Adress+0x7c>
	}

	while ((I2C1->ISR & I2C_ISR_TC) == 0)
 8001046:	bf00      	nop
 8001048:	4b05      	ldr	r3, [pc, #20]	; (8001060 <I2C_Write_Adress+0xbc>)
 800104a:	699b      	ldr	r3, [r3, #24]
 800104c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001050:	2b00      	cmp	r3, #0
 8001052:	d0f9      	beq.n	8001048 <I2C_Write_Adress+0xa4>
		;
	I2C_Stop();
 8001054:	f7ff ff96 	bl	8000f84 <I2C_Stop>

}
 8001058:	bf00      	nop
 800105a:	3708      	adds	r7, #8
 800105c:	46bd      	mov	sp, r7
 800105e:	bd80      	pop	{r7, pc}
 8001060:	40005400 	.word	0x40005400

08001064 <InitPeripheral>:
// Function  name  : InitPeripheral
// Description     : Configures I/O port of the microcontroller
// Parameters      : N/A
// Return          : N/A
// ***********************************************************************************************************************//
void InitPeripheral(){
 8001064:	b480      	push	{r7}
 8001066:	af00      	add	r7, sp, #0

//MODER CONFIG

	GPIOA->MODER |= (1<<19); // AF to PA9
 8001068:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001072:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001076:	6013      	str	r3, [r2, #0]
	GPIOA->MODER &= ~(1<<18); // AF to PA9
 8001078:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001082:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001086:	6013      	str	r3, [r2, #0]

	GPIOA->OTYPER |= (1<<9);//
 8001088:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800108c:	685b      	ldr	r3, [r3, #4]
 800108e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001092:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001096:	6053      	str	r3, [r2, #4]

	GPIOA->MODER |= (1<<21); // AF to PA10
 8001098:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80010a2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80010a6:	6013      	str	r3, [r2, #0]
	GPIOA->MODER &= ~(1<<20);
 80010a8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80010b2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80010b6:	6013      	str	r3, [r2, #0]

	GPIOA->OTYPER |= (1<<10);//
 80010b8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80010bc:	685b      	ldr	r3, [r3, #4]
 80010be:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80010c2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80010c6:	6053      	str	r3, [r2, #4]


	GPIOB->MODER |= (1<<13); //AF to PB6
 80010c8:	4b1e      	ldr	r3, [pc, #120]	; (8001144 <InitPeripheral+0xe0>)
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	4a1d      	ldr	r2, [pc, #116]	; (8001144 <InitPeripheral+0xe0>)
 80010ce:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80010d2:	6013      	str	r3, [r2, #0]
	GPIOB->MODER &= ~(1<<12);
 80010d4:	4b1b      	ldr	r3, [pc, #108]	; (8001144 <InitPeripheral+0xe0>)
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	4a1a      	ldr	r2, [pc, #104]	; (8001144 <InitPeripheral+0xe0>)
 80010da:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80010de:	6013      	str	r3, [r2, #0]

	GPIOB->MODER |= (1<<15); //AF to PB7
 80010e0:	4b18      	ldr	r3, [pc, #96]	; (8001144 <InitPeripheral+0xe0>)
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	4a17      	ldr	r2, [pc, #92]	; (8001144 <InitPeripheral+0xe0>)
 80010e6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80010ea:	6013      	str	r3, [r2, #0]
	GPIOB->MODER &= ~(1<<14); //AF to PB7
 80010ec:	4b15      	ldr	r3, [pc, #84]	; (8001144 <InitPeripheral+0xe0>)
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	4a14      	ldr	r2, [pc, #80]	; (8001144 <InitPeripheral+0xe0>)
 80010f2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80010f6:	6013      	str	r3, [r2, #0]

//AFR CONFIG

	GPIOA->AFR[1] &= ~(0b1111<<4); //I2C_SCL | AF4
 80010f8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80010fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010fe:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001102:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001106:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOA->AFR[1] |= (1<<6); //I2C_SCL | AF4
 8001108:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800110c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800110e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001112:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001116:	6253      	str	r3, [r2, #36]	; 0x24

	GPIOA->AFR[1] &= ~(0b1111<<8); //I2C_SDA | AF4
 8001118:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800111c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800111e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001122:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001126:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOA->AFR[1] |= (1<<10); //I2C_SDA | AF4
 8001128:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800112c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800112e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001132:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001136:	6253      	str	r3, [r2, #36]	; 0x24

	/*GPIOB->AFR[0] |= (0b111<<26); //UART1_RX |AF7
	GPIOB->AFR[0] |= (0b111<<30);	//UART1_TX |AF7
	 */
}
 8001138:	bf00      	nop
 800113a:	46bd      	mov	sp, r7
 800113c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001140:	4770      	bx	lr
 8001142:	bf00      	nop
 8001144:	48000400 	.word	0x48000400

08001148 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b082      	sub	sp, #8
 800114c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	uint8_t *buffer=0;
 800114e:	2300      	movs	r3, #0
 8001150:	607b      	str	r3, [r7, #4]
	uint8_t debug = 0x55;
 8001152:	2355      	movs	r3, #85	; 0x55
 8001154:	70fb      	strb	r3, [r7, #3]
	uint8_t buf[2] = {0x55,0x55};
 8001156:	f245 5355 	movw	r3, #21845	; 0x5555
 800115a:	803b      	strh	r3, [r7, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800115c:	f000 fb87 	bl	800186e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001160:	f000 f815 	bl	800118e <SystemClock_Config>

  /* USER CODE BEGIN SysInit */

    SetClocks();	//must do a function to set peripherals clocks
 8001164:	f7ff fea2 	bl	8000eac <SetClocks>


  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001168:	f000 f916 	bl	8001398 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800116c:	f000 f8e2 	bl	8001334 <MX_USART2_UART_Init>
  MX_LPTIM1_Init();
 8001170:	f000 f860 	bl	8001234 <MX_LPTIM1_Init>
  MX_TIM1_Init();
 8001174:	f000 f88a 	bl	800128c <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

  InitPeripheral();		// Init peripheral I/O's
 8001178:	f7ff ff74 	bl	8001064 <InitPeripheral>
  I2C_Init();			//init I2C mode
 800117c:	f7ff feac 	bl	8000ed8 <I2C_Init>

  /* USER CODE END 2 */

  I2C_Write_Adress(MPL3115A2_ADDRESS, &debug, 1);
 8001180:	1cfb      	adds	r3, r7, #3
 8001182:	2201      	movs	r2, #1
 8001184:	4619      	mov	r1, r3
 8001186:	2060      	movs	r0, #96	; 0x60
 8001188:	f7ff ff0c 	bl	8000fa4 <I2C_Write_Adress>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800118c:	e7fe      	b.n	800118c <main+0x44>

0800118e <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800118e:	b580      	push	{r7, lr}
 8001190:	b096      	sub	sp, #88	; 0x58
 8001192:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001194:	f107 0314 	add.w	r3, r7, #20
 8001198:	2244      	movs	r2, #68	; 0x44
 800119a:	2100      	movs	r1, #0
 800119c:	4618      	mov	r0, r3
 800119e:	f002 ff59 	bl	8004054 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011a2:	463b      	mov	r3, r7
 80011a4:	2200      	movs	r2, #0
 80011a6:	601a      	str	r2, [r3, #0]
 80011a8:	605a      	str	r2, [r3, #4]
 80011aa:	609a      	str	r2, [r3, #8]
 80011ac:	60da      	str	r2, [r3, #12]
 80011ae:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80011b0:	f44f 7000 	mov.w	r0, #512	; 0x200
 80011b4:	f000 fee8 	bl	8001f88 <HAL_PWREx_ControlVoltageScaling>
 80011b8:	4603      	mov	r3, r0
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d001      	beq.n	80011c2 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80011be:	f000 f929 	bl	8001414 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80011c2:	2310      	movs	r3, #16
 80011c4:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80011c6:	2301      	movs	r3, #1
 80011c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80011ca:	2300      	movs	r3, #0
 80011cc:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80011ce:	2360      	movs	r3, #96	; 0x60
 80011d0:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80011d2:	2302      	movs	r3, #2
 80011d4:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80011d6:	2301      	movs	r3, #1
 80011d8:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80011da:	2301      	movs	r3, #1
 80011dc:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 24;
 80011de:	2318      	movs	r3, #24
 80011e0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80011e2:	2307      	movs	r3, #7
 80011e4:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80011e6:	2302      	movs	r3, #2
 80011e8:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80011ea:	2302      	movs	r3, #2
 80011ec:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011ee:	f107 0314 	add.w	r3, r7, #20
 80011f2:	4618      	mov	r0, r3
 80011f4:	f000 ff1e 	bl	8002034 <HAL_RCC_OscConfig>
 80011f8:	4603      	mov	r3, r0
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d001      	beq.n	8001202 <SystemClock_Config+0x74>
  {
    Error_Handler();
 80011fe:	f000 f909 	bl	8001414 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001202:	230f      	movs	r3, #15
 8001204:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001206:	2303      	movs	r3, #3
 8001208:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800120a:	2300      	movs	r3, #0
 800120c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800120e:	2300      	movs	r3, #0
 8001210:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001212:	2300      	movs	r3, #0
 8001214:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001216:	463b      	mov	r3, r7
 8001218:	2102      	movs	r1, #2
 800121a:	4618      	mov	r0, r3
 800121c:	f001 fb1e 	bl	800285c <HAL_RCC_ClockConfig>
 8001220:	4603      	mov	r3, r0
 8001222:	2b00      	cmp	r3, #0
 8001224:	d001      	beq.n	800122a <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8001226:	f000 f8f5 	bl	8001414 <Error_Handler>
  }
}
 800122a:	bf00      	nop
 800122c:	3758      	adds	r7, #88	; 0x58
 800122e:	46bd      	mov	sp, r7
 8001230:	bd80      	pop	{r7, pc}
	...

08001234 <MX_LPTIM1_Init>:
  * @brief LPTIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPTIM1_Init(void)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	af00      	add	r7, sp, #0
  /* USER CODE END LPTIM1_Init 0 */

  /* USER CODE BEGIN LPTIM1_Init 1 */

  /* USER CODE END LPTIM1_Init 1 */
  hlptim1.Instance = LPTIM1;
 8001238:	4b12      	ldr	r3, [pc, #72]	; (8001284 <MX_LPTIM1_Init+0x50>)
 800123a:	4a13      	ldr	r2, [pc, #76]	; (8001288 <MX_LPTIM1_Init+0x54>)
 800123c:	601a      	str	r2, [r3, #0]
  hlptim1.Init.Clock.Source = LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC;
 800123e:	4b11      	ldr	r3, [pc, #68]	; (8001284 <MX_LPTIM1_Init+0x50>)
 8001240:	2200      	movs	r2, #0
 8001242:	605a      	str	r2, [r3, #4]
  hlptim1.Init.Clock.Prescaler = LPTIM_PRESCALER_DIV1;
 8001244:	4b0f      	ldr	r3, [pc, #60]	; (8001284 <MX_LPTIM1_Init+0x50>)
 8001246:	2200      	movs	r2, #0
 8001248:	609a      	str	r2, [r3, #8]
  hlptim1.Init.Trigger.Source = LPTIM_TRIGSOURCE_SOFTWARE;
 800124a:	4b0e      	ldr	r3, [pc, #56]	; (8001284 <MX_LPTIM1_Init+0x50>)
 800124c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001250:	615a      	str	r2, [r3, #20]
  hlptim1.Init.OutputPolarity = LPTIM_OUTPUTPOLARITY_HIGH;
 8001252:	4b0c      	ldr	r3, [pc, #48]	; (8001284 <MX_LPTIM1_Init+0x50>)
 8001254:	2200      	movs	r2, #0
 8001256:	621a      	str	r2, [r3, #32]
  hlptim1.Init.UpdateMode = LPTIM_UPDATE_IMMEDIATE;
 8001258:	4b0a      	ldr	r3, [pc, #40]	; (8001284 <MX_LPTIM1_Init+0x50>)
 800125a:	2200      	movs	r2, #0
 800125c:	625a      	str	r2, [r3, #36]	; 0x24
  hlptim1.Init.CounterSource = LPTIM_COUNTERSOURCE_INTERNAL;
 800125e:	4b09      	ldr	r3, [pc, #36]	; (8001284 <MX_LPTIM1_Init+0x50>)
 8001260:	2200      	movs	r2, #0
 8001262:	629a      	str	r2, [r3, #40]	; 0x28
  hlptim1.Init.Input1Source = LPTIM_INPUT1SOURCE_GPIO;
 8001264:	4b07      	ldr	r3, [pc, #28]	; (8001284 <MX_LPTIM1_Init+0x50>)
 8001266:	2200      	movs	r2, #0
 8001268:	62da      	str	r2, [r3, #44]	; 0x2c
  hlptim1.Init.Input2Source = LPTIM_INPUT2SOURCE_GPIO;
 800126a:	4b06      	ldr	r3, [pc, #24]	; (8001284 <MX_LPTIM1_Init+0x50>)
 800126c:	2200      	movs	r2, #0
 800126e:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_LPTIM_Init(&hlptim1) != HAL_OK)
 8001270:	4804      	ldr	r0, [pc, #16]	; (8001284 <MX_LPTIM1_Init+0x50>)
 8001272:	f000 fdd9 	bl	8001e28 <HAL_LPTIM_Init>
 8001276:	4603      	mov	r3, r0
 8001278:	2b00      	cmp	r3, #0
 800127a:	d001      	beq.n	8001280 <MX_LPTIM1_Init+0x4c>
  {
    Error_Handler();
 800127c:	f000 f8ca 	bl	8001414 <Error_Handler>
  }
  /* USER CODE BEGIN LPTIM1_Init 2 */

  /* USER CODE END LPTIM1_Init 2 */

}
 8001280:	bf00      	nop
 8001282:	bd80      	pop	{r7, pc}
 8001284:	200001f8 	.word	0x200001f8
 8001288:	40007c00 	.word	0x40007c00

0800128c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b088      	sub	sp, #32
 8001290:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001292:	f107 0310 	add.w	r3, r7, #16
 8001296:	2200      	movs	r2, #0
 8001298:	601a      	str	r2, [r3, #0]
 800129a:	605a      	str	r2, [r3, #4]
 800129c:	609a      	str	r2, [r3, #8]
 800129e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012a0:	1d3b      	adds	r3, r7, #4
 80012a2:	2200      	movs	r2, #0
 80012a4:	601a      	str	r2, [r3, #0]
 80012a6:	605a      	str	r2, [r3, #4]
 80012a8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80012aa:	4b20      	ldr	r3, [pc, #128]	; (800132c <MX_TIM1_Init+0xa0>)
 80012ac:	4a20      	ldr	r2, [pc, #128]	; (8001330 <MX_TIM1_Init+0xa4>)
 80012ae:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80012b0:	4b1e      	ldr	r3, [pc, #120]	; (800132c <MX_TIM1_Init+0xa0>)
 80012b2:	2200      	movs	r2, #0
 80012b4:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012b6:	4b1d      	ldr	r3, [pc, #116]	; (800132c <MX_TIM1_Init+0xa0>)
 80012b8:	2200      	movs	r2, #0
 80012ba:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80012bc:	4b1b      	ldr	r3, [pc, #108]	; (800132c <MX_TIM1_Init+0xa0>)
 80012be:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80012c2:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012c4:	4b19      	ldr	r3, [pc, #100]	; (800132c <MX_TIM1_Init+0xa0>)
 80012c6:	2200      	movs	r2, #0
 80012c8:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80012ca:	4b18      	ldr	r3, [pc, #96]	; (800132c <MX_TIM1_Init+0xa0>)
 80012cc:	2200      	movs	r2, #0
 80012ce:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012d0:	4b16      	ldr	r3, [pc, #88]	; (800132c <MX_TIM1_Init+0xa0>)
 80012d2:	2200      	movs	r2, #0
 80012d4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80012d6:	4815      	ldr	r0, [pc, #84]	; (800132c <MX_TIM1_Init+0xa0>)
 80012d8:	f001 ffcc 	bl	8003274 <HAL_TIM_Base_Init>
 80012dc:	4603      	mov	r3, r0
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d001      	beq.n	80012e6 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 80012e2:	f000 f897 	bl	8001414 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80012e6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012ea:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80012ec:	f107 0310 	add.w	r3, r7, #16
 80012f0:	4619      	mov	r1, r3
 80012f2:	480e      	ldr	r0, [pc, #56]	; (800132c <MX_TIM1_Init+0xa0>)
 80012f4:	f002 f815 	bl	8003322 <HAL_TIM_ConfigClockSource>
 80012f8:	4603      	mov	r3, r0
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d001      	beq.n	8001302 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 80012fe:	f000 f889 	bl	8001414 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001302:	2300      	movs	r3, #0
 8001304:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001306:	2300      	movs	r3, #0
 8001308:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800130a:	2300      	movs	r3, #0
 800130c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800130e:	1d3b      	adds	r3, r7, #4
 8001310:	4619      	mov	r1, r3
 8001312:	4806      	ldr	r0, [pc, #24]	; (800132c <MX_TIM1_Init+0xa0>)
 8001314:	f002 f9cc 	bl	80036b0 <HAL_TIMEx_MasterConfigSynchronization>
 8001318:	4603      	mov	r3, r0
 800131a:	2b00      	cmp	r3, #0
 800131c:	d001      	beq.n	8001322 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 800131e:	f000 f879 	bl	8001414 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001322:	bf00      	nop
 8001324:	3720      	adds	r7, #32
 8001326:	46bd      	mov	sp, r7
 8001328:	bd80      	pop	{r7, pc}
 800132a:	bf00      	nop
 800132c:	20000230 	.word	0x20000230
 8001330:	40012c00 	.word	0x40012c00

08001334 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001338:	4b15      	ldr	r3, [pc, #84]	; (8001390 <MX_USART2_UART_Init+0x5c>)
 800133a:	4a16      	ldr	r2, [pc, #88]	; (8001394 <MX_USART2_UART_Init+0x60>)
 800133c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800133e:	4b14      	ldr	r3, [pc, #80]	; (8001390 <MX_USART2_UART_Init+0x5c>)
 8001340:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001344:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001346:	4b12      	ldr	r3, [pc, #72]	; (8001390 <MX_USART2_UART_Init+0x5c>)
 8001348:	2200      	movs	r2, #0
 800134a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800134c:	4b10      	ldr	r3, [pc, #64]	; (8001390 <MX_USART2_UART_Init+0x5c>)
 800134e:	2200      	movs	r2, #0
 8001350:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001352:	4b0f      	ldr	r3, [pc, #60]	; (8001390 <MX_USART2_UART_Init+0x5c>)
 8001354:	2200      	movs	r2, #0
 8001356:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001358:	4b0d      	ldr	r3, [pc, #52]	; (8001390 <MX_USART2_UART_Init+0x5c>)
 800135a:	220c      	movs	r2, #12
 800135c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800135e:	4b0c      	ldr	r3, [pc, #48]	; (8001390 <MX_USART2_UART_Init+0x5c>)
 8001360:	2200      	movs	r2, #0
 8001362:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001364:	4b0a      	ldr	r3, [pc, #40]	; (8001390 <MX_USART2_UART_Init+0x5c>)
 8001366:	2200      	movs	r2, #0
 8001368:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800136a:	4b09      	ldr	r3, [pc, #36]	; (8001390 <MX_USART2_UART_Init+0x5c>)
 800136c:	2200      	movs	r2, #0
 800136e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001370:	4b07      	ldr	r3, [pc, #28]	; (8001390 <MX_USART2_UART_Init+0x5c>)
 8001372:	2200      	movs	r2, #0
 8001374:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RS485Ex_Init(&huart2, UART_DE_POLARITY_HIGH, 0, 0) != HAL_OK)
 8001376:	2300      	movs	r3, #0
 8001378:	2200      	movs	r2, #0
 800137a:	2100      	movs	r1, #0
 800137c:	4804      	ldr	r0, [pc, #16]	; (8001390 <MX_USART2_UART_Init+0x5c>)
 800137e:	f002 fdd8 	bl	8003f32 <HAL_RS485Ex_Init>
 8001382:	4603      	mov	r3, r0
 8001384:	2b00      	cmp	r3, #0
 8001386:	d001      	beq.n	800138c <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8001388:	f000 f844 	bl	8001414 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800138c:	bf00      	nop
 800138e:	bd80      	pop	{r7, pc}
 8001390:	2000027c 	.word	0x2000027c
 8001394:	40004400 	.word	0x40004400

08001398 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b088      	sub	sp, #32
 800139c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800139e:	f107 030c 	add.w	r3, r7, #12
 80013a2:	2200      	movs	r2, #0
 80013a4:	601a      	str	r2, [r3, #0]
 80013a6:	605a      	str	r2, [r3, #4]
 80013a8:	609a      	str	r2, [r3, #8]
 80013aa:	60da      	str	r2, [r3, #12]
 80013ac:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80013ae:	4b17      	ldr	r3, [pc, #92]	; (800140c <MX_GPIO_Init+0x74>)
 80013b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013b2:	4a16      	ldr	r2, [pc, #88]	; (800140c <MX_GPIO_Init+0x74>)
 80013b4:	f043 0301 	orr.w	r3, r3, #1
 80013b8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013ba:	4b14      	ldr	r3, [pc, #80]	; (800140c <MX_GPIO_Init+0x74>)
 80013bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013be:	f003 0301 	and.w	r3, r3, #1
 80013c2:	60bb      	str	r3, [r7, #8]
 80013c4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80013c6:	4b11      	ldr	r3, [pc, #68]	; (800140c <MX_GPIO_Init+0x74>)
 80013c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013ca:	4a10      	ldr	r2, [pc, #64]	; (800140c <MX_GPIO_Init+0x74>)
 80013cc:	f043 0302 	orr.w	r3, r3, #2
 80013d0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013d2:	4b0e      	ldr	r3, [pc, #56]	; (800140c <MX_GPIO_Init+0x74>)
 80013d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013d6:	f003 0302 	and.w	r3, r3, #2
 80013da:	607b      	str	r3, [r7, #4]
 80013dc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 80013de:	2200      	movs	r2, #0
 80013e0:	2108      	movs	r1, #8
 80013e2:	480b      	ldr	r0, [pc, #44]	; (8001410 <MX_GPIO_Init+0x78>)
 80013e4:	f000 fd08 	bl	8001df8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
 80013e8:	2308      	movs	r3, #8
 80013ea:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013ec:	2301      	movs	r3, #1
 80013ee:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013f0:	2300      	movs	r3, #0
 80013f2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013f4:	2300      	movs	r3, #0
 80013f6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 80013f8:	f107 030c 	add.w	r3, r7, #12
 80013fc:	4619      	mov	r1, r3
 80013fe:	4804      	ldr	r0, [pc, #16]	; (8001410 <MX_GPIO_Init+0x78>)
 8001400:	f000 fb90 	bl	8001b24 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001404:	bf00      	nop
 8001406:	3720      	adds	r7, #32
 8001408:	46bd      	mov	sp, r7
 800140a:	bd80      	pop	{r7, pc}
 800140c:	40021000 	.word	0x40021000
 8001410:	48000400 	.word	0x48000400

08001414 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001414:	b480      	push	{r7}
 8001416:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001418:	b672      	cpsid	i
}
 800141a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800141c:	e7fe      	b.n	800141c <Error_Handler+0x8>
	...

08001420 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001420:	b480      	push	{r7}
 8001422:	b083      	sub	sp, #12
 8001424:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001426:	4b0f      	ldr	r3, [pc, #60]	; (8001464 <HAL_MspInit+0x44>)
 8001428:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800142a:	4a0e      	ldr	r2, [pc, #56]	; (8001464 <HAL_MspInit+0x44>)
 800142c:	f043 0301 	orr.w	r3, r3, #1
 8001430:	6613      	str	r3, [r2, #96]	; 0x60
 8001432:	4b0c      	ldr	r3, [pc, #48]	; (8001464 <HAL_MspInit+0x44>)
 8001434:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001436:	f003 0301 	and.w	r3, r3, #1
 800143a:	607b      	str	r3, [r7, #4]
 800143c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800143e:	4b09      	ldr	r3, [pc, #36]	; (8001464 <HAL_MspInit+0x44>)
 8001440:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001442:	4a08      	ldr	r2, [pc, #32]	; (8001464 <HAL_MspInit+0x44>)
 8001444:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001448:	6593      	str	r3, [r2, #88]	; 0x58
 800144a:	4b06      	ldr	r3, [pc, #24]	; (8001464 <HAL_MspInit+0x44>)
 800144c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800144e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001452:	603b      	str	r3, [r7, #0]
 8001454:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001456:	bf00      	nop
 8001458:	370c      	adds	r7, #12
 800145a:	46bd      	mov	sp, r7
 800145c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001460:	4770      	bx	lr
 8001462:	bf00      	nop
 8001464:	40021000 	.word	0x40021000

08001468 <HAL_LPTIM_MspInit>:
* This function configures the hardware resources used in this example
* @param hlptim: LPTIM handle pointer
* @retval None
*/
void HAL_LPTIM_MspInit(LPTIM_HandleTypeDef* hlptim)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	b098      	sub	sp, #96	; 0x60
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001470:	f107 030c 	add.w	r3, r7, #12
 8001474:	2254      	movs	r2, #84	; 0x54
 8001476:	2100      	movs	r1, #0
 8001478:	4618      	mov	r0, r3
 800147a:	f002 fdeb 	bl	8004054 <memset>
  if(hlptim->Instance==LPTIM1)
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	4a11      	ldr	r2, [pc, #68]	; (80014c8 <HAL_LPTIM_MspInit+0x60>)
 8001484:	4293      	cmp	r3, r2
 8001486:	d11a      	bne.n	80014be <HAL_LPTIM_MspInit+0x56>

  /* USER CODE END LPTIM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPTIM1;
 8001488:	f44f 7300 	mov.w	r3, #512	; 0x200
 800148c:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.Lptim1ClockSelection = RCC_LPTIM1CLKSOURCE_PCLK;
 800148e:	2300      	movs	r3, #0
 8001490:	643b      	str	r3, [r7, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001492:	f107 030c 	add.w	r3, r7, #12
 8001496:	4618      	mov	r0, r3
 8001498:	f001 fc04 	bl	8002ca4 <HAL_RCCEx_PeriphCLKConfig>
 800149c:	4603      	mov	r3, r0
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d001      	beq.n	80014a6 <HAL_LPTIM_MspInit+0x3e>
    {
      Error_Handler();
 80014a2:	f7ff ffb7 	bl	8001414 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPTIM1_CLK_ENABLE();
 80014a6:	4b09      	ldr	r3, [pc, #36]	; (80014cc <HAL_LPTIM_MspInit+0x64>)
 80014a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014aa:	4a08      	ldr	r2, [pc, #32]	; (80014cc <HAL_LPTIM_MspInit+0x64>)
 80014ac:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80014b0:	6593      	str	r3, [r2, #88]	; 0x58
 80014b2:	4b06      	ldr	r3, [pc, #24]	; (80014cc <HAL_LPTIM_MspInit+0x64>)
 80014b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014b6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80014ba:	60bb      	str	r3, [r7, #8]
 80014bc:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN LPTIM1_MspInit 1 */

  /* USER CODE END LPTIM1_MspInit 1 */
  }

}
 80014be:	bf00      	nop
 80014c0:	3760      	adds	r7, #96	; 0x60
 80014c2:	46bd      	mov	sp, r7
 80014c4:	bd80      	pop	{r7, pc}
 80014c6:	bf00      	nop
 80014c8:	40007c00 	.word	0x40007c00
 80014cc:	40021000 	.word	0x40021000

080014d0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80014d0:	b480      	push	{r7}
 80014d2:	b085      	sub	sp, #20
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	4a0a      	ldr	r2, [pc, #40]	; (8001508 <HAL_TIM_Base_MspInit+0x38>)
 80014de:	4293      	cmp	r3, r2
 80014e0:	d10b      	bne.n	80014fa <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80014e2:	4b0a      	ldr	r3, [pc, #40]	; (800150c <HAL_TIM_Base_MspInit+0x3c>)
 80014e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80014e6:	4a09      	ldr	r2, [pc, #36]	; (800150c <HAL_TIM_Base_MspInit+0x3c>)
 80014e8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80014ec:	6613      	str	r3, [r2, #96]	; 0x60
 80014ee:	4b07      	ldr	r3, [pc, #28]	; (800150c <HAL_TIM_Base_MspInit+0x3c>)
 80014f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80014f2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80014f6:	60fb      	str	r3, [r7, #12]
 80014f8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80014fa:	bf00      	nop
 80014fc:	3714      	adds	r7, #20
 80014fe:	46bd      	mov	sp, r7
 8001500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001504:	4770      	bx	lr
 8001506:	bf00      	nop
 8001508:	40012c00 	.word	0x40012c00
 800150c:	40021000 	.word	0x40021000

08001510 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	b09e      	sub	sp, #120	; 0x78
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001518:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800151c:	2200      	movs	r2, #0
 800151e:	601a      	str	r2, [r3, #0]
 8001520:	605a      	str	r2, [r3, #4]
 8001522:	609a      	str	r2, [r3, #8]
 8001524:	60da      	str	r2, [r3, #12]
 8001526:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001528:	f107 0310 	add.w	r3, r7, #16
 800152c:	2254      	movs	r2, #84	; 0x54
 800152e:	2100      	movs	r1, #0
 8001530:	4618      	mov	r0, r3
 8001532:	f002 fd8f 	bl	8004054 <memset>
  if(huart->Instance==USART2)
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	4a34      	ldr	r2, [pc, #208]	; (800160c <HAL_UART_MspInit+0xfc>)
 800153c:	4293      	cmp	r3, r2
 800153e:	d160      	bne.n	8001602 <HAL_UART_MspInit+0xf2>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001540:	2302      	movs	r3, #2
 8001542:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001544:	2300      	movs	r3, #0
 8001546:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001548:	f107 0310 	add.w	r3, r7, #16
 800154c:	4618      	mov	r0, r3
 800154e:	f001 fba9 	bl	8002ca4 <HAL_RCCEx_PeriphCLKConfig>
 8001552:	4603      	mov	r3, r0
 8001554:	2b00      	cmp	r3, #0
 8001556:	d001      	beq.n	800155c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001558:	f7ff ff5c 	bl	8001414 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800155c:	4b2c      	ldr	r3, [pc, #176]	; (8001610 <HAL_UART_MspInit+0x100>)
 800155e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001560:	4a2b      	ldr	r2, [pc, #172]	; (8001610 <HAL_UART_MspInit+0x100>)
 8001562:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001566:	6593      	str	r3, [r2, #88]	; 0x58
 8001568:	4b29      	ldr	r3, [pc, #164]	; (8001610 <HAL_UART_MspInit+0x100>)
 800156a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800156c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001570:	60fb      	str	r3, [r7, #12]
 8001572:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001574:	4b26      	ldr	r3, [pc, #152]	; (8001610 <HAL_UART_MspInit+0x100>)
 8001576:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001578:	4a25      	ldr	r2, [pc, #148]	; (8001610 <HAL_UART_MspInit+0x100>)
 800157a:	f043 0301 	orr.w	r3, r3, #1
 800157e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001580:	4b23      	ldr	r3, [pc, #140]	; (8001610 <HAL_UART_MspInit+0x100>)
 8001582:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001584:	f003 0301 	and.w	r3, r3, #1
 8001588:	60bb      	str	r3, [r7, #8]
 800158a:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA1     ------> USART2_DE
    PA2     ------> USART2_TX
    PA15 (JTDI)     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|VCP_TX_Pin;
 800158c:	2306      	movs	r3, #6
 800158e:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001590:	2302      	movs	r3, #2
 8001592:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001594:	2300      	movs	r3, #0
 8001596:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001598:	2303      	movs	r3, #3
 800159a:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800159c:	2307      	movs	r3, #7
 800159e:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015a0:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80015a4:	4619      	mov	r1, r3
 80015a6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015aa:	f000 fabb 	bl	8001b24 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_RX_Pin;
 80015ae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80015b2:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015b4:	2302      	movs	r3, #2
 80015b6:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015b8:	2300      	movs	r3, #0
 80015ba:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015bc:	2303      	movs	r3, #3
 80015be:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 80015c0:	2303      	movs	r3, #3
 80015c2:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 80015c4:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80015c8:	4619      	mov	r1, r3
 80015ca:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015ce:	f000 faa9 	bl	8001b24 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */
    /* disable input/output buffering */
    setvbuf(stdin ,NULL,_IONBF,0);
 80015d2:	4b10      	ldr	r3, [pc, #64]	; (8001614 <HAL_UART_MspInit+0x104>)
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	6858      	ldr	r0, [r3, #4]
 80015d8:	2300      	movs	r3, #0
 80015da:	2202      	movs	r2, #2
 80015dc:	2100      	movs	r1, #0
 80015de:	f003 f9ab 	bl	8004938 <setvbuf>
    setvbuf(stdout,NULL,_IONBF,0);
 80015e2:	4b0c      	ldr	r3, [pc, #48]	; (8001614 <HAL_UART_MspInit+0x104>)
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	6898      	ldr	r0, [r3, #8]
 80015e8:	2300      	movs	r3, #0
 80015ea:	2202      	movs	r2, #2
 80015ec:	2100      	movs	r1, #0
 80015ee:	f003 f9a3 	bl	8004938 <setvbuf>
    setvbuf(stderr,NULL,_IONBF,0);
 80015f2:	4b08      	ldr	r3, [pc, #32]	; (8001614 <HAL_UART_MspInit+0x104>)
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	68d8      	ldr	r0, [r3, #12]
 80015f8:	2300      	movs	r3, #0
 80015fa:	2202      	movs	r2, #2
 80015fc:	2100      	movs	r1, #0
 80015fe:	f003 f99b 	bl	8004938 <setvbuf>
  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001602:	bf00      	nop
 8001604:	3778      	adds	r7, #120	; 0x78
 8001606:	46bd      	mov	sp, r7
 8001608:	bd80      	pop	{r7, pc}
 800160a:	bf00      	nop
 800160c:	40004400 	.word	0x40004400
 8001610:	40021000 	.word	0x40021000
 8001614:	2000000c 	.word	0x2000000c

08001618 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001618:	b480      	push	{r7}
 800161a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800161c:	e7fe      	b.n	800161c <NMI_Handler+0x4>

0800161e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800161e:	b480      	push	{r7}
 8001620:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001622:	e7fe      	b.n	8001622 <HardFault_Handler+0x4>

08001624 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001624:	b480      	push	{r7}
 8001626:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001628:	e7fe      	b.n	8001628 <MemManage_Handler+0x4>

0800162a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800162a:	b480      	push	{r7}
 800162c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800162e:	e7fe      	b.n	800162e <BusFault_Handler+0x4>

08001630 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001630:	b480      	push	{r7}
 8001632:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001634:	e7fe      	b.n	8001634 <UsageFault_Handler+0x4>

08001636 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001636:	b480      	push	{r7}
 8001638:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800163a:	bf00      	nop
 800163c:	46bd      	mov	sp, r7
 800163e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001642:	4770      	bx	lr

08001644 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001644:	b480      	push	{r7}
 8001646:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001648:	bf00      	nop
 800164a:	46bd      	mov	sp, r7
 800164c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001650:	4770      	bx	lr

08001652 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001652:	b480      	push	{r7}
 8001654:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001656:	bf00      	nop
 8001658:	46bd      	mov	sp, r7
 800165a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165e:	4770      	bx	lr

08001660 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001664:	f000 f958 	bl	8001918 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001668:	bf00      	nop
 800166a:	bd80      	pop	{r7, pc}

0800166c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800166c:	b480      	push	{r7}
 800166e:	af00      	add	r7, sp, #0
  return 1;
 8001670:	2301      	movs	r3, #1
}
 8001672:	4618      	mov	r0, r3
 8001674:	46bd      	mov	sp, r7
 8001676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167a:	4770      	bx	lr

0800167c <_kill>:

int _kill(int pid, int sig)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	b082      	sub	sp, #8
 8001680:	af00      	add	r7, sp, #0
 8001682:	6078      	str	r0, [r7, #4]
 8001684:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001686:	f002 fcbb 	bl	8004000 <__errno>
 800168a:	4603      	mov	r3, r0
 800168c:	2216      	movs	r2, #22
 800168e:	601a      	str	r2, [r3, #0]
  return -1;
 8001690:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001694:	4618      	mov	r0, r3
 8001696:	3708      	adds	r7, #8
 8001698:	46bd      	mov	sp, r7
 800169a:	bd80      	pop	{r7, pc}

0800169c <_exit>:

void _exit (int status)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	b082      	sub	sp, #8
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80016a4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80016a8:	6878      	ldr	r0, [r7, #4]
 80016aa:	f7ff ffe7 	bl	800167c <_kill>
  while (1) {}    /* Make sure we hang here */
 80016ae:	e7fe      	b.n	80016ae <_exit+0x12>

080016b0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b086      	sub	sp, #24
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	60f8      	str	r0, [r7, #12]
 80016b8:	60b9      	str	r1, [r7, #8]
 80016ba:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016bc:	2300      	movs	r3, #0
 80016be:	617b      	str	r3, [r7, #20]
 80016c0:	e00a      	b.n	80016d8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80016c2:	f3af 8000 	nop.w
 80016c6:	4601      	mov	r1, r0
 80016c8:	68bb      	ldr	r3, [r7, #8]
 80016ca:	1c5a      	adds	r2, r3, #1
 80016cc:	60ba      	str	r2, [r7, #8]
 80016ce:	b2ca      	uxtb	r2, r1
 80016d0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016d2:	697b      	ldr	r3, [r7, #20]
 80016d4:	3301      	adds	r3, #1
 80016d6:	617b      	str	r3, [r7, #20]
 80016d8:	697a      	ldr	r2, [r7, #20]
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	429a      	cmp	r2, r3
 80016de:	dbf0      	blt.n	80016c2 <_read+0x12>
  }

  return len;
 80016e0:	687b      	ldr	r3, [r7, #4]
}
 80016e2:	4618      	mov	r0, r3
 80016e4:	3718      	adds	r7, #24
 80016e6:	46bd      	mov	sp, r7
 80016e8:	bd80      	pop	{r7, pc}

080016ea <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80016ea:	b580      	push	{r7, lr}
 80016ec:	b086      	sub	sp, #24
 80016ee:	af00      	add	r7, sp, #0
 80016f0:	60f8      	str	r0, [r7, #12]
 80016f2:	60b9      	str	r1, [r7, #8]
 80016f4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016f6:	2300      	movs	r3, #0
 80016f8:	617b      	str	r3, [r7, #20]
 80016fa:	e009      	b.n	8001710 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80016fc:	68bb      	ldr	r3, [r7, #8]
 80016fe:	1c5a      	adds	r2, r3, #1
 8001700:	60ba      	str	r2, [r7, #8]
 8001702:	781b      	ldrb	r3, [r3, #0]
 8001704:	4618      	mov	r0, r3
 8001706:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800170a:	697b      	ldr	r3, [r7, #20]
 800170c:	3301      	adds	r3, #1
 800170e:	617b      	str	r3, [r7, #20]
 8001710:	697a      	ldr	r2, [r7, #20]
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	429a      	cmp	r2, r3
 8001716:	dbf1      	blt.n	80016fc <_write+0x12>
  }
  return len;
 8001718:	687b      	ldr	r3, [r7, #4]
}
 800171a:	4618      	mov	r0, r3
 800171c:	3718      	adds	r7, #24
 800171e:	46bd      	mov	sp, r7
 8001720:	bd80      	pop	{r7, pc}

08001722 <_close>:

int _close(int file)
{
 8001722:	b480      	push	{r7}
 8001724:	b083      	sub	sp, #12
 8001726:	af00      	add	r7, sp, #0
 8001728:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800172a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800172e:	4618      	mov	r0, r3
 8001730:	370c      	adds	r7, #12
 8001732:	46bd      	mov	sp, r7
 8001734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001738:	4770      	bx	lr

0800173a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800173a:	b480      	push	{r7}
 800173c:	b083      	sub	sp, #12
 800173e:	af00      	add	r7, sp, #0
 8001740:	6078      	str	r0, [r7, #4]
 8001742:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001744:	683b      	ldr	r3, [r7, #0]
 8001746:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800174a:	605a      	str	r2, [r3, #4]
  return 0;
 800174c:	2300      	movs	r3, #0
}
 800174e:	4618      	mov	r0, r3
 8001750:	370c      	adds	r7, #12
 8001752:	46bd      	mov	sp, r7
 8001754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001758:	4770      	bx	lr

0800175a <_isatty>:

int _isatty(int file)
{
 800175a:	b480      	push	{r7}
 800175c:	b083      	sub	sp, #12
 800175e:	af00      	add	r7, sp, #0
 8001760:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001762:	2301      	movs	r3, #1
}
 8001764:	4618      	mov	r0, r3
 8001766:	370c      	adds	r7, #12
 8001768:	46bd      	mov	sp, r7
 800176a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176e:	4770      	bx	lr

08001770 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001770:	b480      	push	{r7}
 8001772:	b085      	sub	sp, #20
 8001774:	af00      	add	r7, sp, #0
 8001776:	60f8      	str	r0, [r7, #12]
 8001778:	60b9      	str	r1, [r7, #8]
 800177a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800177c:	2300      	movs	r3, #0
}
 800177e:	4618      	mov	r0, r3
 8001780:	3714      	adds	r7, #20
 8001782:	46bd      	mov	sp, r7
 8001784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001788:	4770      	bx	lr
	...

0800178c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	b086      	sub	sp, #24
 8001790:	af00      	add	r7, sp, #0
 8001792:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001794:	4a14      	ldr	r2, [pc, #80]	; (80017e8 <_sbrk+0x5c>)
 8001796:	4b15      	ldr	r3, [pc, #84]	; (80017ec <_sbrk+0x60>)
 8001798:	1ad3      	subs	r3, r2, r3
 800179a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800179c:	697b      	ldr	r3, [r7, #20]
 800179e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80017a0:	4b13      	ldr	r3, [pc, #76]	; (80017f0 <_sbrk+0x64>)
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d102      	bne.n	80017ae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80017a8:	4b11      	ldr	r3, [pc, #68]	; (80017f0 <_sbrk+0x64>)
 80017aa:	4a12      	ldr	r2, [pc, #72]	; (80017f4 <_sbrk+0x68>)
 80017ac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80017ae:	4b10      	ldr	r3, [pc, #64]	; (80017f0 <_sbrk+0x64>)
 80017b0:	681a      	ldr	r2, [r3, #0]
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	4413      	add	r3, r2
 80017b6:	693a      	ldr	r2, [r7, #16]
 80017b8:	429a      	cmp	r2, r3
 80017ba:	d207      	bcs.n	80017cc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80017bc:	f002 fc20 	bl	8004000 <__errno>
 80017c0:	4603      	mov	r3, r0
 80017c2:	220c      	movs	r2, #12
 80017c4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80017c6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80017ca:	e009      	b.n	80017e0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80017cc:	4b08      	ldr	r3, [pc, #32]	; (80017f0 <_sbrk+0x64>)
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80017d2:	4b07      	ldr	r3, [pc, #28]	; (80017f0 <_sbrk+0x64>)
 80017d4:	681a      	ldr	r2, [r3, #0]
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	4413      	add	r3, r2
 80017da:	4a05      	ldr	r2, [pc, #20]	; (80017f0 <_sbrk+0x64>)
 80017dc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80017de:	68fb      	ldr	r3, [r7, #12]
}
 80017e0:	4618      	mov	r0, r3
 80017e2:	3718      	adds	r7, #24
 80017e4:	46bd      	mov	sp, r7
 80017e6:	bd80      	pop	{r7, pc}
 80017e8:	20010000 	.word	0x20010000
 80017ec:	00000400 	.word	0x00000400
 80017f0:	20000300 	.word	0x20000300
 80017f4:	20000318 	.word	0x20000318

080017f8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80017f8:	b480      	push	{r7}
 80017fa:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80017fc:	4b06      	ldr	r3, [pc, #24]	; (8001818 <SystemInit+0x20>)
 80017fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001802:	4a05      	ldr	r2, [pc, #20]	; (8001818 <SystemInit+0x20>)
 8001804:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001808:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 800180c:	bf00      	nop
 800180e:	46bd      	mov	sp, r7
 8001810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001814:	4770      	bx	lr
 8001816:	bf00      	nop
 8001818:	e000ed00 	.word	0xe000ed00

0800181c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800181c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001854 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001820:	f7ff ffea 	bl	80017f8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001824:	480c      	ldr	r0, [pc, #48]	; (8001858 <LoopForever+0x6>)
  ldr r1, =_edata
 8001826:	490d      	ldr	r1, [pc, #52]	; (800185c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001828:	4a0d      	ldr	r2, [pc, #52]	; (8001860 <LoopForever+0xe>)
  movs r3, #0
 800182a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800182c:	e002      	b.n	8001834 <LoopCopyDataInit>

0800182e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800182e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001830:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001832:	3304      	adds	r3, #4

08001834 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001834:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001836:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001838:	d3f9      	bcc.n	800182e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800183a:	4a0a      	ldr	r2, [pc, #40]	; (8001864 <LoopForever+0x12>)
  ldr r4, =_ebss
 800183c:	4c0a      	ldr	r4, [pc, #40]	; (8001868 <LoopForever+0x16>)
  movs r3, #0
 800183e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001840:	e001      	b.n	8001846 <LoopFillZerobss>

08001842 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001842:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001844:	3204      	adds	r2, #4

08001846 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001846:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001848:	d3fb      	bcc.n	8001842 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800184a:	f002 fbdf 	bl	800400c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800184e:	f7ff fc7b 	bl	8001148 <main>

08001852 <LoopForever>:

LoopForever:
    b LoopForever
 8001852:	e7fe      	b.n	8001852 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001854:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001858:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800185c:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8001860:	0800706c 	.word	0x0800706c
  ldr r2, =_sbss
 8001864:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8001868:	20000318 	.word	0x20000318

0800186c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800186c:	e7fe      	b.n	800186c <ADC1_IRQHandler>

0800186e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800186e:	b580      	push	{r7, lr}
 8001870:	b082      	sub	sp, #8
 8001872:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001874:	2300      	movs	r3, #0
 8001876:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001878:	2003      	movs	r0, #3
 800187a:	f000 f91f 	bl	8001abc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800187e:	2000      	movs	r0, #0
 8001880:	f000 f80e 	bl	80018a0 <HAL_InitTick>
 8001884:	4603      	mov	r3, r0
 8001886:	2b00      	cmp	r3, #0
 8001888:	d002      	beq.n	8001890 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800188a:	2301      	movs	r3, #1
 800188c:	71fb      	strb	r3, [r7, #7]
 800188e:	e001      	b.n	8001894 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001890:	f7ff fdc6 	bl	8001420 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001894:	79fb      	ldrb	r3, [r7, #7]
}
 8001896:	4618      	mov	r0, r3
 8001898:	3708      	adds	r7, #8
 800189a:	46bd      	mov	sp, r7
 800189c:	bd80      	pop	{r7, pc}
	...

080018a0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b084      	sub	sp, #16
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80018a8:	2300      	movs	r3, #0
 80018aa:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80018ac:	4b17      	ldr	r3, [pc, #92]	; (800190c <HAL_InitTick+0x6c>)
 80018ae:	781b      	ldrb	r3, [r3, #0]
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d023      	beq.n	80018fc <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80018b4:	4b16      	ldr	r3, [pc, #88]	; (8001910 <HAL_InitTick+0x70>)
 80018b6:	681a      	ldr	r2, [r3, #0]
 80018b8:	4b14      	ldr	r3, [pc, #80]	; (800190c <HAL_InitTick+0x6c>)
 80018ba:	781b      	ldrb	r3, [r3, #0]
 80018bc:	4619      	mov	r1, r3
 80018be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80018c2:	fbb3 f3f1 	udiv	r3, r3, r1
 80018c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80018ca:	4618      	mov	r0, r3
 80018cc:	f000 f91d 	bl	8001b0a <HAL_SYSTICK_Config>
 80018d0:	4603      	mov	r3, r0
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d10f      	bne.n	80018f6 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	2b0f      	cmp	r3, #15
 80018da:	d809      	bhi.n	80018f0 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80018dc:	2200      	movs	r2, #0
 80018de:	6879      	ldr	r1, [r7, #4]
 80018e0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80018e4:	f000 f8f5 	bl	8001ad2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80018e8:	4a0a      	ldr	r2, [pc, #40]	; (8001914 <HAL_InitTick+0x74>)
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	6013      	str	r3, [r2, #0]
 80018ee:	e007      	b.n	8001900 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80018f0:	2301      	movs	r3, #1
 80018f2:	73fb      	strb	r3, [r7, #15]
 80018f4:	e004      	b.n	8001900 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80018f6:	2301      	movs	r3, #1
 80018f8:	73fb      	strb	r3, [r7, #15]
 80018fa:	e001      	b.n	8001900 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80018fc:	2301      	movs	r3, #1
 80018fe:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001900:	7bfb      	ldrb	r3, [r7, #15]
}
 8001902:	4618      	mov	r0, r3
 8001904:	3710      	adds	r7, #16
 8001906:	46bd      	mov	sp, r7
 8001908:	bd80      	pop	{r7, pc}
 800190a:	bf00      	nop
 800190c:	20000008 	.word	0x20000008
 8001910:	20000000 	.word	0x20000000
 8001914:	20000004 	.word	0x20000004

08001918 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001918:	b480      	push	{r7}
 800191a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800191c:	4b06      	ldr	r3, [pc, #24]	; (8001938 <HAL_IncTick+0x20>)
 800191e:	781b      	ldrb	r3, [r3, #0]
 8001920:	461a      	mov	r2, r3
 8001922:	4b06      	ldr	r3, [pc, #24]	; (800193c <HAL_IncTick+0x24>)
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	4413      	add	r3, r2
 8001928:	4a04      	ldr	r2, [pc, #16]	; (800193c <HAL_IncTick+0x24>)
 800192a:	6013      	str	r3, [r2, #0]
}
 800192c:	bf00      	nop
 800192e:	46bd      	mov	sp, r7
 8001930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001934:	4770      	bx	lr
 8001936:	bf00      	nop
 8001938:	20000008 	.word	0x20000008
 800193c:	20000304 	.word	0x20000304

08001940 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001940:	b480      	push	{r7}
 8001942:	af00      	add	r7, sp, #0
  return uwTick;
 8001944:	4b03      	ldr	r3, [pc, #12]	; (8001954 <HAL_GetTick+0x14>)
 8001946:	681b      	ldr	r3, [r3, #0]
}
 8001948:	4618      	mov	r0, r3
 800194a:	46bd      	mov	sp, r7
 800194c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001950:	4770      	bx	lr
 8001952:	bf00      	nop
 8001954:	20000304 	.word	0x20000304

08001958 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001958:	b480      	push	{r7}
 800195a:	b085      	sub	sp, #20
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	f003 0307 	and.w	r3, r3, #7
 8001966:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001968:	4b0c      	ldr	r3, [pc, #48]	; (800199c <__NVIC_SetPriorityGrouping+0x44>)
 800196a:	68db      	ldr	r3, [r3, #12]
 800196c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800196e:	68ba      	ldr	r2, [r7, #8]
 8001970:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001974:	4013      	ands	r3, r2
 8001976:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800197c:	68bb      	ldr	r3, [r7, #8]
 800197e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001980:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001984:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001988:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800198a:	4a04      	ldr	r2, [pc, #16]	; (800199c <__NVIC_SetPriorityGrouping+0x44>)
 800198c:	68bb      	ldr	r3, [r7, #8]
 800198e:	60d3      	str	r3, [r2, #12]
}
 8001990:	bf00      	nop
 8001992:	3714      	adds	r7, #20
 8001994:	46bd      	mov	sp, r7
 8001996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199a:	4770      	bx	lr
 800199c:	e000ed00 	.word	0xe000ed00

080019a0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80019a0:	b480      	push	{r7}
 80019a2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80019a4:	4b04      	ldr	r3, [pc, #16]	; (80019b8 <__NVIC_GetPriorityGrouping+0x18>)
 80019a6:	68db      	ldr	r3, [r3, #12]
 80019a8:	0a1b      	lsrs	r3, r3, #8
 80019aa:	f003 0307 	and.w	r3, r3, #7
}
 80019ae:	4618      	mov	r0, r3
 80019b0:	46bd      	mov	sp, r7
 80019b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b6:	4770      	bx	lr
 80019b8:	e000ed00 	.word	0xe000ed00

080019bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80019bc:	b480      	push	{r7}
 80019be:	b083      	sub	sp, #12
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	4603      	mov	r3, r0
 80019c4:	6039      	str	r1, [r7, #0]
 80019c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	db0a      	blt.n	80019e6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019d0:	683b      	ldr	r3, [r7, #0]
 80019d2:	b2da      	uxtb	r2, r3
 80019d4:	490c      	ldr	r1, [pc, #48]	; (8001a08 <__NVIC_SetPriority+0x4c>)
 80019d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019da:	0112      	lsls	r2, r2, #4
 80019dc:	b2d2      	uxtb	r2, r2
 80019de:	440b      	add	r3, r1
 80019e0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80019e4:	e00a      	b.n	80019fc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019e6:	683b      	ldr	r3, [r7, #0]
 80019e8:	b2da      	uxtb	r2, r3
 80019ea:	4908      	ldr	r1, [pc, #32]	; (8001a0c <__NVIC_SetPriority+0x50>)
 80019ec:	79fb      	ldrb	r3, [r7, #7]
 80019ee:	f003 030f 	and.w	r3, r3, #15
 80019f2:	3b04      	subs	r3, #4
 80019f4:	0112      	lsls	r2, r2, #4
 80019f6:	b2d2      	uxtb	r2, r2
 80019f8:	440b      	add	r3, r1
 80019fa:	761a      	strb	r2, [r3, #24]
}
 80019fc:	bf00      	nop
 80019fe:	370c      	adds	r7, #12
 8001a00:	46bd      	mov	sp, r7
 8001a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a06:	4770      	bx	lr
 8001a08:	e000e100 	.word	0xe000e100
 8001a0c:	e000ed00 	.word	0xe000ed00

08001a10 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a10:	b480      	push	{r7}
 8001a12:	b089      	sub	sp, #36	; 0x24
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	60f8      	str	r0, [r7, #12]
 8001a18:	60b9      	str	r1, [r7, #8]
 8001a1a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	f003 0307 	and.w	r3, r3, #7
 8001a22:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a24:	69fb      	ldr	r3, [r7, #28]
 8001a26:	f1c3 0307 	rsb	r3, r3, #7
 8001a2a:	2b04      	cmp	r3, #4
 8001a2c:	bf28      	it	cs
 8001a2e:	2304      	movcs	r3, #4
 8001a30:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a32:	69fb      	ldr	r3, [r7, #28]
 8001a34:	3304      	adds	r3, #4
 8001a36:	2b06      	cmp	r3, #6
 8001a38:	d902      	bls.n	8001a40 <NVIC_EncodePriority+0x30>
 8001a3a:	69fb      	ldr	r3, [r7, #28]
 8001a3c:	3b03      	subs	r3, #3
 8001a3e:	e000      	b.n	8001a42 <NVIC_EncodePriority+0x32>
 8001a40:	2300      	movs	r3, #0
 8001a42:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a44:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001a48:	69bb      	ldr	r3, [r7, #24]
 8001a4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a4e:	43da      	mvns	r2, r3
 8001a50:	68bb      	ldr	r3, [r7, #8]
 8001a52:	401a      	ands	r2, r3
 8001a54:	697b      	ldr	r3, [r7, #20]
 8001a56:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a58:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001a5c:	697b      	ldr	r3, [r7, #20]
 8001a5e:	fa01 f303 	lsl.w	r3, r1, r3
 8001a62:	43d9      	mvns	r1, r3
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a68:	4313      	orrs	r3, r2
         );
}
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	3724      	adds	r7, #36	; 0x24
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a74:	4770      	bx	lr
	...

08001a78 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b082      	sub	sp, #8
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	3b01      	subs	r3, #1
 8001a84:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001a88:	d301      	bcc.n	8001a8e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a8a:	2301      	movs	r3, #1
 8001a8c:	e00f      	b.n	8001aae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a8e:	4a0a      	ldr	r2, [pc, #40]	; (8001ab8 <SysTick_Config+0x40>)
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	3b01      	subs	r3, #1
 8001a94:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a96:	210f      	movs	r1, #15
 8001a98:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001a9c:	f7ff ff8e 	bl	80019bc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001aa0:	4b05      	ldr	r3, [pc, #20]	; (8001ab8 <SysTick_Config+0x40>)
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001aa6:	4b04      	ldr	r3, [pc, #16]	; (8001ab8 <SysTick_Config+0x40>)
 8001aa8:	2207      	movs	r2, #7
 8001aaa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001aac:	2300      	movs	r3, #0
}
 8001aae:	4618      	mov	r0, r3
 8001ab0:	3708      	adds	r7, #8
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	bd80      	pop	{r7, pc}
 8001ab6:	bf00      	nop
 8001ab8:	e000e010 	.word	0xe000e010

08001abc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	b082      	sub	sp, #8
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ac4:	6878      	ldr	r0, [r7, #4]
 8001ac6:	f7ff ff47 	bl	8001958 <__NVIC_SetPriorityGrouping>
}
 8001aca:	bf00      	nop
 8001acc:	3708      	adds	r7, #8
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	bd80      	pop	{r7, pc}

08001ad2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ad2:	b580      	push	{r7, lr}
 8001ad4:	b086      	sub	sp, #24
 8001ad6:	af00      	add	r7, sp, #0
 8001ad8:	4603      	mov	r3, r0
 8001ada:	60b9      	str	r1, [r7, #8]
 8001adc:	607a      	str	r2, [r7, #4]
 8001ade:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001ae4:	f7ff ff5c 	bl	80019a0 <__NVIC_GetPriorityGrouping>
 8001ae8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001aea:	687a      	ldr	r2, [r7, #4]
 8001aec:	68b9      	ldr	r1, [r7, #8]
 8001aee:	6978      	ldr	r0, [r7, #20]
 8001af0:	f7ff ff8e 	bl	8001a10 <NVIC_EncodePriority>
 8001af4:	4602      	mov	r2, r0
 8001af6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001afa:	4611      	mov	r1, r2
 8001afc:	4618      	mov	r0, r3
 8001afe:	f7ff ff5d 	bl	80019bc <__NVIC_SetPriority>
}
 8001b02:	bf00      	nop
 8001b04:	3718      	adds	r7, #24
 8001b06:	46bd      	mov	sp, r7
 8001b08:	bd80      	pop	{r7, pc}

08001b0a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b0a:	b580      	push	{r7, lr}
 8001b0c:	b082      	sub	sp, #8
 8001b0e:	af00      	add	r7, sp, #0
 8001b10:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b12:	6878      	ldr	r0, [r7, #4]
 8001b14:	f7ff ffb0 	bl	8001a78 <SysTick_Config>
 8001b18:	4603      	mov	r3, r0
}
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	3708      	adds	r7, #8
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	bd80      	pop	{r7, pc}
	...

08001b24 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b24:	b480      	push	{r7}
 8001b26:	b087      	sub	sp, #28
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	6078      	str	r0, [r7, #4]
 8001b2c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001b2e:	2300      	movs	r3, #0
 8001b30:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b32:	e148      	b.n	8001dc6 <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001b34:	683b      	ldr	r3, [r7, #0]
 8001b36:	681a      	ldr	r2, [r3, #0]
 8001b38:	2101      	movs	r1, #1
 8001b3a:	697b      	ldr	r3, [r7, #20]
 8001b3c:	fa01 f303 	lsl.w	r3, r1, r3
 8001b40:	4013      	ands	r3, r2
 8001b42:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	f000 813a 	beq.w	8001dc0 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001b4c:	683b      	ldr	r3, [r7, #0]
 8001b4e:	685b      	ldr	r3, [r3, #4]
 8001b50:	f003 0303 	and.w	r3, r3, #3
 8001b54:	2b01      	cmp	r3, #1
 8001b56:	d005      	beq.n	8001b64 <HAL_GPIO_Init+0x40>
 8001b58:	683b      	ldr	r3, [r7, #0]
 8001b5a:	685b      	ldr	r3, [r3, #4]
 8001b5c:	f003 0303 	and.w	r3, r3, #3
 8001b60:	2b02      	cmp	r3, #2
 8001b62:	d130      	bne.n	8001bc6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	689b      	ldr	r3, [r3, #8]
 8001b68:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001b6a:	697b      	ldr	r3, [r7, #20]
 8001b6c:	005b      	lsls	r3, r3, #1
 8001b6e:	2203      	movs	r2, #3
 8001b70:	fa02 f303 	lsl.w	r3, r2, r3
 8001b74:	43db      	mvns	r3, r3
 8001b76:	693a      	ldr	r2, [r7, #16]
 8001b78:	4013      	ands	r3, r2
 8001b7a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001b7c:	683b      	ldr	r3, [r7, #0]
 8001b7e:	68da      	ldr	r2, [r3, #12]
 8001b80:	697b      	ldr	r3, [r7, #20]
 8001b82:	005b      	lsls	r3, r3, #1
 8001b84:	fa02 f303 	lsl.w	r3, r2, r3
 8001b88:	693a      	ldr	r2, [r7, #16]
 8001b8a:	4313      	orrs	r3, r2
 8001b8c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	693a      	ldr	r2, [r7, #16]
 8001b92:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	685b      	ldr	r3, [r3, #4]
 8001b98:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001b9a:	2201      	movs	r2, #1
 8001b9c:	697b      	ldr	r3, [r7, #20]
 8001b9e:	fa02 f303 	lsl.w	r3, r2, r3
 8001ba2:	43db      	mvns	r3, r3
 8001ba4:	693a      	ldr	r2, [r7, #16]
 8001ba6:	4013      	ands	r3, r2
 8001ba8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001baa:	683b      	ldr	r3, [r7, #0]
 8001bac:	685b      	ldr	r3, [r3, #4]
 8001bae:	091b      	lsrs	r3, r3, #4
 8001bb0:	f003 0201 	and.w	r2, r3, #1
 8001bb4:	697b      	ldr	r3, [r7, #20]
 8001bb6:	fa02 f303 	lsl.w	r3, r2, r3
 8001bba:	693a      	ldr	r2, [r7, #16]
 8001bbc:	4313      	orrs	r3, r2
 8001bbe:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	693a      	ldr	r2, [r7, #16]
 8001bc4:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001bc6:	683b      	ldr	r3, [r7, #0]
 8001bc8:	685b      	ldr	r3, [r3, #4]
 8001bca:	f003 0303 	and.w	r3, r3, #3
 8001bce:	2b03      	cmp	r3, #3
 8001bd0:	d017      	beq.n	8001c02 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	68db      	ldr	r3, [r3, #12]
 8001bd6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001bd8:	697b      	ldr	r3, [r7, #20]
 8001bda:	005b      	lsls	r3, r3, #1
 8001bdc:	2203      	movs	r2, #3
 8001bde:	fa02 f303 	lsl.w	r3, r2, r3
 8001be2:	43db      	mvns	r3, r3
 8001be4:	693a      	ldr	r2, [r7, #16]
 8001be6:	4013      	ands	r3, r2
 8001be8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001bea:	683b      	ldr	r3, [r7, #0]
 8001bec:	689a      	ldr	r2, [r3, #8]
 8001bee:	697b      	ldr	r3, [r7, #20]
 8001bf0:	005b      	lsls	r3, r3, #1
 8001bf2:	fa02 f303 	lsl.w	r3, r2, r3
 8001bf6:	693a      	ldr	r2, [r7, #16]
 8001bf8:	4313      	orrs	r3, r2
 8001bfa:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	693a      	ldr	r2, [r7, #16]
 8001c00:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c02:	683b      	ldr	r3, [r7, #0]
 8001c04:	685b      	ldr	r3, [r3, #4]
 8001c06:	f003 0303 	and.w	r3, r3, #3
 8001c0a:	2b02      	cmp	r3, #2
 8001c0c:	d123      	bne.n	8001c56 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001c0e:	697b      	ldr	r3, [r7, #20]
 8001c10:	08da      	lsrs	r2, r3, #3
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	3208      	adds	r2, #8
 8001c16:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c1a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001c1c:	697b      	ldr	r3, [r7, #20]
 8001c1e:	f003 0307 	and.w	r3, r3, #7
 8001c22:	009b      	lsls	r3, r3, #2
 8001c24:	220f      	movs	r2, #15
 8001c26:	fa02 f303 	lsl.w	r3, r2, r3
 8001c2a:	43db      	mvns	r3, r3
 8001c2c:	693a      	ldr	r2, [r7, #16]
 8001c2e:	4013      	ands	r3, r2
 8001c30:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001c32:	683b      	ldr	r3, [r7, #0]
 8001c34:	691a      	ldr	r2, [r3, #16]
 8001c36:	697b      	ldr	r3, [r7, #20]
 8001c38:	f003 0307 	and.w	r3, r3, #7
 8001c3c:	009b      	lsls	r3, r3, #2
 8001c3e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c42:	693a      	ldr	r2, [r7, #16]
 8001c44:	4313      	orrs	r3, r2
 8001c46:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001c48:	697b      	ldr	r3, [r7, #20]
 8001c4a:	08da      	lsrs	r2, r3, #3
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	3208      	adds	r2, #8
 8001c50:	6939      	ldr	r1, [r7, #16]
 8001c52:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001c5c:	697b      	ldr	r3, [r7, #20]
 8001c5e:	005b      	lsls	r3, r3, #1
 8001c60:	2203      	movs	r2, #3
 8001c62:	fa02 f303 	lsl.w	r3, r2, r3
 8001c66:	43db      	mvns	r3, r3
 8001c68:	693a      	ldr	r2, [r7, #16]
 8001c6a:	4013      	ands	r3, r2
 8001c6c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001c6e:	683b      	ldr	r3, [r7, #0]
 8001c70:	685b      	ldr	r3, [r3, #4]
 8001c72:	f003 0203 	and.w	r2, r3, #3
 8001c76:	697b      	ldr	r3, [r7, #20]
 8001c78:	005b      	lsls	r3, r3, #1
 8001c7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c7e:	693a      	ldr	r2, [r7, #16]
 8001c80:	4313      	orrs	r3, r2
 8001c82:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	693a      	ldr	r2, [r7, #16]
 8001c88:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001c8a:	683b      	ldr	r3, [r7, #0]
 8001c8c:	685b      	ldr	r3, [r3, #4]
 8001c8e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	f000 8094 	beq.w	8001dc0 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c98:	4b52      	ldr	r3, [pc, #328]	; (8001de4 <HAL_GPIO_Init+0x2c0>)
 8001c9a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c9c:	4a51      	ldr	r2, [pc, #324]	; (8001de4 <HAL_GPIO_Init+0x2c0>)
 8001c9e:	f043 0301 	orr.w	r3, r3, #1
 8001ca2:	6613      	str	r3, [r2, #96]	; 0x60
 8001ca4:	4b4f      	ldr	r3, [pc, #316]	; (8001de4 <HAL_GPIO_Init+0x2c0>)
 8001ca6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ca8:	f003 0301 	and.w	r3, r3, #1
 8001cac:	60bb      	str	r3, [r7, #8]
 8001cae:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001cb0:	4a4d      	ldr	r2, [pc, #308]	; (8001de8 <HAL_GPIO_Init+0x2c4>)
 8001cb2:	697b      	ldr	r3, [r7, #20]
 8001cb4:	089b      	lsrs	r3, r3, #2
 8001cb6:	3302      	adds	r3, #2
 8001cb8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001cbc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001cbe:	697b      	ldr	r3, [r7, #20]
 8001cc0:	f003 0303 	and.w	r3, r3, #3
 8001cc4:	009b      	lsls	r3, r3, #2
 8001cc6:	220f      	movs	r2, #15
 8001cc8:	fa02 f303 	lsl.w	r3, r2, r3
 8001ccc:	43db      	mvns	r3, r3
 8001cce:	693a      	ldr	r2, [r7, #16]
 8001cd0:	4013      	ands	r3, r2
 8001cd2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001cda:	d00d      	beq.n	8001cf8 <HAL_GPIO_Init+0x1d4>
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	4a43      	ldr	r2, [pc, #268]	; (8001dec <HAL_GPIO_Init+0x2c8>)
 8001ce0:	4293      	cmp	r3, r2
 8001ce2:	d007      	beq.n	8001cf4 <HAL_GPIO_Init+0x1d0>
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	4a42      	ldr	r2, [pc, #264]	; (8001df0 <HAL_GPIO_Init+0x2cc>)
 8001ce8:	4293      	cmp	r3, r2
 8001cea:	d101      	bne.n	8001cf0 <HAL_GPIO_Init+0x1cc>
 8001cec:	2302      	movs	r3, #2
 8001cee:	e004      	b.n	8001cfa <HAL_GPIO_Init+0x1d6>
 8001cf0:	2307      	movs	r3, #7
 8001cf2:	e002      	b.n	8001cfa <HAL_GPIO_Init+0x1d6>
 8001cf4:	2301      	movs	r3, #1
 8001cf6:	e000      	b.n	8001cfa <HAL_GPIO_Init+0x1d6>
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	697a      	ldr	r2, [r7, #20]
 8001cfc:	f002 0203 	and.w	r2, r2, #3
 8001d00:	0092      	lsls	r2, r2, #2
 8001d02:	4093      	lsls	r3, r2
 8001d04:	693a      	ldr	r2, [r7, #16]
 8001d06:	4313      	orrs	r3, r2
 8001d08:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001d0a:	4937      	ldr	r1, [pc, #220]	; (8001de8 <HAL_GPIO_Init+0x2c4>)
 8001d0c:	697b      	ldr	r3, [r7, #20]
 8001d0e:	089b      	lsrs	r3, r3, #2
 8001d10:	3302      	adds	r3, #2
 8001d12:	693a      	ldr	r2, [r7, #16]
 8001d14:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001d18:	4b36      	ldr	r3, [pc, #216]	; (8001df4 <HAL_GPIO_Init+0x2d0>)
 8001d1a:	689b      	ldr	r3, [r3, #8]
 8001d1c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	43db      	mvns	r3, r3
 8001d22:	693a      	ldr	r2, [r7, #16]
 8001d24:	4013      	ands	r3, r2
 8001d26:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001d28:	683b      	ldr	r3, [r7, #0]
 8001d2a:	685b      	ldr	r3, [r3, #4]
 8001d2c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d003      	beq.n	8001d3c <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8001d34:	693a      	ldr	r2, [r7, #16]
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	4313      	orrs	r3, r2
 8001d3a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001d3c:	4a2d      	ldr	r2, [pc, #180]	; (8001df4 <HAL_GPIO_Init+0x2d0>)
 8001d3e:	693b      	ldr	r3, [r7, #16]
 8001d40:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001d42:	4b2c      	ldr	r3, [pc, #176]	; (8001df4 <HAL_GPIO_Init+0x2d0>)
 8001d44:	68db      	ldr	r3, [r3, #12]
 8001d46:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	43db      	mvns	r3, r3
 8001d4c:	693a      	ldr	r2, [r7, #16]
 8001d4e:	4013      	ands	r3, r2
 8001d50:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001d52:	683b      	ldr	r3, [r7, #0]
 8001d54:	685b      	ldr	r3, [r3, #4]
 8001d56:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d003      	beq.n	8001d66 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8001d5e:	693a      	ldr	r2, [r7, #16]
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	4313      	orrs	r3, r2
 8001d64:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001d66:	4a23      	ldr	r2, [pc, #140]	; (8001df4 <HAL_GPIO_Init+0x2d0>)
 8001d68:	693b      	ldr	r3, [r7, #16]
 8001d6a:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001d6c:	4b21      	ldr	r3, [pc, #132]	; (8001df4 <HAL_GPIO_Init+0x2d0>)
 8001d6e:	685b      	ldr	r3, [r3, #4]
 8001d70:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	43db      	mvns	r3, r3
 8001d76:	693a      	ldr	r2, [r7, #16]
 8001d78:	4013      	ands	r3, r2
 8001d7a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001d7c:	683b      	ldr	r3, [r7, #0]
 8001d7e:	685b      	ldr	r3, [r3, #4]
 8001d80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d003      	beq.n	8001d90 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8001d88:	693a      	ldr	r2, [r7, #16]
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	4313      	orrs	r3, r2
 8001d8e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001d90:	4a18      	ldr	r2, [pc, #96]	; (8001df4 <HAL_GPIO_Init+0x2d0>)
 8001d92:	693b      	ldr	r3, [r7, #16]
 8001d94:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001d96:	4b17      	ldr	r3, [pc, #92]	; (8001df4 <HAL_GPIO_Init+0x2d0>)
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	43db      	mvns	r3, r3
 8001da0:	693a      	ldr	r2, [r7, #16]
 8001da2:	4013      	ands	r3, r2
 8001da4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001da6:	683b      	ldr	r3, [r7, #0]
 8001da8:	685b      	ldr	r3, [r3, #4]
 8001daa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d003      	beq.n	8001dba <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8001db2:	693a      	ldr	r2, [r7, #16]
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	4313      	orrs	r3, r2
 8001db8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001dba:	4a0e      	ldr	r2, [pc, #56]	; (8001df4 <HAL_GPIO_Init+0x2d0>)
 8001dbc:	693b      	ldr	r3, [r7, #16]
 8001dbe:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001dc0:	697b      	ldr	r3, [r7, #20]
 8001dc2:	3301      	adds	r3, #1
 8001dc4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001dc6:	683b      	ldr	r3, [r7, #0]
 8001dc8:	681a      	ldr	r2, [r3, #0]
 8001dca:	697b      	ldr	r3, [r7, #20]
 8001dcc:	fa22 f303 	lsr.w	r3, r2, r3
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	f47f aeaf 	bne.w	8001b34 <HAL_GPIO_Init+0x10>
  }
}
 8001dd6:	bf00      	nop
 8001dd8:	bf00      	nop
 8001dda:	371c      	adds	r7, #28
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de2:	4770      	bx	lr
 8001de4:	40021000 	.word	0x40021000
 8001de8:	40010000 	.word	0x40010000
 8001dec:	48000400 	.word	0x48000400
 8001df0:	48000800 	.word	0x48000800
 8001df4:	40010400 	.word	0x40010400

08001df8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001df8:	b480      	push	{r7}
 8001dfa:	b083      	sub	sp, #12
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]
 8001e00:	460b      	mov	r3, r1
 8001e02:	807b      	strh	r3, [r7, #2]
 8001e04:	4613      	mov	r3, r2
 8001e06:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001e08:	787b      	ldrb	r3, [r7, #1]
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d003      	beq.n	8001e16 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001e0e:	887a      	ldrh	r2, [r7, #2]
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001e14:	e002      	b.n	8001e1c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001e16:	887a      	ldrh	r2, [r7, #2]
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001e1c:	bf00      	nop
 8001e1e:	370c      	adds	r7, #12
 8001e20:	46bd      	mov	sp, r7
 8001e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e26:	4770      	bx	lr

08001e28 <HAL_LPTIM_Init>:
  *         LPTIM_InitTypeDef and initialize the associated handle.
  * @param  hlptim LPTIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_Init(LPTIM_HandleTypeDef *hlptim)
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	b084      	sub	sp, #16
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6078      	str	r0, [r7, #4]
  uint32_t tmpcfgr;

  /* Check the LPTIM handle allocation */
  if (hlptim == NULL)
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d101      	bne.n	8001e3a <HAL_LPTIM_Init+0x12>
  {
    return HAL_ERROR;
 8001e36:	2301      	movs	r3, #1
 8001e38:	e08f      	b.n	8001f5a <HAL_LPTIM_Init+0x132>
  /* Check the parameters */
  assert_param(IS_LPTIM_INSTANCE(hlptim->Instance));

  assert_param(IS_LPTIM_CLOCK_SOURCE(hlptim->Init.Clock.Source));
  assert_param(IS_LPTIM_CLOCK_PRESCALER(hlptim->Init.Clock.Prescaler));
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	685b      	ldr	r3, [r3, #4]
 8001e3e:	2b01      	cmp	r3, #1
  assert_param(IS_LPTIM_COUNTER_SOURCE(hlptim->Init.CounterSource));
#if defined(LPTIM_RCR_REP)
  assert_param(IS_LPTIM_REPETITION(hlptim->Init.RepetitionCounter));
#endif

  if (hlptim->State == HAL_LPTIM_STATE_RESET)
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8001e46:	b2db      	uxtb	r3, r3
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d106      	bne.n	8001e5a <HAL_LPTIM_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hlptim->Lock = HAL_UNLOCKED;
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	2200      	movs	r2, #0
 8001e50:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hlptim->MspInitCallback(hlptim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_LPTIM_MspInit(hlptim);
 8001e54:	6878      	ldr	r0, [r7, #4]
 8001e56:	f7ff fb07 	bl	8001468 <HAL_LPTIM_MspInit>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	2202      	movs	r2, #2
 8001e5e:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  }

#endif

  /* Get the LPTIMx CFGR value */
  tmpcfgr = hlptim->Instance->CFGR;
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	68db      	ldr	r3, [r3, #12]
 8001e68:	60fb      	str	r3, [r7, #12]

  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	685b      	ldr	r3, [r3, #4]
 8001e6e:	2b01      	cmp	r3, #1
 8001e70:	d004      	beq.n	8001e7c <HAL_LPTIM_Init+0x54>
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e76:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001e7a:	d103      	bne.n	8001e84 <HAL_LPTIM_Init+0x5c>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKPOL | LPTIM_CFGR_CKFLT));
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	f023 031e 	bic.w	r3, r3, #30
 8001e82:	60fb      	str	r3, [r7, #12]
  }
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	695b      	ldr	r3, [r3, #20]
 8001e88:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001e8c:	4293      	cmp	r3, r2
 8001e8e:	d005      	beq.n	8001e9c <HAL_LPTIM_Init+0x74>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_TRGFLT | LPTIM_CFGR_TRIGSEL));
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8001e96:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8001e9a:	60fb      	str	r3, [r7, #12]
  }

  /* Clear CKSEL, PRESC, TRIGEN, TRGFLT, WAVPOL, PRELOAD & COUNTMODE bits */
  tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKSEL | LPTIM_CFGR_TRIGEN | LPTIM_CFGR_PRELOAD |
 8001e9c:	68fa      	ldr	r2, [r7, #12]
 8001e9e:	4b31      	ldr	r3, [pc, #196]	; (8001f64 <HAL_LPTIM_Init+0x13c>)
 8001ea0:	4013      	ands	r3, r2
 8001ea2:	60fb      	str	r3, [r7, #12]
                          LPTIM_CFGR_WAVPOL | LPTIM_CFGR_PRESC | LPTIM_CFGR_COUNTMODE));

  /* Set initialization parameters */
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	685a      	ldr	r2, [r3, #4]
              hlptim->Init.Clock.Prescaler |
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	689b      	ldr	r3, [r3, #8]
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8001eac:	431a      	orrs	r2, r3
              hlptim->Init.OutputPolarity  |
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	6a1b      	ldr	r3, [r3, #32]
              hlptim->Init.Clock.Prescaler |
 8001eb2:	431a      	orrs	r2, r3
              hlptim->Init.UpdateMode      |
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              hlptim->Init.OutputPolarity  |
 8001eb8:	431a      	orrs	r2, r3
              hlptim->Init.CounterSource);
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              hlptim->Init.UpdateMode      |
 8001ebe:	4313      	orrs	r3, r2
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8001ec0:	68fa      	ldr	r2, [r7, #12]
 8001ec2:	4313      	orrs	r3, r2
 8001ec4:	60fb      	str	r3, [r7, #12]

  /* Glitch filters for internal triggers and  external inputs are configured
   * only if an internal clock source is provided to the LPTIM
   */
  if (hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC)
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	685b      	ldr	r3, [r3, #4]
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d107      	bne.n	8001ede <HAL_LPTIM_Init+0xb6>
  {
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	69da      	ldr	r2, [r3, #28]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 8001ed6:	4313      	orrs	r3, r2
 8001ed8:	68fa      	ldr	r2, [r7, #12]
 8001eda:	4313      	orrs	r3, r2
 8001edc:	60fb      	str	r3, [r7, #12]
  }

  /* Configure LPTIM external clock polarity and digital filter */
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	685b      	ldr	r3, [r3, #4]
 8001ee2:	2b01      	cmp	r3, #1
 8001ee4:	d004      	beq.n	8001ef0 <HAL_LPTIM_Init+0xc8>
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001eea:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001eee:	d107      	bne.n	8001f00 <HAL_LPTIM_Init+0xd8>
  {
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	68da      	ldr	r2, [r3, #12]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 8001ef8:	4313      	orrs	r3, r2
 8001efa:	68fa      	ldr	r2, [r7, #12]
 8001efc:	4313      	orrs	r3, r2
 8001efe:	60fb      	str	r3, [r7, #12]
  }

  /* Configure LPTIM external trigger */
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	695b      	ldr	r3, [r3, #20]
 8001f04:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001f08:	4293      	cmp	r3, r2
 8001f0a:	d00a      	beq.n	8001f22 <HAL_LPTIM_Init+0xfa>
  {
    /* Enable External trigger and set the trigger source */
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	695a      	ldr	r2, [r3, #20]
                hlptim->Init.Trigger.ActiveEdge |
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	699b      	ldr	r3, [r3, #24]
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8001f14:	431a      	orrs	r2, r3
                hlptim->Init.Trigger.SampleTime);
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	69db      	ldr	r3, [r3, #28]
                hlptim->Init.Trigger.ActiveEdge |
 8001f1a:	4313      	orrs	r3, r2
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8001f1c:	68fa      	ldr	r2, [r7, #12]
 8001f1e:	4313      	orrs	r3, r2
 8001f20:	60fb      	str	r3, [r7, #12]
  }

  /* Write to LPTIMx CFGR */
  hlptim->Instance->CFGR = tmpcfgr;
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	68fa      	ldr	r2, [r7, #12]
 8001f28:	60da      	str	r2, [r3, #12]

  /* Configure LPTIM input sources */
  if (hlptim->Instance == LPTIM1)
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	4a0e      	ldr	r2, [pc, #56]	; (8001f68 <HAL_LPTIM_Init+0x140>)
 8001f30:	4293      	cmp	r3, r2
 8001f32:	d108      	bne.n	8001f46 <HAL_LPTIM_Init+0x11e>
    /* Check LPTIM Input1 and Input2 sources */
    assert_param(IS_LPTIM_INPUT1_SOURCE(hlptim->Instance, hlptim->Init.Input1Source));
    assert_param(IS_LPTIM_INPUT2_SOURCE(hlptim->Instance, hlptim->Init.Input2Source));

    /* Configure LPTIM Input1 and Input2 sources */
    hlptim->Instance->OR = (hlptim->Init.Input1Source | hlptim->Init.Input2Source);
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	430a      	orrs	r2, r1
 8001f42:	621a      	str	r2, [r3, #32]
 8001f44:	e004      	b.n	8001f50 <HAL_LPTIM_Init+0x128>
  {
    /* Check LPTIM2 Input1 source */
    assert_param(IS_LPTIM_INPUT1_SOURCE(hlptim->Instance, hlptim->Init.Input1Source));

    /* Configure LPTIM2 Input1 source */
    hlptim->Instance->OR = hlptim->Init.Input1Source;
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	687a      	ldr	r2, [r7, #4]
 8001f4c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001f4e:	621a      	str	r2, [r3, #32]
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	2201      	movs	r2, #1
 8001f54:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36

  /* Return function status */
  return HAL_OK;
 8001f58:	2300      	movs	r3, #0
}
 8001f5a:	4618      	mov	r0, r3
 8001f5c:	3710      	adds	r7, #16
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	bd80      	pop	{r7, pc}
 8001f62:	bf00      	nop
 8001f64:	ff19f1fe 	.word	0xff19f1fe
 8001f68:	40007c00 	.word	0x40007c00

08001f6c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001f6c:	b480      	push	{r7}
 8001f6e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001f70:	4b04      	ldr	r3, [pc, #16]	; (8001f84 <HAL_PWREx_GetVoltageRange+0x18>)
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001f78:	4618      	mov	r0, r3
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f80:	4770      	bx	lr
 8001f82:	bf00      	nop
 8001f84:	40007000 	.word	0x40007000

08001f88 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001f88:	b480      	push	{r7}
 8001f8a:	b085      	sub	sp, #20
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001f96:	d130      	bne.n	8001ffa <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001f98:	4b23      	ldr	r3, [pc, #140]	; (8002028 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001fa0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001fa4:	d038      	beq.n	8002018 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001fa6:	4b20      	ldr	r3, [pc, #128]	; (8002028 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001fae:	4a1e      	ldr	r2, [pc, #120]	; (8002028 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001fb0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001fb4:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001fb6:	4b1d      	ldr	r3, [pc, #116]	; (800202c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	2232      	movs	r2, #50	; 0x32
 8001fbc:	fb02 f303 	mul.w	r3, r2, r3
 8001fc0:	4a1b      	ldr	r2, [pc, #108]	; (8002030 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001fc2:	fba2 2303 	umull	r2, r3, r2, r3
 8001fc6:	0c9b      	lsrs	r3, r3, #18
 8001fc8:	3301      	adds	r3, #1
 8001fca:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001fcc:	e002      	b.n	8001fd4 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	3b01      	subs	r3, #1
 8001fd2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001fd4:	4b14      	ldr	r3, [pc, #80]	; (8002028 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001fd6:	695b      	ldr	r3, [r3, #20]
 8001fd8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001fdc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001fe0:	d102      	bne.n	8001fe8 <HAL_PWREx_ControlVoltageScaling+0x60>
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d1f2      	bne.n	8001fce <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001fe8:	4b0f      	ldr	r3, [pc, #60]	; (8002028 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001fea:	695b      	ldr	r3, [r3, #20]
 8001fec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ff0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001ff4:	d110      	bne.n	8002018 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001ff6:	2303      	movs	r3, #3
 8001ff8:	e00f      	b.n	800201a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001ffa:	4b0b      	ldr	r3, [pc, #44]	; (8002028 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002002:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002006:	d007      	beq.n	8002018 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002008:	4b07      	ldr	r3, [pc, #28]	; (8002028 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002010:	4a05      	ldr	r2, [pc, #20]	; (8002028 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002012:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002016:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002018:	2300      	movs	r3, #0
}
 800201a:	4618      	mov	r0, r3
 800201c:	3714      	adds	r7, #20
 800201e:	46bd      	mov	sp, r7
 8002020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002024:	4770      	bx	lr
 8002026:	bf00      	nop
 8002028:	40007000 	.word	0x40007000
 800202c:	20000000 	.word	0x20000000
 8002030:	431bde83 	.word	0x431bde83

08002034 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002034:	b580      	push	{r7, lr}
 8002036:	b088      	sub	sp, #32
 8002038:	af00      	add	r7, sp, #0
 800203a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	2b00      	cmp	r3, #0
 8002040:	d102      	bne.n	8002048 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002042:	2301      	movs	r3, #1
 8002044:	f000 bc02 	b.w	800284c <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002048:	4b96      	ldr	r3, [pc, #600]	; (80022a4 <HAL_RCC_OscConfig+0x270>)
 800204a:	689b      	ldr	r3, [r3, #8]
 800204c:	f003 030c 	and.w	r3, r3, #12
 8002050:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002052:	4b94      	ldr	r3, [pc, #592]	; (80022a4 <HAL_RCC_OscConfig+0x270>)
 8002054:	68db      	ldr	r3, [r3, #12]
 8002056:	f003 0303 	and.w	r3, r3, #3
 800205a:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f003 0310 	and.w	r3, r3, #16
 8002064:	2b00      	cmp	r3, #0
 8002066:	f000 80e4 	beq.w	8002232 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800206a:	69bb      	ldr	r3, [r7, #24]
 800206c:	2b00      	cmp	r3, #0
 800206e:	d007      	beq.n	8002080 <HAL_RCC_OscConfig+0x4c>
 8002070:	69bb      	ldr	r3, [r7, #24]
 8002072:	2b0c      	cmp	r3, #12
 8002074:	f040 808b 	bne.w	800218e <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002078:	697b      	ldr	r3, [r7, #20]
 800207a:	2b01      	cmp	r3, #1
 800207c:	f040 8087 	bne.w	800218e <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002080:	4b88      	ldr	r3, [pc, #544]	; (80022a4 <HAL_RCC_OscConfig+0x270>)
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	f003 0302 	and.w	r3, r3, #2
 8002088:	2b00      	cmp	r3, #0
 800208a:	d005      	beq.n	8002098 <HAL_RCC_OscConfig+0x64>
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	699b      	ldr	r3, [r3, #24]
 8002090:	2b00      	cmp	r3, #0
 8002092:	d101      	bne.n	8002098 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8002094:	2301      	movs	r3, #1
 8002096:	e3d9      	b.n	800284c <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	6a1a      	ldr	r2, [r3, #32]
 800209c:	4b81      	ldr	r3, [pc, #516]	; (80022a4 <HAL_RCC_OscConfig+0x270>)
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	f003 0308 	and.w	r3, r3, #8
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d004      	beq.n	80020b2 <HAL_RCC_OscConfig+0x7e>
 80020a8:	4b7e      	ldr	r3, [pc, #504]	; (80022a4 <HAL_RCC_OscConfig+0x270>)
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80020b0:	e005      	b.n	80020be <HAL_RCC_OscConfig+0x8a>
 80020b2:	4b7c      	ldr	r3, [pc, #496]	; (80022a4 <HAL_RCC_OscConfig+0x270>)
 80020b4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80020b8:	091b      	lsrs	r3, r3, #4
 80020ba:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80020be:	4293      	cmp	r3, r2
 80020c0:	d223      	bcs.n	800210a <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	6a1b      	ldr	r3, [r3, #32]
 80020c6:	4618      	mov	r0, r3
 80020c8:	f000 fd8c 	bl	8002be4 <RCC_SetFlashLatencyFromMSIRange>
 80020cc:	4603      	mov	r3, r0
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d001      	beq.n	80020d6 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80020d2:	2301      	movs	r3, #1
 80020d4:	e3ba      	b.n	800284c <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80020d6:	4b73      	ldr	r3, [pc, #460]	; (80022a4 <HAL_RCC_OscConfig+0x270>)
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	4a72      	ldr	r2, [pc, #456]	; (80022a4 <HAL_RCC_OscConfig+0x270>)
 80020dc:	f043 0308 	orr.w	r3, r3, #8
 80020e0:	6013      	str	r3, [r2, #0]
 80020e2:	4b70      	ldr	r3, [pc, #448]	; (80022a4 <HAL_RCC_OscConfig+0x270>)
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	6a1b      	ldr	r3, [r3, #32]
 80020ee:	496d      	ldr	r1, [pc, #436]	; (80022a4 <HAL_RCC_OscConfig+0x270>)
 80020f0:	4313      	orrs	r3, r2
 80020f2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80020f4:	4b6b      	ldr	r3, [pc, #428]	; (80022a4 <HAL_RCC_OscConfig+0x270>)
 80020f6:	685b      	ldr	r3, [r3, #4]
 80020f8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	69db      	ldr	r3, [r3, #28]
 8002100:	021b      	lsls	r3, r3, #8
 8002102:	4968      	ldr	r1, [pc, #416]	; (80022a4 <HAL_RCC_OscConfig+0x270>)
 8002104:	4313      	orrs	r3, r2
 8002106:	604b      	str	r3, [r1, #4]
 8002108:	e025      	b.n	8002156 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800210a:	4b66      	ldr	r3, [pc, #408]	; (80022a4 <HAL_RCC_OscConfig+0x270>)
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	4a65      	ldr	r2, [pc, #404]	; (80022a4 <HAL_RCC_OscConfig+0x270>)
 8002110:	f043 0308 	orr.w	r3, r3, #8
 8002114:	6013      	str	r3, [r2, #0]
 8002116:	4b63      	ldr	r3, [pc, #396]	; (80022a4 <HAL_RCC_OscConfig+0x270>)
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	6a1b      	ldr	r3, [r3, #32]
 8002122:	4960      	ldr	r1, [pc, #384]	; (80022a4 <HAL_RCC_OscConfig+0x270>)
 8002124:	4313      	orrs	r3, r2
 8002126:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002128:	4b5e      	ldr	r3, [pc, #376]	; (80022a4 <HAL_RCC_OscConfig+0x270>)
 800212a:	685b      	ldr	r3, [r3, #4]
 800212c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	69db      	ldr	r3, [r3, #28]
 8002134:	021b      	lsls	r3, r3, #8
 8002136:	495b      	ldr	r1, [pc, #364]	; (80022a4 <HAL_RCC_OscConfig+0x270>)
 8002138:	4313      	orrs	r3, r2
 800213a:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800213c:	69bb      	ldr	r3, [r7, #24]
 800213e:	2b00      	cmp	r3, #0
 8002140:	d109      	bne.n	8002156 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	6a1b      	ldr	r3, [r3, #32]
 8002146:	4618      	mov	r0, r3
 8002148:	f000 fd4c 	bl	8002be4 <RCC_SetFlashLatencyFromMSIRange>
 800214c:	4603      	mov	r3, r0
 800214e:	2b00      	cmp	r3, #0
 8002150:	d001      	beq.n	8002156 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8002152:	2301      	movs	r3, #1
 8002154:	e37a      	b.n	800284c <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002156:	f000 fc81 	bl	8002a5c <HAL_RCC_GetSysClockFreq>
 800215a:	4602      	mov	r2, r0
 800215c:	4b51      	ldr	r3, [pc, #324]	; (80022a4 <HAL_RCC_OscConfig+0x270>)
 800215e:	689b      	ldr	r3, [r3, #8]
 8002160:	091b      	lsrs	r3, r3, #4
 8002162:	f003 030f 	and.w	r3, r3, #15
 8002166:	4950      	ldr	r1, [pc, #320]	; (80022a8 <HAL_RCC_OscConfig+0x274>)
 8002168:	5ccb      	ldrb	r3, [r1, r3]
 800216a:	f003 031f 	and.w	r3, r3, #31
 800216e:	fa22 f303 	lsr.w	r3, r2, r3
 8002172:	4a4e      	ldr	r2, [pc, #312]	; (80022ac <HAL_RCC_OscConfig+0x278>)
 8002174:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002176:	4b4e      	ldr	r3, [pc, #312]	; (80022b0 <HAL_RCC_OscConfig+0x27c>)
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	4618      	mov	r0, r3
 800217c:	f7ff fb90 	bl	80018a0 <HAL_InitTick>
 8002180:	4603      	mov	r3, r0
 8002182:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002184:	7bfb      	ldrb	r3, [r7, #15]
 8002186:	2b00      	cmp	r3, #0
 8002188:	d052      	beq.n	8002230 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800218a:	7bfb      	ldrb	r3, [r7, #15]
 800218c:	e35e      	b.n	800284c <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	699b      	ldr	r3, [r3, #24]
 8002192:	2b00      	cmp	r3, #0
 8002194:	d032      	beq.n	80021fc <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002196:	4b43      	ldr	r3, [pc, #268]	; (80022a4 <HAL_RCC_OscConfig+0x270>)
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	4a42      	ldr	r2, [pc, #264]	; (80022a4 <HAL_RCC_OscConfig+0x270>)
 800219c:	f043 0301 	orr.w	r3, r3, #1
 80021a0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80021a2:	f7ff fbcd 	bl	8001940 <HAL_GetTick>
 80021a6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80021a8:	e008      	b.n	80021bc <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80021aa:	f7ff fbc9 	bl	8001940 <HAL_GetTick>
 80021ae:	4602      	mov	r2, r0
 80021b0:	693b      	ldr	r3, [r7, #16]
 80021b2:	1ad3      	subs	r3, r2, r3
 80021b4:	2b02      	cmp	r3, #2
 80021b6:	d901      	bls.n	80021bc <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80021b8:	2303      	movs	r3, #3
 80021ba:	e347      	b.n	800284c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80021bc:	4b39      	ldr	r3, [pc, #228]	; (80022a4 <HAL_RCC_OscConfig+0x270>)
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	f003 0302 	and.w	r3, r3, #2
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d0f0      	beq.n	80021aa <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80021c8:	4b36      	ldr	r3, [pc, #216]	; (80022a4 <HAL_RCC_OscConfig+0x270>)
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	4a35      	ldr	r2, [pc, #212]	; (80022a4 <HAL_RCC_OscConfig+0x270>)
 80021ce:	f043 0308 	orr.w	r3, r3, #8
 80021d2:	6013      	str	r3, [r2, #0]
 80021d4:	4b33      	ldr	r3, [pc, #204]	; (80022a4 <HAL_RCC_OscConfig+0x270>)
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	6a1b      	ldr	r3, [r3, #32]
 80021e0:	4930      	ldr	r1, [pc, #192]	; (80022a4 <HAL_RCC_OscConfig+0x270>)
 80021e2:	4313      	orrs	r3, r2
 80021e4:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80021e6:	4b2f      	ldr	r3, [pc, #188]	; (80022a4 <HAL_RCC_OscConfig+0x270>)
 80021e8:	685b      	ldr	r3, [r3, #4]
 80021ea:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	69db      	ldr	r3, [r3, #28]
 80021f2:	021b      	lsls	r3, r3, #8
 80021f4:	492b      	ldr	r1, [pc, #172]	; (80022a4 <HAL_RCC_OscConfig+0x270>)
 80021f6:	4313      	orrs	r3, r2
 80021f8:	604b      	str	r3, [r1, #4]
 80021fa:	e01a      	b.n	8002232 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80021fc:	4b29      	ldr	r3, [pc, #164]	; (80022a4 <HAL_RCC_OscConfig+0x270>)
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	4a28      	ldr	r2, [pc, #160]	; (80022a4 <HAL_RCC_OscConfig+0x270>)
 8002202:	f023 0301 	bic.w	r3, r3, #1
 8002206:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002208:	f7ff fb9a 	bl	8001940 <HAL_GetTick>
 800220c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800220e:	e008      	b.n	8002222 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002210:	f7ff fb96 	bl	8001940 <HAL_GetTick>
 8002214:	4602      	mov	r2, r0
 8002216:	693b      	ldr	r3, [r7, #16]
 8002218:	1ad3      	subs	r3, r2, r3
 800221a:	2b02      	cmp	r3, #2
 800221c:	d901      	bls.n	8002222 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800221e:	2303      	movs	r3, #3
 8002220:	e314      	b.n	800284c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002222:	4b20      	ldr	r3, [pc, #128]	; (80022a4 <HAL_RCC_OscConfig+0x270>)
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f003 0302 	and.w	r3, r3, #2
 800222a:	2b00      	cmp	r3, #0
 800222c:	d1f0      	bne.n	8002210 <HAL_RCC_OscConfig+0x1dc>
 800222e:	e000      	b.n	8002232 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002230:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f003 0301 	and.w	r3, r3, #1
 800223a:	2b00      	cmp	r3, #0
 800223c:	d073      	beq.n	8002326 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800223e:	69bb      	ldr	r3, [r7, #24]
 8002240:	2b08      	cmp	r3, #8
 8002242:	d005      	beq.n	8002250 <HAL_RCC_OscConfig+0x21c>
 8002244:	69bb      	ldr	r3, [r7, #24]
 8002246:	2b0c      	cmp	r3, #12
 8002248:	d10e      	bne.n	8002268 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800224a:	697b      	ldr	r3, [r7, #20]
 800224c:	2b03      	cmp	r3, #3
 800224e:	d10b      	bne.n	8002268 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002250:	4b14      	ldr	r3, [pc, #80]	; (80022a4 <HAL_RCC_OscConfig+0x270>)
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002258:	2b00      	cmp	r3, #0
 800225a:	d063      	beq.n	8002324 <HAL_RCC_OscConfig+0x2f0>
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	685b      	ldr	r3, [r3, #4]
 8002260:	2b00      	cmp	r3, #0
 8002262:	d15f      	bne.n	8002324 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002264:	2301      	movs	r3, #1
 8002266:	e2f1      	b.n	800284c <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	685b      	ldr	r3, [r3, #4]
 800226c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002270:	d106      	bne.n	8002280 <HAL_RCC_OscConfig+0x24c>
 8002272:	4b0c      	ldr	r3, [pc, #48]	; (80022a4 <HAL_RCC_OscConfig+0x270>)
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	4a0b      	ldr	r2, [pc, #44]	; (80022a4 <HAL_RCC_OscConfig+0x270>)
 8002278:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800227c:	6013      	str	r3, [r2, #0]
 800227e:	e025      	b.n	80022cc <HAL_RCC_OscConfig+0x298>
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	685b      	ldr	r3, [r3, #4]
 8002284:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002288:	d114      	bne.n	80022b4 <HAL_RCC_OscConfig+0x280>
 800228a:	4b06      	ldr	r3, [pc, #24]	; (80022a4 <HAL_RCC_OscConfig+0x270>)
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	4a05      	ldr	r2, [pc, #20]	; (80022a4 <HAL_RCC_OscConfig+0x270>)
 8002290:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002294:	6013      	str	r3, [r2, #0]
 8002296:	4b03      	ldr	r3, [pc, #12]	; (80022a4 <HAL_RCC_OscConfig+0x270>)
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	4a02      	ldr	r2, [pc, #8]	; (80022a4 <HAL_RCC_OscConfig+0x270>)
 800229c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022a0:	6013      	str	r3, [r2, #0]
 80022a2:	e013      	b.n	80022cc <HAL_RCC_OscConfig+0x298>
 80022a4:	40021000 	.word	0x40021000
 80022a8:	08006c38 	.word	0x08006c38
 80022ac:	20000000 	.word	0x20000000
 80022b0:	20000004 	.word	0x20000004
 80022b4:	4ba0      	ldr	r3, [pc, #640]	; (8002538 <HAL_RCC_OscConfig+0x504>)
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	4a9f      	ldr	r2, [pc, #636]	; (8002538 <HAL_RCC_OscConfig+0x504>)
 80022ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80022be:	6013      	str	r3, [r2, #0]
 80022c0:	4b9d      	ldr	r3, [pc, #628]	; (8002538 <HAL_RCC_OscConfig+0x504>)
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	4a9c      	ldr	r2, [pc, #624]	; (8002538 <HAL_RCC_OscConfig+0x504>)
 80022c6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80022ca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	685b      	ldr	r3, [r3, #4]
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d013      	beq.n	80022fc <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022d4:	f7ff fb34 	bl	8001940 <HAL_GetTick>
 80022d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80022da:	e008      	b.n	80022ee <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80022dc:	f7ff fb30 	bl	8001940 <HAL_GetTick>
 80022e0:	4602      	mov	r2, r0
 80022e2:	693b      	ldr	r3, [r7, #16]
 80022e4:	1ad3      	subs	r3, r2, r3
 80022e6:	2b64      	cmp	r3, #100	; 0x64
 80022e8:	d901      	bls.n	80022ee <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80022ea:	2303      	movs	r3, #3
 80022ec:	e2ae      	b.n	800284c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80022ee:	4b92      	ldr	r3, [pc, #584]	; (8002538 <HAL_RCC_OscConfig+0x504>)
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d0f0      	beq.n	80022dc <HAL_RCC_OscConfig+0x2a8>
 80022fa:	e014      	b.n	8002326 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022fc:	f7ff fb20 	bl	8001940 <HAL_GetTick>
 8002300:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002302:	e008      	b.n	8002316 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002304:	f7ff fb1c 	bl	8001940 <HAL_GetTick>
 8002308:	4602      	mov	r2, r0
 800230a:	693b      	ldr	r3, [r7, #16]
 800230c:	1ad3      	subs	r3, r2, r3
 800230e:	2b64      	cmp	r3, #100	; 0x64
 8002310:	d901      	bls.n	8002316 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002312:	2303      	movs	r3, #3
 8002314:	e29a      	b.n	800284c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002316:	4b88      	ldr	r3, [pc, #544]	; (8002538 <HAL_RCC_OscConfig+0x504>)
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800231e:	2b00      	cmp	r3, #0
 8002320:	d1f0      	bne.n	8002304 <HAL_RCC_OscConfig+0x2d0>
 8002322:	e000      	b.n	8002326 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002324:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	f003 0302 	and.w	r3, r3, #2
 800232e:	2b00      	cmp	r3, #0
 8002330:	d060      	beq.n	80023f4 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002332:	69bb      	ldr	r3, [r7, #24]
 8002334:	2b04      	cmp	r3, #4
 8002336:	d005      	beq.n	8002344 <HAL_RCC_OscConfig+0x310>
 8002338:	69bb      	ldr	r3, [r7, #24]
 800233a:	2b0c      	cmp	r3, #12
 800233c:	d119      	bne.n	8002372 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800233e:	697b      	ldr	r3, [r7, #20]
 8002340:	2b02      	cmp	r3, #2
 8002342:	d116      	bne.n	8002372 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002344:	4b7c      	ldr	r3, [pc, #496]	; (8002538 <HAL_RCC_OscConfig+0x504>)
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800234c:	2b00      	cmp	r3, #0
 800234e:	d005      	beq.n	800235c <HAL_RCC_OscConfig+0x328>
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	68db      	ldr	r3, [r3, #12]
 8002354:	2b00      	cmp	r3, #0
 8002356:	d101      	bne.n	800235c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002358:	2301      	movs	r3, #1
 800235a:	e277      	b.n	800284c <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800235c:	4b76      	ldr	r3, [pc, #472]	; (8002538 <HAL_RCC_OscConfig+0x504>)
 800235e:	685b      	ldr	r3, [r3, #4]
 8002360:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	691b      	ldr	r3, [r3, #16]
 8002368:	061b      	lsls	r3, r3, #24
 800236a:	4973      	ldr	r1, [pc, #460]	; (8002538 <HAL_RCC_OscConfig+0x504>)
 800236c:	4313      	orrs	r3, r2
 800236e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002370:	e040      	b.n	80023f4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	68db      	ldr	r3, [r3, #12]
 8002376:	2b00      	cmp	r3, #0
 8002378:	d023      	beq.n	80023c2 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800237a:	4b6f      	ldr	r3, [pc, #444]	; (8002538 <HAL_RCC_OscConfig+0x504>)
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	4a6e      	ldr	r2, [pc, #440]	; (8002538 <HAL_RCC_OscConfig+0x504>)
 8002380:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002384:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002386:	f7ff fadb 	bl	8001940 <HAL_GetTick>
 800238a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800238c:	e008      	b.n	80023a0 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800238e:	f7ff fad7 	bl	8001940 <HAL_GetTick>
 8002392:	4602      	mov	r2, r0
 8002394:	693b      	ldr	r3, [r7, #16]
 8002396:	1ad3      	subs	r3, r2, r3
 8002398:	2b02      	cmp	r3, #2
 800239a:	d901      	bls.n	80023a0 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800239c:	2303      	movs	r3, #3
 800239e:	e255      	b.n	800284c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80023a0:	4b65      	ldr	r3, [pc, #404]	; (8002538 <HAL_RCC_OscConfig+0x504>)
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d0f0      	beq.n	800238e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023ac:	4b62      	ldr	r3, [pc, #392]	; (8002538 <HAL_RCC_OscConfig+0x504>)
 80023ae:	685b      	ldr	r3, [r3, #4]
 80023b0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	691b      	ldr	r3, [r3, #16]
 80023b8:	061b      	lsls	r3, r3, #24
 80023ba:	495f      	ldr	r1, [pc, #380]	; (8002538 <HAL_RCC_OscConfig+0x504>)
 80023bc:	4313      	orrs	r3, r2
 80023be:	604b      	str	r3, [r1, #4]
 80023c0:	e018      	b.n	80023f4 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80023c2:	4b5d      	ldr	r3, [pc, #372]	; (8002538 <HAL_RCC_OscConfig+0x504>)
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	4a5c      	ldr	r2, [pc, #368]	; (8002538 <HAL_RCC_OscConfig+0x504>)
 80023c8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80023cc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023ce:	f7ff fab7 	bl	8001940 <HAL_GetTick>
 80023d2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80023d4:	e008      	b.n	80023e8 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80023d6:	f7ff fab3 	bl	8001940 <HAL_GetTick>
 80023da:	4602      	mov	r2, r0
 80023dc:	693b      	ldr	r3, [r7, #16]
 80023de:	1ad3      	subs	r3, r2, r3
 80023e0:	2b02      	cmp	r3, #2
 80023e2:	d901      	bls.n	80023e8 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80023e4:	2303      	movs	r3, #3
 80023e6:	e231      	b.n	800284c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80023e8:	4b53      	ldr	r3, [pc, #332]	; (8002538 <HAL_RCC_OscConfig+0x504>)
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d1f0      	bne.n	80023d6 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	f003 0308 	and.w	r3, r3, #8
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d03c      	beq.n	800247a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	695b      	ldr	r3, [r3, #20]
 8002404:	2b00      	cmp	r3, #0
 8002406:	d01c      	beq.n	8002442 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002408:	4b4b      	ldr	r3, [pc, #300]	; (8002538 <HAL_RCC_OscConfig+0x504>)
 800240a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800240e:	4a4a      	ldr	r2, [pc, #296]	; (8002538 <HAL_RCC_OscConfig+0x504>)
 8002410:	f043 0301 	orr.w	r3, r3, #1
 8002414:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002418:	f7ff fa92 	bl	8001940 <HAL_GetTick>
 800241c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800241e:	e008      	b.n	8002432 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002420:	f7ff fa8e 	bl	8001940 <HAL_GetTick>
 8002424:	4602      	mov	r2, r0
 8002426:	693b      	ldr	r3, [r7, #16]
 8002428:	1ad3      	subs	r3, r2, r3
 800242a:	2b02      	cmp	r3, #2
 800242c:	d901      	bls.n	8002432 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800242e:	2303      	movs	r3, #3
 8002430:	e20c      	b.n	800284c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002432:	4b41      	ldr	r3, [pc, #260]	; (8002538 <HAL_RCC_OscConfig+0x504>)
 8002434:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002438:	f003 0302 	and.w	r3, r3, #2
 800243c:	2b00      	cmp	r3, #0
 800243e:	d0ef      	beq.n	8002420 <HAL_RCC_OscConfig+0x3ec>
 8002440:	e01b      	b.n	800247a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002442:	4b3d      	ldr	r3, [pc, #244]	; (8002538 <HAL_RCC_OscConfig+0x504>)
 8002444:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002448:	4a3b      	ldr	r2, [pc, #236]	; (8002538 <HAL_RCC_OscConfig+0x504>)
 800244a:	f023 0301 	bic.w	r3, r3, #1
 800244e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002452:	f7ff fa75 	bl	8001940 <HAL_GetTick>
 8002456:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002458:	e008      	b.n	800246c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800245a:	f7ff fa71 	bl	8001940 <HAL_GetTick>
 800245e:	4602      	mov	r2, r0
 8002460:	693b      	ldr	r3, [r7, #16]
 8002462:	1ad3      	subs	r3, r2, r3
 8002464:	2b02      	cmp	r3, #2
 8002466:	d901      	bls.n	800246c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002468:	2303      	movs	r3, #3
 800246a:	e1ef      	b.n	800284c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800246c:	4b32      	ldr	r3, [pc, #200]	; (8002538 <HAL_RCC_OscConfig+0x504>)
 800246e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002472:	f003 0302 	and.w	r3, r3, #2
 8002476:	2b00      	cmp	r3, #0
 8002478:	d1ef      	bne.n	800245a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f003 0304 	and.w	r3, r3, #4
 8002482:	2b00      	cmp	r3, #0
 8002484:	f000 80a6 	beq.w	80025d4 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002488:	2300      	movs	r3, #0
 800248a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800248c:	4b2a      	ldr	r3, [pc, #168]	; (8002538 <HAL_RCC_OscConfig+0x504>)
 800248e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002490:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002494:	2b00      	cmp	r3, #0
 8002496:	d10d      	bne.n	80024b4 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002498:	4b27      	ldr	r3, [pc, #156]	; (8002538 <HAL_RCC_OscConfig+0x504>)
 800249a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800249c:	4a26      	ldr	r2, [pc, #152]	; (8002538 <HAL_RCC_OscConfig+0x504>)
 800249e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024a2:	6593      	str	r3, [r2, #88]	; 0x58
 80024a4:	4b24      	ldr	r3, [pc, #144]	; (8002538 <HAL_RCC_OscConfig+0x504>)
 80024a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024ac:	60bb      	str	r3, [r7, #8]
 80024ae:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80024b0:	2301      	movs	r3, #1
 80024b2:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80024b4:	4b21      	ldr	r3, [pc, #132]	; (800253c <HAL_RCC_OscConfig+0x508>)
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d118      	bne.n	80024f2 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80024c0:	4b1e      	ldr	r3, [pc, #120]	; (800253c <HAL_RCC_OscConfig+0x508>)
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	4a1d      	ldr	r2, [pc, #116]	; (800253c <HAL_RCC_OscConfig+0x508>)
 80024c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024ca:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80024cc:	f7ff fa38 	bl	8001940 <HAL_GetTick>
 80024d0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80024d2:	e008      	b.n	80024e6 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80024d4:	f7ff fa34 	bl	8001940 <HAL_GetTick>
 80024d8:	4602      	mov	r2, r0
 80024da:	693b      	ldr	r3, [r7, #16]
 80024dc:	1ad3      	subs	r3, r2, r3
 80024de:	2b02      	cmp	r3, #2
 80024e0:	d901      	bls.n	80024e6 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80024e2:	2303      	movs	r3, #3
 80024e4:	e1b2      	b.n	800284c <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80024e6:	4b15      	ldr	r3, [pc, #84]	; (800253c <HAL_RCC_OscConfig+0x508>)
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d0f0      	beq.n	80024d4 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	689b      	ldr	r3, [r3, #8]
 80024f6:	2b01      	cmp	r3, #1
 80024f8:	d108      	bne.n	800250c <HAL_RCC_OscConfig+0x4d8>
 80024fa:	4b0f      	ldr	r3, [pc, #60]	; (8002538 <HAL_RCC_OscConfig+0x504>)
 80024fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002500:	4a0d      	ldr	r2, [pc, #52]	; (8002538 <HAL_RCC_OscConfig+0x504>)
 8002502:	f043 0301 	orr.w	r3, r3, #1
 8002506:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800250a:	e029      	b.n	8002560 <HAL_RCC_OscConfig+0x52c>
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	689b      	ldr	r3, [r3, #8]
 8002510:	2b05      	cmp	r3, #5
 8002512:	d115      	bne.n	8002540 <HAL_RCC_OscConfig+0x50c>
 8002514:	4b08      	ldr	r3, [pc, #32]	; (8002538 <HAL_RCC_OscConfig+0x504>)
 8002516:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800251a:	4a07      	ldr	r2, [pc, #28]	; (8002538 <HAL_RCC_OscConfig+0x504>)
 800251c:	f043 0304 	orr.w	r3, r3, #4
 8002520:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002524:	4b04      	ldr	r3, [pc, #16]	; (8002538 <HAL_RCC_OscConfig+0x504>)
 8002526:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800252a:	4a03      	ldr	r2, [pc, #12]	; (8002538 <HAL_RCC_OscConfig+0x504>)
 800252c:	f043 0301 	orr.w	r3, r3, #1
 8002530:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002534:	e014      	b.n	8002560 <HAL_RCC_OscConfig+0x52c>
 8002536:	bf00      	nop
 8002538:	40021000 	.word	0x40021000
 800253c:	40007000 	.word	0x40007000
 8002540:	4b9a      	ldr	r3, [pc, #616]	; (80027ac <HAL_RCC_OscConfig+0x778>)
 8002542:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002546:	4a99      	ldr	r2, [pc, #612]	; (80027ac <HAL_RCC_OscConfig+0x778>)
 8002548:	f023 0301 	bic.w	r3, r3, #1
 800254c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002550:	4b96      	ldr	r3, [pc, #600]	; (80027ac <HAL_RCC_OscConfig+0x778>)
 8002552:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002556:	4a95      	ldr	r2, [pc, #596]	; (80027ac <HAL_RCC_OscConfig+0x778>)
 8002558:	f023 0304 	bic.w	r3, r3, #4
 800255c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	689b      	ldr	r3, [r3, #8]
 8002564:	2b00      	cmp	r3, #0
 8002566:	d016      	beq.n	8002596 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002568:	f7ff f9ea 	bl	8001940 <HAL_GetTick>
 800256c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800256e:	e00a      	b.n	8002586 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002570:	f7ff f9e6 	bl	8001940 <HAL_GetTick>
 8002574:	4602      	mov	r2, r0
 8002576:	693b      	ldr	r3, [r7, #16]
 8002578:	1ad3      	subs	r3, r2, r3
 800257a:	f241 3288 	movw	r2, #5000	; 0x1388
 800257e:	4293      	cmp	r3, r2
 8002580:	d901      	bls.n	8002586 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002582:	2303      	movs	r3, #3
 8002584:	e162      	b.n	800284c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002586:	4b89      	ldr	r3, [pc, #548]	; (80027ac <HAL_RCC_OscConfig+0x778>)
 8002588:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800258c:	f003 0302 	and.w	r3, r3, #2
 8002590:	2b00      	cmp	r3, #0
 8002592:	d0ed      	beq.n	8002570 <HAL_RCC_OscConfig+0x53c>
 8002594:	e015      	b.n	80025c2 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002596:	f7ff f9d3 	bl	8001940 <HAL_GetTick>
 800259a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800259c:	e00a      	b.n	80025b4 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800259e:	f7ff f9cf 	bl	8001940 <HAL_GetTick>
 80025a2:	4602      	mov	r2, r0
 80025a4:	693b      	ldr	r3, [r7, #16]
 80025a6:	1ad3      	subs	r3, r2, r3
 80025a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80025ac:	4293      	cmp	r3, r2
 80025ae:	d901      	bls.n	80025b4 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80025b0:	2303      	movs	r3, #3
 80025b2:	e14b      	b.n	800284c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80025b4:	4b7d      	ldr	r3, [pc, #500]	; (80027ac <HAL_RCC_OscConfig+0x778>)
 80025b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025ba:	f003 0302 	and.w	r3, r3, #2
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d1ed      	bne.n	800259e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80025c2:	7ffb      	ldrb	r3, [r7, #31]
 80025c4:	2b01      	cmp	r3, #1
 80025c6:	d105      	bne.n	80025d4 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80025c8:	4b78      	ldr	r3, [pc, #480]	; (80027ac <HAL_RCC_OscConfig+0x778>)
 80025ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025cc:	4a77      	ldr	r2, [pc, #476]	; (80027ac <HAL_RCC_OscConfig+0x778>)
 80025ce:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80025d2:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f003 0320 	and.w	r3, r3, #32
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d03c      	beq.n	800265a <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d01c      	beq.n	8002622 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80025e8:	4b70      	ldr	r3, [pc, #448]	; (80027ac <HAL_RCC_OscConfig+0x778>)
 80025ea:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80025ee:	4a6f      	ldr	r2, [pc, #444]	; (80027ac <HAL_RCC_OscConfig+0x778>)
 80025f0:	f043 0301 	orr.w	r3, r3, #1
 80025f4:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025f8:	f7ff f9a2 	bl	8001940 <HAL_GetTick>
 80025fc:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80025fe:	e008      	b.n	8002612 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002600:	f7ff f99e 	bl	8001940 <HAL_GetTick>
 8002604:	4602      	mov	r2, r0
 8002606:	693b      	ldr	r3, [r7, #16]
 8002608:	1ad3      	subs	r3, r2, r3
 800260a:	2b02      	cmp	r3, #2
 800260c:	d901      	bls.n	8002612 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800260e:	2303      	movs	r3, #3
 8002610:	e11c      	b.n	800284c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002612:	4b66      	ldr	r3, [pc, #408]	; (80027ac <HAL_RCC_OscConfig+0x778>)
 8002614:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002618:	f003 0302 	and.w	r3, r3, #2
 800261c:	2b00      	cmp	r3, #0
 800261e:	d0ef      	beq.n	8002600 <HAL_RCC_OscConfig+0x5cc>
 8002620:	e01b      	b.n	800265a <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002622:	4b62      	ldr	r3, [pc, #392]	; (80027ac <HAL_RCC_OscConfig+0x778>)
 8002624:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002628:	4a60      	ldr	r2, [pc, #384]	; (80027ac <HAL_RCC_OscConfig+0x778>)
 800262a:	f023 0301 	bic.w	r3, r3, #1
 800262e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002632:	f7ff f985 	bl	8001940 <HAL_GetTick>
 8002636:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002638:	e008      	b.n	800264c <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800263a:	f7ff f981 	bl	8001940 <HAL_GetTick>
 800263e:	4602      	mov	r2, r0
 8002640:	693b      	ldr	r3, [r7, #16]
 8002642:	1ad3      	subs	r3, r2, r3
 8002644:	2b02      	cmp	r3, #2
 8002646:	d901      	bls.n	800264c <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8002648:	2303      	movs	r3, #3
 800264a:	e0ff      	b.n	800284c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800264c:	4b57      	ldr	r3, [pc, #348]	; (80027ac <HAL_RCC_OscConfig+0x778>)
 800264e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002652:	f003 0302 	and.w	r3, r3, #2
 8002656:	2b00      	cmp	r3, #0
 8002658:	d1ef      	bne.n	800263a <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800265e:	2b00      	cmp	r3, #0
 8002660:	f000 80f3 	beq.w	800284a <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002668:	2b02      	cmp	r3, #2
 800266a:	f040 80c9 	bne.w	8002800 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800266e:	4b4f      	ldr	r3, [pc, #316]	; (80027ac <HAL_RCC_OscConfig+0x778>)
 8002670:	68db      	ldr	r3, [r3, #12]
 8002672:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002674:	697b      	ldr	r3, [r7, #20]
 8002676:	f003 0203 	and.w	r2, r3, #3
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800267e:	429a      	cmp	r2, r3
 8002680:	d12c      	bne.n	80026dc <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002682:	697b      	ldr	r3, [r7, #20]
 8002684:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800268c:	3b01      	subs	r3, #1
 800268e:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002690:	429a      	cmp	r2, r3
 8002692:	d123      	bne.n	80026dc <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002694:	697b      	ldr	r3, [r7, #20]
 8002696:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800269e:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80026a0:	429a      	cmp	r2, r3
 80026a2:	d11b      	bne.n	80026dc <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80026a4:	697b      	ldr	r3, [r7, #20]
 80026a6:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026ae:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80026b0:	429a      	cmp	r2, r3
 80026b2:	d113      	bne.n	80026dc <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80026b4:	697b      	ldr	r3, [r7, #20]
 80026b6:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026be:	085b      	lsrs	r3, r3, #1
 80026c0:	3b01      	subs	r3, #1
 80026c2:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80026c4:	429a      	cmp	r2, r3
 80026c6:	d109      	bne.n	80026dc <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80026c8:	697b      	ldr	r3, [r7, #20]
 80026ca:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026d2:	085b      	lsrs	r3, r3, #1
 80026d4:	3b01      	subs	r3, #1
 80026d6:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80026d8:	429a      	cmp	r2, r3
 80026da:	d06b      	beq.n	80027b4 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80026dc:	69bb      	ldr	r3, [r7, #24]
 80026de:	2b0c      	cmp	r3, #12
 80026e0:	d062      	beq.n	80027a8 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80026e2:	4b32      	ldr	r3, [pc, #200]	; (80027ac <HAL_RCC_OscConfig+0x778>)
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d001      	beq.n	80026f2 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 80026ee:	2301      	movs	r3, #1
 80026f0:	e0ac      	b.n	800284c <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80026f2:	4b2e      	ldr	r3, [pc, #184]	; (80027ac <HAL_RCC_OscConfig+0x778>)
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	4a2d      	ldr	r2, [pc, #180]	; (80027ac <HAL_RCC_OscConfig+0x778>)
 80026f8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80026fc:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80026fe:	f7ff f91f 	bl	8001940 <HAL_GetTick>
 8002702:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002704:	e008      	b.n	8002718 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002706:	f7ff f91b 	bl	8001940 <HAL_GetTick>
 800270a:	4602      	mov	r2, r0
 800270c:	693b      	ldr	r3, [r7, #16]
 800270e:	1ad3      	subs	r3, r2, r3
 8002710:	2b02      	cmp	r3, #2
 8002712:	d901      	bls.n	8002718 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8002714:	2303      	movs	r3, #3
 8002716:	e099      	b.n	800284c <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002718:	4b24      	ldr	r3, [pc, #144]	; (80027ac <HAL_RCC_OscConfig+0x778>)
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002720:	2b00      	cmp	r3, #0
 8002722:	d1f0      	bne.n	8002706 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002724:	4b21      	ldr	r3, [pc, #132]	; (80027ac <HAL_RCC_OscConfig+0x778>)
 8002726:	68da      	ldr	r2, [r3, #12]
 8002728:	4b21      	ldr	r3, [pc, #132]	; (80027b0 <HAL_RCC_OscConfig+0x77c>)
 800272a:	4013      	ands	r3, r2
 800272c:	687a      	ldr	r2, [r7, #4]
 800272e:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002730:	687a      	ldr	r2, [r7, #4]
 8002732:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002734:	3a01      	subs	r2, #1
 8002736:	0112      	lsls	r2, r2, #4
 8002738:	4311      	orrs	r1, r2
 800273a:	687a      	ldr	r2, [r7, #4]
 800273c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800273e:	0212      	lsls	r2, r2, #8
 8002740:	4311      	orrs	r1, r2
 8002742:	687a      	ldr	r2, [r7, #4]
 8002744:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002746:	0852      	lsrs	r2, r2, #1
 8002748:	3a01      	subs	r2, #1
 800274a:	0552      	lsls	r2, r2, #21
 800274c:	4311      	orrs	r1, r2
 800274e:	687a      	ldr	r2, [r7, #4]
 8002750:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002752:	0852      	lsrs	r2, r2, #1
 8002754:	3a01      	subs	r2, #1
 8002756:	0652      	lsls	r2, r2, #25
 8002758:	4311      	orrs	r1, r2
 800275a:	687a      	ldr	r2, [r7, #4]
 800275c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800275e:	06d2      	lsls	r2, r2, #27
 8002760:	430a      	orrs	r2, r1
 8002762:	4912      	ldr	r1, [pc, #72]	; (80027ac <HAL_RCC_OscConfig+0x778>)
 8002764:	4313      	orrs	r3, r2
 8002766:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002768:	4b10      	ldr	r3, [pc, #64]	; (80027ac <HAL_RCC_OscConfig+0x778>)
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	4a0f      	ldr	r2, [pc, #60]	; (80027ac <HAL_RCC_OscConfig+0x778>)
 800276e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002772:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002774:	4b0d      	ldr	r3, [pc, #52]	; (80027ac <HAL_RCC_OscConfig+0x778>)
 8002776:	68db      	ldr	r3, [r3, #12]
 8002778:	4a0c      	ldr	r2, [pc, #48]	; (80027ac <HAL_RCC_OscConfig+0x778>)
 800277a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800277e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002780:	f7ff f8de 	bl	8001940 <HAL_GetTick>
 8002784:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002786:	e008      	b.n	800279a <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002788:	f7ff f8da 	bl	8001940 <HAL_GetTick>
 800278c:	4602      	mov	r2, r0
 800278e:	693b      	ldr	r3, [r7, #16]
 8002790:	1ad3      	subs	r3, r2, r3
 8002792:	2b02      	cmp	r3, #2
 8002794:	d901      	bls.n	800279a <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8002796:	2303      	movs	r3, #3
 8002798:	e058      	b.n	800284c <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800279a:	4b04      	ldr	r3, [pc, #16]	; (80027ac <HAL_RCC_OscConfig+0x778>)
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d0f0      	beq.n	8002788 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80027a6:	e050      	b.n	800284a <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80027a8:	2301      	movs	r3, #1
 80027aa:	e04f      	b.n	800284c <HAL_RCC_OscConfig+0x818>
 80027ac:	40021000 	.word	0x40021000
 80027b0:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80027b4:	4b27      	ldr	r3, [pc, #156]	; (8002854 <HAL_RCC_OscConfig+0x820>)
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d144      	bne.n	800284a <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80027c0:	4b24      	ldr	r3, [pc, #144]	; (8002854 <HAL_RCC_OscConfig+0x820>)
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	4a23      	ldr	r2, [pc, #140]	; (8002854 <HAL_RCC_OscConfig+0x820>)
 80027c6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80027ca:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80027cc:	4b21      	ldr	r3, [pc, #132]	; (8002854 <HAL_RCC_OscConfig+0x820>)
 80027ce:	68db      	ldr	r3, [r3, #12]
 80027d0:	4a20      	ldr	r2, [pc, #128]	; (8002854 <HAL_RCC_OscConfig+0x820>)
 80027d2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80027d6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80027d8:	f7ff f8b2 	bl	8001940 <HAL_GetTick>
 80027dc:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80027de:	e008      	b.n	80027f2 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027e0:	f7ff f8ae 	bl	8001940 <HAL_GetTick>
 80027e4:	4602      	mov	r2, r0
 80027e6:	693b      	ldr	r3, [r7, #16]
 80027e8:	1ad3      	subs	r3, r2, r3
 80027ea:	2b02      	cmp	r3, #2
 80027ec:	d901      	bls.n	80027f2 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 80027ee:	2303      	movs	r3, #3
 80027f0:	e02c      	b.n	800284c <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80027f2:	4b18      	ldr	r3, [pc, #96]	; (8002854 <HAL_RCC_OscConfig+0x820>)
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d0f0      	beq.n	80027e0 <HAL_RCC_OscConfig+0x7ac>
 80027fe:	e024      	b.n	800284a <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002800:	69bb      	ldr	r3, [r7, #24]
 8002802:	2b0c      	cmp	r3, #12
 8002804:	d01f      	beq.n	8002846 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002806:	4b13      	ldr	r3, [pc, #76]	; (8002854 <HAL_RCC_OscConfig+0x820>)
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	4a12      	ldr	r2, [pc, #72]	; (8002854 <HAL_RCC_OscConfig+0x820>)
 800280c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002810:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002812:	f7ff f895 	bl	8001940 <HAL_GetTick>
 8002816:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002818:	e008      	b.n	800282c <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800281a:	f7ff f891 	bl	8001940 <HAL_GetTick>
 800281e:	4602      	mov	r2, r0
 8002820:	693b      	ldr	r3, [r7, #16]
 8002822:	1ad3      	subs	r3, r2, r3
 8002824:	2b02      	cmp	r3, #2
 8002826:	d901      	bls.n	800282c <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8002828:	2303      	movs	r3, #3
 800282a:	e00f      	b.n	800284c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800282c:	4b09      	ldr	r3, [pc, #36]	; (8002854 <HAL_RCC_OscConfig+0x820>)
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002834:	2b00      	cmp	r3, #0
 8002836:	d1f0      	bne.n	800281a <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8002838:	4b06      	ldr	r3, [pc, #24]	; (8002854 <HAL_RCC_OscConfig+0x820>)
 800283a:	68da      	ldr	r2, [r3, #12]
 800283c:	4905      	ldr	r1, [pc, #20]	; (8002854 <HAL_RCC_OscConfig+0x820>)
 800283e:	4b06      	ldr	r3, [pc, #24]	; (8002858 <HAL_RCC_OscConfig+0x824>)
 8002840:	4013      	ands	r3, r2
 8002842:	60cb      	str	r3, [r1, #12]
 8002844:	e001      	b.n	800284a <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002846:	2301      	movs	r3, #1
 8002848:	e000      	b.n	800284c <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 800284a:	2300      	movs	r3, #0
}
 800284c:	4618      	mov	r0, r3
 800284e:	3720      	adds	r7, #32
 8002850:	46bd      	mov	sp, r7
 8002852:	bd80      	pop	{r7, pc}
 8002854:	40021000 	.word	0x40021000
 8002858:	feeefffc 	.word	0xfeeefffc

0800285c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800285c:	b580      	push	{r7, lr}
 800285e:	b084      	sub	sp, #16
 8002860:	af00      	add	r7, sp, #0
 8002862:	6078      	str	r0, [r7, #4]
 8002864:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	2b00      	cmp	r3, #0
 800286a:	d101      	bne.n	8002870 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800286c:	2301      	movs	r3, #1
 800286e:	e0e7      	b.n	8002a40 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002870:	4b75      	ldr	r3, [pc, #468]	; (8002a48 <HAL_RCC_ClockConfig+0x1ec>)
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f003 0307 	and.w	r3, r3, #7
 8002878:	683a      	ldr	r2, [r7, #0]
 800287a:	429a      	cmp	r2, r3
 800287c:	d910      	bls.n	80028a0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800287e:	4b72      	ldr	r3, [pc, #456]	; (8002a48 <HAL_RCC_ClockConfig+0x1ec>)
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f023 0207 	bic.w	r2, r3, #7
 8002886:	4970      	ldr	r1, [pc, #448]	; (8002a48 <HAL_RCC_ClockConfig+0x1ec>)
 8002888:	683b      	ldr	r3, [r7, #0]
 800288a:	4313      	orrs	r3, r2
 800288c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800288e:	4b6e      	ldr	r3, [pc, #440]	; (8002a48 <HAL_RCC_ClockConfig+0x1ec>)
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f003 0307 	and.w	r3, r3, #7
 8002896:	683a      	ldr	r2, [r7, #0]
 8002898:	429a      	cmp	r2, r3
 800289a:	d001      	beq.n	80028a0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800289c:	2301      	movs	r3, #1
 800289e:	e0cf      	b.n	8002a40 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	f003 0302 	and.w	r3, r3, #2
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d010      	beq.n	80028ce <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	689a      	ldr	r2, [r3, #8]
 80028b0:	4b66      	ldr	r3, [pc, #408]	; (8002a4c <HAL_RCC_ClockConfig+0x1f0>)
 80028b2:	689b      	ldr	r3, [r3, #8]
 80028b4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80028b8:	429a      	cmp	r2, r3
 80028ba:	d908      	bls.n	80028ce <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80028bc:	4b63      	ldr	r3, [pc, #396]	; (8002a4c <HAL_RCC_ClockConfig+0x1f0>)
 80028be:	689b      	ldr	r3, [r3, #8]
 80028c0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	689b      	ldr	r3, [r3, #8]
 80028c8:	4960      	ldr	r1, [pc, #384]	; (8002a4c <HAL_RCC_ClockConfig+0x1f0>)
 80028ca:	4313      	orrs	r3, r2
 80028cc:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f003 0301 	and.w	r3, r3, #1
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d04c      	beq.n	8002974 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	685b      	ldr	r3, [r3, #4]
 80028de:	2b03      	cmp	r3, #3
 80028e0:	d107      	bne.n	80028f2 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80028e2:	4b5a      	ldr	r3, [pc, #360]	; (8002a4c <HAL_RCC_ClockConfig+0x1f0>)
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d121      	bne.n	8002932 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80028ee:	2301      	movs	r3, #1
 80028f0:	e0a6      	b.n	8002a40 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	685b      	ldr	r3, [r3, #4]
 80028f6:	2b02      	cmp	r3, #2
 80028f8:	d107      	bne.n	800290a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80028fa:	4b54      	ldr	r3, [pc, #336]	; (8002a4c <HAL_RCC_ClockConfig+0x1f0>)
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002902:	2b00      	cmp	r3, #0
 8002904:	d115      	bne.n	8002932 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002906:	2301      	movs	r3, #1
 8002908:	e09a      	b.n	8002a40 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	685b      	ldr	r3, [r3, #4]
 800290e:	2b00      	cmp	r3, #0
 8002910:	d107      	bne.n	8002922 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002912:	4b4e      	ldr	r3, [pc, #312]	; (8002a4c <HAL_RCC_ClockConfig+0x1f0>)
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f003 0302 	and.w	r3, r3, #2
 800291a:	2b00      	cmp	r3, #0
 800291c:	d109      	bne.n	8002932 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800291e:	2301      	movs	r3, #1
 8002920:	e08e      	b.n	8002a40 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002922:	4b4a      	ldr	r3, [pc, #296]	; (8002a4c <HAL_RCC_ClockConfig+0x1f0>)
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800292a:	2b00      	cmp	r3, #0
 800292c:	d101      	bne.n	8002932 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800292e:	2301      	movs	r3, #1
 8002930:	e086      	b.n	8002a40 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002932:	4b46      	ldr	r3, [pc, #280]	; (8002a4c <HAL_RCC_ClockConfig+0x1f0>)
 8002934:	689b      	ldr	r3, [r3, #8]
 8002936:	f023 0203 	bic.w	r2, r3, #3
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	685b      	ldr	r3, [r3, #4]
 800293e:	4943      	ldr	r1, [pc, #268]	; (8002a4c <HAL_RCC_ClockConfig+0x1f0>)
 8002940:	4313      	orrs	r3, r2
 8002942:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002944:	f7fe fffc 	bl	8001940 <HAL_GetTick>
 8002948:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800294a:	e00a      	b.n	8002962 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800294c:	f7fe fff8 	bl	8001940 <HAL_GetTick>
 8002950:	4602      	mov	r2, r0
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	1ad3      	subs	r3, r2, r3
 8002956:	f241 3288 	movw	r2, #5000	; 0x1388
 800295a:	4293      	cmp	r3, r2
 800295c:	d901      	bls.n	8002962 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800295e:	2303      	movs	r3, #3
 8002960:	e06e      	b.n	8002a40 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002962:	4b3a      	ldr	r3, [pc, #232]	; (8002a4c <HAL_RCC_ClockConfig+0x1f0>)
 8002964:	689b      	ldr	r3, [r3, #8]
 8002966:	f003 020c 	and.w	r2, r3, #12
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	685b      	ldr	r3, [r3, #4]
 800296e:	009b      	lsls	r3, r3, #2
 8002970:	429a      	cmp	r2, r3
 8002972:	d1eb      	bne.n	800294c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f003 0302 	and.w	r3, r3, #2
 800297c:	2b00      	cmp	r3, #0
 800297e:	d010      	beq.n	80029a2 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	689a      	ldr	r2, [r3, #8]
 8002984:	4b31      	ldr	r3, [pc, #196]	; (8002a4c <HAL_RCC_ClockConfig+0x1f0>)
 8002986:	689b      	ldr	r3, [r3, #8]
 8002988:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800298c:	429a      	cmp	r2, r3
 800298e:	d208      	bcs.n	80029a2 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002990:	4b2e      	ldr	r3, [pc, #184]	; (8002a4c <HAL_RCC_ClockConfig+0x1f0>)
 8002992:	689b      	ldr	r3, [r3, #8]
 8002994:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	689b      	ldr	r3, [r3, #8]
 800299c:	492b      	ldr	r1, [pc, #172]	; (8002a4c <HAL_RCC_ClockConfig+0x1f0>)
 800299e:	4313      	orrs	r3, r2
 80029a0:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80029a2:	4b29      	ldr	r3, [pc, #164]	; (8002a48 <HAL_RCC_ClockConfig+0x1ec>)
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f003 0307 	and.w	r3, r3, #7
 80029aa:	683a      	ldr	r2, [r7, #0]
 80029ac:	429a      	cmp	r2, r3
 80029ae:	d210      	bcs.n	80029d2 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029b0:	4b25      	ldr	r3, [pc, #148]	; (8002a48 <HAL_RCC_ClockConfig+0x1ec>)
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f023 0207 	bic.w	r2, r3, #7
 80029b8:	4923      	ldr	r1, [pc, #140]	; (8002a48 <HAL_RCC_ClockConfig+0x1ec>)
 80029ba:	683b      	ldr	r3, [r7, #0]
 80029bc:	4313      	orrs	r3, r2
 80029be:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80029c0:	4b21      	ldr	r3, [pc, #132]	; (8002a48 <HAL_RCC_ClockConfig+0x1ec>)
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f003 0307 	and.w	r3, r3, #7
 80029c8:	683a      	ldr	r2, [r7, #0]
 80029ca:	429a      	cmp	r2, r3
 80029cc:	d001      	beq.n	80029d2 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80029ce:	2301      	movs	r3, #1
 80029d0:	e036      	b.n	8002a40 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f003 0304 	and.w	r3, r3, #4
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d008      	beq.n	80029f0 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80029de:	4b1b      	ldr	r3, [pc, #108]	; (8002a4c <HAL_RCC_ClockConfig+0x1f0>)
 80029e0:	689b      	ldr	r3, [r3, #8]
 80029e2:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	68db      	ldr	r3, [r3, #12]
 80029ea:	4918      	ldr	r1, [pc, #96]	; (8002a4c <HAL_RCC_ClockConfig+0x1f0>)
 80029ec:	4313      	orrs	r3, r2
 80029ee:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f003 0308 	and.w	r3, r3, #8
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d009      	beq.n	8002a10 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80029fc:	4b13      	ldr	r3, [pc, #76]	; (8002a4c <HAL_RCC_ClockConfig+0x1f0>)
 80029fe:	689b      	ldr	r3, [r3, #8]
 8002a00:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	691b      	ldr	r3, [r3, #16]
 8002a08:	00db      	lsls	r3, r3, #3
 8002a0a:	4910      	ldr	r1, [pc, #64]	; (8002a4c <HAL_RCC_ClockConfig+0x1f0>)
 8002a0c:	4313      	orrs	r3, r2
 8002a0e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002a10:	f000 f824 	bl	8002a5c <HAL_RCC_GetSysClockFreq>
 8002a14:	4602      	mov	r2, r0
 8002a16:	4b0d      	ldr	r3, [pc, #52]	; (8002a4c <HAL_RCC_ClockConfig+0x1f0>)
 8002a18:	689b      	ldr	r3, [r3, #8]
 8002a1a:	091b      	lsrs	r3, r3, #4
 8002a1c:	f003 030f 	and.w	r3, r3, #15
 8002a20:	490b      	ldr	r1, [pc, #44]	; (8002a50 <HAL_RCC_ClockConfig+0x1f4>)
 8002a22:	5ccb      	ldrb	r3, [r1, r3]
 8002a24:	f003 031f 	and.w	r3, r3, #31
 8002a28:	fa22 f303 	lsr.w	r3, r2, r3
 8002a2c:	4a09      	ldr	r2, [pc, #36]	; (8002a54 <HAL_RCC_ClockConfig+0x1f8>)
 8002a2e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002a30:	4b09      	ldr	r3, [pc, #36]	; (8002a58 <HAL_RCC_ClockConfig+0x1fc>)
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	4618      	mov	r0, r3
 8002a36:	f7fe ff33 	bl	80018a0 <HAL_InitTick>
 8002a3a:	4603      	mov	r3, r0
 8002a3c:	72fb      	strb	r3, [r7, #11]

  return status;
 8002a3e:	7afb      	ldrb	r3, [r7, #11]
}
 8002a40:	4618      	mov	r0, r3
 8002a42:	3710      	adds	r7, #16
 8002a44:	46bd      	mov	sp, r7
 8002a46:	bd80      	pop	{r7, pc}
 8002a48:	40022000 	.word	0x40022000
 8002a4c:	40021000 	.word	0x40021000
 8002a50:	08006c38 	.word	0x08006c38
 8002a54:	20000000 	.word	0x20000000
 8002a58:	20000004 	.word	0x20000004

08002a5c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002a5c:	b480      	push	{r7}
 8002a5e:	b089      	sub	sp, #36	; 0x24
 8002a60:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002a62:	2300      	movs	r3, #0
 8002a64:	61fb      	str	r3, [r7, #28]
 8002a66:	2300      	movs	r3, #0
 8002a68:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002a6a:	4b3e      	ldr	r3, [pc, #248]	; (8002b64 <HAL_RCC_GetSysClockFreq+0x108>)
 8002a6c:	689b      	ldr	r3, [r3, #8]
 8002a6e:	f003 030c 	and.w	r3, r3, #12
 8002a72:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002a74:	4b3b      	ldr	r3, [pc, #236]	; (8002b64 <HAL_RCC_GetSysClockFreq+0x108>)
 8002a76:	68db      	ldr	r3, [r3, #12]
 8002a78:	f003 0303 	and.w	r3, r3, #3
 8002a7c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002a7e:	693b      	ldr	r3, [r7, #16]
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d005      	beq.n	8002a90 <HAL_RCC_GetSysClockFreq+0x34>
 8002a84:	693b      	ldr	r3, [r7, #16]
 8002a86:	2b0c      	cmp	r3, #12
 8002a88:	d121      	bne.n	8002ace <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	2b01      	cmp	r3, #1
 8002a8e:	d11e      	bne.n	8002ace <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002a90:	4b34      	ldr	r3, [pc, #208]	; (8002b64 <HAL_RCC_GetSysClockFreq+0x108>)
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f003 0308 	and.w	r3, r3, #8
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d107      	bne.n	8002aac <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002a9c:	4b31      	ldr	r3, [pc, #196]	; (8002b64 <HAL_RCC_GetSysClockFreq+0x108>)
 8002a9e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002aa2:	0a1b      	lsrs	r3, r3, #8
 8002aa4:	f003 030f 	and.w	r3, r3, #15
 8002aa8:	61fb      	str	r3, [r7, #28]
 8002aaa:	e005      	b.n	8002ab8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002aac:	4b2d      	ldr	r3, [pc, #180]	; (8002b64 <HAL_RCC_GetSysClockFreq+0x108>)
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	091b      	lsrs	r3, r3, #4
 8002ab2:	f003 030f 	and.w	r3, r3, #15
 8002ab6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002ab8:	4a2b      	ldr	r2, [pc, #172]	; (8002b68 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002aba:	69fb      	ldr	r3, [r7, #28]
 8002abc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ac0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002ac2:	693b      	ldr	r3, [r7, #16]
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d10d      	bne.n	8002ae4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002ac8:	69fb      	ldr	r3, [r7, #28]
 8002aca:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002acc:	e00a      	b.n	8002ae4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002ace:	693b      	ldr	r3, [r7, #16]
 8002ad0:	2b04      	cmp	r3, #4
 8002ad2:	d102      	bne.n	8002ada <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002ad4:	4b25      	ldr	r3, [pc, #148]	; (8002b6c <HAL_RCC_GetSysClockFreq+0x110>)
 8002ad6:	61bb      	str	r3, [r7, #24]
 8002ad8:	e004      	b.n	8002ae4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002ada:	693b      	ldr	r3, [r7, #16]
 8002adc:	2b08      	cmp	r3, #8
 8002ade:	d101      	bne.n	8002ae4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002ae0:	4b23      	ldr	r3, [pc, #140]	; (8002b70 <HAL_RCC_GetSysClockFreq+0x114>)
 8002ae2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002ae4:	693b      	ldr	r3, [r7, #16]
 8002ae6:	2b0c      	cmp	r3, #12
 8002ae8:	d134      	bne.n	8002b54 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002aea:	4b1e      	ldr	r3, [pc, #120]	; (8002b64 <HAL_RCC_GetSysClockFreq+0x108>)
 8002aec:	68db      	ldr	r3, [r3, #12]
 8002aee:	f003 0303 	and.w	r3, r3, #3
 8002af2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002af4:	68bb      	ldr	r3, [r7, #8]
 8002af6:	2b02      	cmp	r3, #2
 8002af8:	d003      	beq.n	8002b02 <HAL_RCC_GetSysClockFreq+0xa6>
 8002afa:	68bb      	ldr	r3, [r7, #8]
 8002afc:	2b03      	cmp	r3, #3
 8002afe:	d003      	beq.n	8002b08 <HAL_RCC_GetSysClockFreq+0xac>
 8002b00:	e005      	b.n	8002b0e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002b02:	4b1a      	ldr	r3, [pc, #104]	; (8002b6c <HAL_RCC_GetSysClockFreq+0x110>)
 8002b04:	617b      	str	r3, [r7, #20]
      break;
 8002b06:	e005      	b.n	8002b14 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002b08:	4b19      	ldr	r3, [pc, #100]	; (8002b70 <HAL_RCC_GetSysClockFreq+0x114>)
 8002b0a:	617b      	str	r3, [r7, #20]
      break;
 8002b0c:	e002      	b.n	8002b14 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002b0e:	69fb      	ldr	r3, [r7, #28]
 8002b10:	617b      	str	r3, [r7, #20]
      break;
 8002b12:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002b14:	4b13      	ldr	r3, [pc, #76]	; (8002b64 <HAL_RCC_GetSysClockFreq+0x108>)
 8002b16:	68db      	ldr	r3, [r3, #12]
 8002b18:	091b      	lsrs	r3, r3, #4
 8002b1a:	f003 0307 	and.w	r3, r3, #7
 8002b1e:	3301      	adds	r3, #1
 8002b20:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002b22:	4b10      	ldr	r3, [pc, #64]	; (8002b64 <HAL_RCC_GetSysClockFreq+0x108>)
 8002b24:	68db      	ldr	r3, [r3, #12]
 8002b26:	0a1b      	lsrs	r3, r3, #8
 8002b28:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002b2c:	697a      	ldr	r2, [r7, #20]
 8002b2e:	fb03 f202 	mul.w	r2, r3, r2
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b38:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002b3a:	4b0a      	ldr	r3, [pc, #40]	; (8002b64 <HAL_RCC_GetSysClockFreq+0x108>)
 8002b3c:	68db      	ldr	r3, [r3, #12]
 8002b3e:	0e5b      	lsrs	r3, r3, #25
 8002b40:	f003 0303 	and.w	r3, r3, #3
 8002b44:	3301      	adds	r3, #1
 8002b46:	005b      	lsls	r3, r3, #1
 8002b48:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002b4a:	697a      	ldr	r2, [r7, #20]
 8002b4c:	683b      	ldr	r3, [r7, #0]
 8002b4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b52:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002b54:	69bb      	ldr	r3, [r7, #24]
}
 8002b56:	4618      	mov	r0, r3
 8002b58:	3724      	adds	r7, #36	; 0x24
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b60:	4770      	bx	lr
 8002b62:	bf00      	nop
 8002b64:	40021000 	.word	0x40021000
 8002b68:	08006c50 	.word	0x08006c50
 8002b6c:	00f42400 	.word	0x00f42400
 8002b70:	007a1200 	.word	0x007a1200

08002b74 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002b74:	b480      	push	{r7}
 8002b76:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002b78:	4b03      	ldr	r3, [pc, #12]	; (8002b88 <HAL_RCC_GetHCLKFreq+0x14>)
 8002b7a:	681b      	ldr	r3, [r3, #0]
}
 8002b7c:	4618      	mov	r0, r3
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b84:	4770      	bx	lr
 8002b86:	bf00      	nop
 8002b88:	20000000 	.word	0x20000000

08002b8c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002b8c:	b580      	push	{r7, lr}
 8002b8e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002b90:	f7ff fff0 	bl	8002b74 <HAL_RCC_GetHCLKFreq>
 8002b94:	4602      	mov	r2, r0
 8002b96:	4b06      	ldr	r3, [pc, #24]	; (8002bb0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002b98:	689b      	ldr	r3, [r3, #8]
 8002b9a:	0a1b      	lsrs	r3, r3, #8
 8002b9c:	f003 0307 	and.w	r3, r3, #7
 8002ba0:	4904      	ldr	r1, [pc, #16]	; (8002bb4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002ba2:	5ccb      	ldrb	r3, [r1, r3]
 8002ba4:	f003 031f 	and.w	r3, r3, #31
 8002ba8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002bac:	4618      	mov	r0, r3
 8002bae:	bd80      	pop	{r7, pc}
 8002bb0:	40021000 	.word	0x40021000
 8002bb4:	08006c48 	.word	0x08006c48

08002bb8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002bbc:	f7ff ffda 	bl	8002b74 <HAL_RCC_GetHCLKFreq>
 8002bc0:	4602      	mov	r2, r0
 8002bc2:	4b06      	ldr	r3, [pc, #24]	; (8002bdc <HAL_RCC_GetPCLK2Freq+0x24>)
 8002bc4:	689b      	ldr	r3, [r3, #8]
 8002bc6:	0adb      	lsrs	r3, r3, #11
 8002bc8:	f003 0307 	and.w	r3, r3, #7
 8002bcc:	4904      	ldr	r1, [pc, #16]	; (8002be0 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002bce:	5ccb      	ldrb	r3, [r1, r3]
 8002bd0:	f003 031f 	and.w	r3, r3, #31
 8002bd4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002bd8:	4618      	mov	r0, r3
 8002bda:	bd80      	pop	{r7, pc}
 8002bdc:	40021000 	.word	0x40021000
 8002be0:	08006c48 	.word	0x08006c48

08002be4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002be4:	b580      	push	{r7, lr}
 8002be6:	b086      	sub	sp, #24
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002bec:	2300      	movs	r3, #0
 8002bee:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002bf0:	4b2a      	ldr	r3, [pc, #168]	; (8002c9c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002bf2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bf4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d003      	beq.n	8002c04 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002bfc:	f7ff f9b6 	bl	8001f6c <HAL_PWREx_GetVoltageRange>
 8002c00:	6178      	str	r0, [r7, #20]
 8002c02:	e014      	b.n	8002c2e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002c04:	4b25      	ldr	r3, [pc, #148]	; (8002c9c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002c06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c08:	4a24      	ldr	r2, [pc, #144]	; (8002c9c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002c0a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c0e:	6593      	str	r3, [r2, #88]	; 0x58
 8002c10:	4b22      	ldr	r3, [pc, #136]	; (8002c9c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002c12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c14:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c18:	60fb      	str	r3, [r7, #12]
 8002c1a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002c1c:	f7ff f9a6 	bl	8001f6c <HAL_PWREx_GetVoltageRange>
 8002c20:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002c22:	4b1e      	ldr	r3, [pc, #120]	; (8002c9c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002c24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c26:	4a1d      	ldr	r2, [pc, #116]	; (8002c9c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002c28:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c2c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002c2e:	697b      	ldr	r3, [r7, #20]
 8002c30:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002c34:	d10b      	bne.n	8002c4e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	2b80      	cmp	r3, #128	; 0x80
 8002c3a:	d919      	bls.n	8002c70 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	2ba0      	cmp	r3, #160	; 0xa0
 8002c40:	d902      	bls.n	8002c48 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002c42:	2302      	movs	r3, #2
 8002c44:	613b      	str	r3, [r7, #16]
 8002c46:	e013      	b.n	8002c70 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002c48:	2301      	movs	r3, #1
 8002c4a:	613b      	str	r3, [r7, #16]
 8002c4c:	e010      	b.n	8002c70 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	2b80      	cmp	r3, #128	; 0x80
 8002c52:	d902      	bls.n	8002c5a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002c54:	2303      	movs	r3, #3
 8002c56:	613b      	str	r3, [r7, #16]
 8002c58:	e00a      	b.n	8002c70 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	2b80      	cmp	r3, #128	; 0x80
 8002c5e:	d102      	bne.n	8002c66 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002c60:	2302      	movs	r3, #2
 8002c62:	613b      	str	r3, [r7, #16]
 8002c64:	e004      	b.n	8002c70 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	2b70      	cmp	r3, #112	; 0x70
 8002c6a:	d101      	bne.n	8002c70 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002c6c:	2301      	movs	r3, #1
 8002c6e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002c70:	4b0b      	ldr	r3, [pc, #44]	; (8002ca0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	f023 0207 	bic.w	r2, r3, #7
 8002c78:	4909      	ldr	r1, [pc, #36]	; (8002ca0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002c7a:	693b      	ldr	r3, [r7, #16]
 8002c7c:	4313      	orrs	r3, r2
 8002c7e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002c80:	4b07      	ldr	r3, [pc, #28]	; (8002ca0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f003 0307 	and.w	r3, r3, #7
 8002c88:	693a      	ldr	r2, [r7, #16]
 8002c8a:	429a      	cmp	r2, r3
 8002c8c:	d001      	beq.n	8002c92 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002c8e:	2301      	movs	r3, #1
 8002c90:	e000      	b.n	8002c94 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002c92:	2300      	movs	r3, #0
}
 8002c94:	4618      	mov	r0, r3
 8002c96:	3718      	adds	r7, #24
 8002c98:	46bd      	mov	sp, r7
 8002c9a:	bd80      	pop	{r7, pc}
 8002c9c:	40021000 	.word	0x40021000
 8002ca0:	40022000 	.word	0x40022000

08002ca4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	b086      	sub	sp, #24
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002cac:	2300      	movs	r3, #0
 8002cae:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002cb0:	2300      	movs	r3, #0
 8002cb2:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d031      	beq.n	8002d24 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cc4:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002cc8:	d01a      	beq.n	8002d00 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8002cca:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002cce:	d814      	bhi.n	8002cfa <HAL_RCCEx_PeriphCLKConfig+0x56>
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d009      	beq.n	8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002cd4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002cd8:	d10f      	bne.n	8002cfa <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8002cda:	4b5d      	ldr	r3, [pc, #372]	; (8002e50 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002cdc:	68db      	ldr	r3, [r3, #12]
 8002cde:	4a5c      	ldr	r2, [pc, #368]	; (8002e50 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002ce0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ce4:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002ce6:	e00c      	b.n	8002d02 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	3304      	adds	r3, #4
 8002cec:	2100      	movs	r1, #0
 8002cee:	4618      	mov	r0, r3
 8002cf0:	f000 f9ce 	bl	8003090 <RCCEx_PLLSAI1_Config>
 8002cf4:	4603      	mov	r3, r0
 8002cf6:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002cf8:	e003      	b.n	8002d02 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002cfa:	2301      	movs	r3, #1
 8002cfc:	74fb      	strb	r3, [r7, #19]
      break;
 8002cfe:	e000      	b.n	8002d02 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8002d00:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002d02:	7cfb      	ldrb	r3, [r7, #19]
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d10b      	bne.n	8002d20 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002d08:	4b51      	ldr	r3, [pc, #324]	; (8002e50 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002d0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d0e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d16:	494e      	ldr	r1, [pc, #312]	; (8002e50 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002d18:	4313      	orrs	r3, r2
 8002d1a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002d1e:	e001      	b.n	8002d24 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d20:	7cfb      	ldrb	r3, [r7, #19]
 8002d22:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	f000 809e 	beq.w	8002e6e <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002d32:	2300      	movs	r3, #0
 8002d34:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002d36:	4b46      	ldr	r3, [pc, #280]	; (8002e50 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002d38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d101      	bne.n	8002d46 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8002d42:	2301      	movs	r3, #1
 8002d44:	e000      	b.n	8002d48 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8002d46:	2300      	movs	r3, #0
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d00d      	beq.n	8002d68 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d4c:	4b40      	ldr	r3, [pc, #256]	; (8002e50 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002d4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d50:	4a3f      	ldr	r2, [pc, #252]	; (8002e50 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002d52:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d56:	6593      	str	r3, [r2, #88]	; 0x58
 8002d58:	4b3d      	ldr	r3, [pc, #244]	; (8002e50 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002d5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d5c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d60:	60bb      	str	r3, [r7, #8]
 8002d62:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002d64:	2301      	movs	r3, #1
 8002d66:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002d68:	4b3a      	ldr	r3, [pc, #232]	; (8002e54 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	4a39      	ldr	r2, [pc, #228]	; (8002e54 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002d6e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d72:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002d74:	f7fe fde4 	bl	8001940 <HAL_GetTick>
 8002d78:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002d7a:	e009      	b.n	8002d90 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d7c:	f7fe fde0 	bl	8001940 <HAL_GetTick>
 8002d80:	4602      	mov	r2, r0
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	1ad3      	subs	r3, r2, r3
 8002d86:	2b02      	cmp	r3, #2
 8002d88:	d902      	bls.n	8002d90 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8002d8a:	2303      	movs	r3, #3
 8002d8c:	74fb      	strb	r3, [r7, #19]
        break;
 8002d8e:	e005      	b.n	8002d9c <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002d90:	4b30      	ldr	r3, [pc, #192]	; (8002e54 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d0ef      	beq.n	8002d7c <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8002d9c:	7cfb      	ldrb	r3, [r7, #19]
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d15a      	bne.n	8002e58 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002da2:	4b2b      	ldr	r3, [pc, #172]	; (8002e50 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002da4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002da8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002dac:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002dae:	697b      	ldr	r3, [r7, #20]
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d01e      	beq.n	8002df2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002db8:	697a      	ldr	r2, [r7, #20]
 8002dba:	429a      	cmp	r2, r3
 8002dbc:	d019      	beq.n	8002df2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002dbe:	4b24      	ldr	r3, [pc, #144]	; (8002e50 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002dc0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002dc4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002dc8:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002dca:	4b21      	ldr	r3, [pc, #132]	; (8002e50 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002dcc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002dd0:	4a1f      	ldr	r2, [pc, #124]	; (8002e50 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002dd2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002dd6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002dda:	4b1d      	ldr	r3, [pc, #116]	; (8002e50 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002ddc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002de0:	4a1b      	ldr	r2, [pc, #108]	; (8002e50 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002de2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002de6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002dea:	4a19      	ldr	r2, [pc, #100]	; (8002e50 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002dec:	697b      	ldr	r3, [r7, #20]
 8002dee:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002df2:	697b      	ldr	r3, [r7, #20]
 8002df4:	f003 0301 	and.w	r3, r3, #1
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d016      	beq.n	8002e2a <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dfc:	f7fe fda0 	bl	8001940 <HAL_GetTick>
 8002e00:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002e02:	e00b      	b.n	8002e1c <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e04:	f7fe fd9c 	bl	8001940 <HAL_GetTick>
 8002e08:	4602      	mov	r2, r0
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	1ad3      	subs	r3, r2, r3
 8002e0e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e12:	4293      	cmp	r3, r2
 8002e14:	d902      	bls.n	8002e1c <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8002e16:	2303      	movs	r3, #3
 8002e18:	74fb      	strb	r3, [r7, #19]
            break;
 8002e1a:	e006      	b.n	8002e2a <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002e1c:	4b0c      	ldr	r3, [pc, #48]	; (8002e50 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002e1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e22:	f003 0302 	and.w	r3, r3, #2
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d0ec      	beq.n	8002e04 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8002e2a:	7cfb      	ldrb	r3, [r7, #19]
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d10b      	bne.n	8002e48 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002e30:	4b07      	ldr	r3, [pc, #28]	; (8002e50 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002e32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e36:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e3e:	4904      	ldr	r1, [pc, #16]	; (8002e50 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002e40:	4313      	orrs	r3, r2
 8002e42:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002e46:	e009      	b.n	8002e5c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002e48:	7cfb      	ldrb	r3, [r7, #19]
 8002e4a:	74bb      	strb	r3, [r7, #18]
 8002e4c:	e006      	b.n	8002e5c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8002e4e:	bf00      	nop
 8002e50:	40021000 	.word	0x40021000
 8002e54:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e58:	7cfb      	ldrb	r3, [r7, #19]
 8002e5a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002e5c:	7c7b      	ldrb	r3, [r7, #17]
 8002e5e:	2b01      	cmp	r3, #1
 8002e60:	d105      	bne.n	8002e6e <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e62:	4b8a      	ldr	r3, [pc, #552]	; (800308c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002e64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e66:	4a89      	ldr	r2, [pc, #548]	; (800308c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002e68:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002e6c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f003 0301 	and.w	r3, r3, #1
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d00a      	beq.n	8002e90 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002e7a:	4b84      	ldr	r3, [pc, #528]	; (800308c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002e7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e80:	f023 0203 	bic.w	r2, r3, #3
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	6a1b      	ldr	r3, [r3, #32]
 8002e88:	4980      	ldr	r1, [pc, #512]	; (800308c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002e8a:	4313      	orrs	r3, r2
 8002e8c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f003 0302 	and.w	r3, r3, #2
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d00a      	beq.n	8002eb2 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002e9c:	4b7b      	ldr	r3, [pc, #492]	; (800308c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002e9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ea2:	f023 020c 	bic.w	r2, r3, #12
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eaa:	4978      	ldr	r1, [pc, #480]	; (800308c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002eac:	4313      	orrs	r3, r2
 8002eae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f003 0320 	and.w	r3, r3, #32
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d00a      	beq.n	8002ed4 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002ebe:	4b73      	ldr	r3, [pc, #460]	; (800308c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002ec0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ec4:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ecc:	496f      	ldr	r1, [pc, #444]	; (800308c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002ece:	4313      	orrs	r3, r2
 8002ed0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d00a      	beq.n	8002ef6 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002ee0:	4b6a      	ldr	r3, [pc, #424]	; (800308c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002ee2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ee6:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002eee:	4967      	ldr	r1, [pc, #412]	; (800308c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002ef0:	4313      	orrs	r3, r2
 8002ef2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d00a      	beq.n	8002f18 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002f02:	4b62      	ldr	r3, [pc, #392]	; (800308c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002f04:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f08:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f10:	495e      	ldr	r1, [pc, #376]	; (800308c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002f12:	4313      	orrs	r3, r2
 8002f14:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d00a      	beq.n	8002f3a <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002f24:	4b59      	ldr	r3, [pc, #356]	; (800308c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002f26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f2a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f32:	4956      	ldr	r1, [pc, #344]	; (800308c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002f34:	4313      	orrs	r3, r2
 8002f36:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d00a      	beq.n	8002f5c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002f46:	4b51      	ldr	r3, [pc, #324]	; (800308c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002f48:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f4c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f54:	494d      	ldr	r1, [pc, #308]	; (800308c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002f56:	4313      	orrs	r3, r2
 8002f58:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d028      	beq.n	8002fba <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002f68:	4b48      	ldr	r3, [pc, #288]	; (800308c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002f6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f6e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f76:	4945      	ldr	r1, [pc, #276]	; (800308c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002f78:	4313      	orrs	r3, r2
 8002f7a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f82:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002f86:	d106      	bne.n	8002f96 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002f88:	4b40      	ldr	r3, [pc, #256]	; (800308c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002f8a:	68db      	ldr	r3, [r3, #12]
 8002f8c:	4a3f      	ldr	r2, [pc, #252]	; (800308c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002f8e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002f92:	60d3      	str	r3, [r2, #12]
 8002f94:	e011      	b.n	8002fba <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f9a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002f9e:	d10c      	bne.n	8002fba <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	3304      	adds	r3, #4
 8002fa4:	2101      	movs	r1, #1
 8002fa6:	4618      	mov	r0, r3
 8002fa8:	f000 f872 	bl	8003090 <RCCEx_PLLSAI1_Config>
 8002fac:	4603      	mov	r3, r0
 8002fae:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002fb0:	7cfb      	ldrb	r3, [r7, #19]
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d001      	beq.n	8002fba <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 8002fb6:	7cfb      	ldrb	r3, [r7, #19]
 8002fb8:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d028      	beq.n	8003018 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002fc6:	4b31      	ldr	r3, [pc, #196]	; (800308c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002fc8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fcc:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fd4:	492d      	ldr	r1, [pc, #180]	; (800308c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002fd6:	4313      	orrs	r3, r2
 8002fd8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fe0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002fe4:	d106      	bne.n	8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002fe6:	4b29      	ldr	r3, [pc, #164]	; (800308c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002fe8:	68db      	ldr	r3, [r3, #12]
 8002fea:	4a28      	ldr	r2, [pc, #160]	; (800308c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002fec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002ff0:	60d3      	str	r3, [r2, #12]
 8002ff2:	e011      	b.n	8003018 <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ff8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002ffc:	d10c      	bne.n	8003018 <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	3304      	adds	r3, #4
 8003002:	2101      	movs	r1, #1
 8003004:	4618      	mov	r0, r3
 8003006:	f000 f843 	bl	8003090 <RCCEx_PLLSAI1_Config>
 800300a:	4603      	mov	r3, r0
 800300c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800300e:	7cfb      	ldrb	r3, [r7, #19]
 8003010:	2b00      	cmp	r3, #0
 8003012:	d001      	beq.n	8003018 <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 8003014:	7cfb      	ldrb	r3, [r7, #19]
 8003016:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003020:	2b00      	cmp	r3, #0
 8003022:	d01c      	beq.n	800305e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003024:	4b19      	ldr	r3, [pc, #100]	; (800308c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003026:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800302a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003032:	4916      	ldr	r1, [pc, #88]	; (800308c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003034:	4313      	orrs	r3, r2
 8003036:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800303e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003042:	d10c      	bne.n	800305e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	3304      	adds	r3, #4
 8003048:	2102      	movs	r1, #2
 800304a:	4618      	mov	r0, r3
 800304c:	f000 f820 	bl	8003090 <RCCEx_PLLSAI1_Config>
 8003050:	4603      	mov	r3, r0
 8003052:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003054:	7cfb      	ldrb	r3, [r7, #19]
 8003056:	2b00      	cmp	r3, #0
 8003058:	d001      	beq.n	800305e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 800305a:	7cfb      	ldrb	r3, [r7, #19]
 800305c:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003066:	2b00      	cmp	r3, #0
 8003068:	d00a      	beq.n	8003080 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800306a:	4b08      	ldr	r3, [pc, #32]	; (800308c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800306c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003070:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003078:	4904      	ldr	r1, [pc, #16]	; (800308c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800307a:	4313      	orrs	r3, r2
 800307c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003080:	7cbb      	ldrb	r3, [r7, #18]
}
 8003082:	4618      	mov	r0, r3
 8003084:	3718      	adds	r7, #24
 8003086:	46bd      	mov	sp, r7
 8003088:	bd80      	pop	{r7, pc}
 800308a:	bf00      	nop
 800308c:	40021000 	.word	0x40021000

08003090 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003090:	b580      	push	{r7, lr}
 8003092:	b084      	sub	sp, #16
 8003094:	af00      	add	r7, sp, #0
 8003096:	6078      	str	r0, [r7, #4]
 8003098:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800309a:	2300      	movs	r3, #0
 800309c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800309e:	4b74      	ldr	r3, [pc, #464]	; (8003270 <RCCEx_PLLSAI1_Config+0x1e0>)
 80030a0:	68db      	ldr	r3, [r3, #12]
 80030a2:	f003 0303 	and.w	r3, r3, #3
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d018      	beq.n	80030dc <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80030aa:	4b71      	ldr	r3, [pc, #452]	; (8003270 <RCCEx_PLLSAI1_Config+0x1e0>)
 80030ac:	68db      	ldr	r3, [r3, #12]
 80030ae:	f003 0203 	and.w	r2, r3, #3
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	429a      	cmp	r2, r3
 80030b8:	d10d      	bne.n	80030d6 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
       ||
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d009      	beq.n	80030d6 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80030c2:	4b6b      	ldr	r3, [pc, #428]	; (8003270 <RCCEx_PLLSAI1_Config+0x1e0>)
 80030c4:	68db      	ldr	r3, [r3, #12]
 80030c6:	091b      	lsrs	r3, r3, #4
 80030c8:	f003 0307 	and.w	r3, r3, #7
 80030cc:	1c5a      	adds	r2, r3, #1
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	685b      	ldr	r3, [r3, #4]
       ||
 80030d2:	429a      	cmp	r2, r3
 80030d4:	d047      	beq.n	8003166 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80030d6:	2301      	movs	r3, #1
 80030d8:	73fb      	strb	r3, [r7, #15]
 80030da:	e044      	b.n	8003166 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	2b03      	cmp	r3, #3
 80030e2:	d018      	beq.n	8003116 <RCCEx_PLLSAI1_Config+0x86>
 80030e4:	2b03      	cmp	r3, #3
 80030e6:	d825      	bhi.n	8003134 <RCCEx_PLLSAI1_Config+0xa4>
 80030e8:	2b01      	cmp	r3, #1
 80030ea:	d002      	beq.n	80030f2 <RCCEx_PLLSAI1_Config+0x62>
 80030ec:	2b02      	cmp	r3, #2
 80030ee:	d009      	beq.n	8003104 <RCCEx_PLLSAI1_Config+0x74>
 80030f0:	e020      	b.n	8003134 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80030f2:	4b5f      	ldr	r3, [pc, #380]	; (8003270 <RCCEx_PLLSAI1_Config+0x1e0>)
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f003 0302 	and.w	r3, r3, #2
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d11d      	bne.n	800313a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80030fe:	2301      	movs	r3, #1
 8003100:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003102:	e01a      	b.n	800313a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003104:	4b5a      	ldr	r3, [pc, #360]	; (8003270 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800310c:	2b00      	cmp	r3, #0
 800310e:	d116      	bne.n	800313e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003110:	2301      	movs	r3, #1
 8003112:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003114:	e013      	b.n	800313e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003116:	4b56      	ldr	r3, [pc, #344]	; (8003270 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800311e:	2b00      	cmp	r3, #0
 8003120:	d10f      	bne.n	8003142 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003122:	4b53      	ldr	r3, [pc, #332]	; (8003270 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800312a:	2b00      	cmp	r3, #0
 800312c:	d109      	bne.n	8003142 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800312e:	2301      	movs	r3, #1
 8003130:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003132:	e006      	b.n	8003142 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003134:	2301      	movs	r3, #1
 8003136:	73fb      	strb	r3, [r7, #15]
      break;
 8003138:	e004      	b.n	8003144 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800313a:	bf00      	nop
 800313c:	e002      	b.n	8003144 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800313e:	bf00      	nop
 8003140:	e000      	b.n	8003144 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003142:	bf00      	nop
    }

    if(status == HAL_OK)
 8003144:	7bfb      	ldrb	r3, [r7, #15]
 8003146:	2b00      	cmp	r3, #0
 8003148:	d10d      	bne.n	8003166 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800314a:	4b49      	ldr	r3, [pc, #292]	; (8003270 <RCCEx_PLLSAI1_Config+0x1e0>)
 800314c:	68db      	ldr	r3, [r3, #12]
 800314e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	6819      	ldr	r1, [r3, #0]
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	685b      	ldr	r3, [r3, #4]
 800315a:	3b01      	subs	r3, #1
 800315c:	011b      	lsls	r3, r3, #4
 800315e:	430b      	orrs	r3, r1
 8003160:	4943      	ldr	r1, [pc, #268]	; (8003270 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003162:	4313      	orrs	r3, r2
 8003164:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003166:	7bfb      	ldrb	r3, [r7, #15]
 8003168:	2b00      	cmp	r3, #0
 800316a:	d17c      	bne.n	8003266 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800316c:	4b40      	ldr	r3, [pc, #256]	; (8003270 <RCCEx_PLLSAI1_Config+0x1e0>)
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	4a3f      	ldr	r2, [pc, #252]	; (8003270 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003172:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003176:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003178:	f7fe fbe2 	bl	8001940 <HAL_GetTick>
 800317c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800317e:	e009      	b.n	8003194 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003180:	f7fe fbde 	bl	8001940 <HAL_GetTick>
 8003184:	4602      	mov	r2, r0
 8003186:	68bb      	ldr	r3, [r7, #8]
 8003188:	1ad3      	subs	r3, r2, r3
 800318a:	2b02      	cmp	r3, #2
 800318c:	d902      	bls.n	8003194 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800318e:	2303      	movs	r3, #3
 8003190:	73fb      	strb	r3, [r7, #15]
        break;
 8003192:	e005      	b.n	80031a0 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003194:	4b36      	ldr	r3, [pc, #216]	; (8003270 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800319c:	2b00      	cmp	r3, #0
 800319e:	d1ef      	bne.n	8003180 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80031a0:	7bfb      	ldrb	r3, [r7, #15]
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d15f      	bne.n	8003266 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80031a6:	683b      	ldr	r3, [r7, #0]
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d110      	bne.n	80031ce <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80031ac:	4b30      	ldr	r3, [pc, #192]	; (8003270 <RCCEx_PLLSAI1_Config+0x1e0>)
 80031ae:	691b      	ldr	r3, [r3, #16]
 80031b0:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 80031b4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80031b8:	687a      	ldr	r2, [r7, #4]
 80031ba:	6892      	ldr	r2, [r2, #8]
 80031bc:	0211      	lsls	r1, r2, #8
 80031be:	687a      	ldr	r2, [r7, #4]
 80031c0:	68d2      	ldr	r2, [r2, #12]
 80031c2:	06d2      	lsls	r2, r2, #27
 80031c4:	430a      	orrs	r2, r1
 80031c6:	492a      	ldr	r1, [pc, #168]	; (8003270 <RCCEx_PLLSAI1_Config+0x1e0>)
 80031c8:	4313      	orrs	r3, r2
 80031ca:	610b      	str	r3, [r1, #16]
 80031cc:	e027      	b.n	800321e <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80031ce:	683b      	ldr	r3, [r7, #0]
 80031d0:	2b01      	cmp	r3, #1
 80031d2:	d112      	bne.n	80031fa <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80031d4:	4b26      	ldr	r3, [pc, #152]	; (8003270 <RCCEx_PLLSAI1_Config+0x1e0>)
 80031d6:	691b      	ldr	r3, [r3, #16]
 80031d8:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80031dc:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80031e0:	687a      	ldr	r2, [r7, #4]
 80031e2:	6892      	ldr	r2, [r2, #8]
 80031e4:	0211      	lsls	r1, r2, #8
 80031e6:	687a      	ldr	r2, [r7, #4]
 80031e8:	6912      	ldr	r2, [r2, #16]
 80031ea:	0852      	lsrs	r2, r2, #1
 80031ec:	3a01      	subs	r2, #1
 80031ee:	0552      	lsls	r2, r2, #21
 80031f0:	430a      	orrs	r2, r1
 80031f2:	491f      	ldr	r1, [pc, #124]	; (8003270 <RCCEx_PLLSAI1_Config+0x1e0>)
 80031f4:	4313      	orrs	r3, r2
 80031f6:	610b      	str	r3, [r1, #16]
 80031f8:	e011      	b.n	800321e <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80031fa:	4b1d      	ldr	r3, [pc, #116]	; (8003270 <RCCEx_PLLSAI1_Config+0x1e0>)
 80031fc:	691b      	ldr	r3, [r3, #16]
 80031fe:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003202:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003206:	687a      	ldr	r2, [r7, #4]
 8003208:	6892      	ldr	r2, [r2, #8]
 800320a:	0211      	lsls	r1, r2, #8
 800320c:	687a      	ldr	r2, [r7, #4]
 800320e:	6952      	ldr	r2, [r2, #20]
 8003210:	0852      	lsrs	r2, r2, #1
 8003212:	3a01      	subs	r2, #1
 8003214:	0652      	lsls	r2, r2, #25
 8003216:	430a      	orrs	r2, r1
 8003218:	4915      	ldr	r1, [pc, #84]	; (8003270 <RCCEx_PLLSAI1_Config+0x1e0>)
 800321a:	4313      	orrs	r3, r2
 800321c:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800321e:	4b14      	ldr	r3, [pc, #80]	; (8003270 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	4a13      	ldr	r2, [pc, #76]	; (8003270 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003224:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003228:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800322a:	f7fe fb89 	bl	8001940 <HAL_GetTick>
 800322e:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003230:	e009      	b.n	8003246 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003232:	f7fe fb85 	bl	8001940 <HAL_GetTick>
 8003236:	4602      	mov	r2, r0
 8003238:	68bb      	ldr	r3, [r7, #8]
 800323a:	1ad3      	subs	r3, r2, r3
 800323c:	2b02      	cmp	r3, #2
 800323e:	d902      	bls.n	8003246 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8003240:	2303      	movs	r3, #3
 8003242:	73fb      	strb	r3, [r7, #15]
          break;
 8003244:	e005      	b.n	8003252 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003246:	4b0a      	ldr	r3, [pc, #40]	; (8003270 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800324e:	2b00      	cmp	r3, #0
 8003250:	d0ef      	beq.n	8003232 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8003252:	7bfb      	ldrb	r3, [r7, #15]
 8003254:	2b00      	cmp	r3, #0
 8003256:	d106      	bne.n	8003266 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003258:	4b05      	ldr	r3, [pc, #20]	; (8003270 <RCCEx_PLLSAI1_Config+0x1e0>)
 800325a:	691a      	ldr	r2, [r3, #16]
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	699b      	ldr	r3, [r3, #24]
 8003260:	4903      	ldr	r1, [pc, #12]	; (8003270 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003262:	4313      	orrs	r3, r2
 8003264:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003266:	7bfb      	ldrb	r3, [r7, #15]
}
 8003268:	4618      	mov	r0, r3
 800326a:	3710      	adds	r7, #16
 800326c:	46bd      	mov	sp, r7
 800326e:	bd80      	pop	{r7, pc}
 8003270:	40021000 	.word	0x40021000

08003274 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003274:	b580      	push	{r7, lr}
 8003276:	b082      	sub	sp, #8
 8003278:	af00      	add	r7, sp, #0
 800327a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	2b00      	cmp	r3, #0
 8003280:	d101      	bne.n	8003286 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003282:	2301      	movs	r3, #1
 8003284:	e049      	b.n	800331a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800328c:	b2db      	uxtb	r3, r3
 800328e:	2b00      	cmp	r3, #0
 8003290:	d106      	bne.n	80032a0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	2200      	movs	r2, #0
 8003296:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800329a:	6878      	ldr	r0, [r7, #4]
 800329c:	f7fe f918 	bl	80014d0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	2202      	movs	r2, #2
 80032a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681a      	ldr	r2, [r3, #0]
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	3304      	adds	r3, #4
 80032b0:	4619      	mov	r1, r3
 80032b2:	4610      	mov	r0, r2
 80032b4:	f000 f8fe 	bl	80034b4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	2201      	movs	r2, #1
 80032bc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	2201      	movs	r2, #1
 80032c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	2201      	movs	r2, #1
 80032cc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	2201      	movs	r2, #1
 80032d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	2201      	movs	r2, #1
 80032dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	2201      	movs	r2, #1
 80032e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	2201      	movs	r2, #1
 80032ec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	2201      	movs	r2, #1
 80032f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	2201      	movs	r2, #1
 80032fc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	2201      	movs	r2, #1
 8003304:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	2201      	movs	r2, #1
 800330c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	2201      	movs	r2, #1
 8003314:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003318:	2300      	movs	r3, #0
}
 800331a:	4618      	mov	r0, r3
 800331c:	3708      	adds	r7, #8
 800331e:	46bd      	mov	sp, r7
 8003320:	bd80      	pop	{r7, pc}

08003322 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003322:	b580      	push	{r7, lr}
 8003324:	b084      	sub	sp, #16
 8003326:	af00      	add	r7, sp, #0
 8003328:	6078      	str	r0, [r7, #4]
 800332a:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800332c:	2300      	movs	r3, #0
 800332e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003336:	2b01      	cmp	r3, #1
 8003338:	d101      	bne.n	800333e <HAL_TIM_ConfigClockSource+0x1c>
 800333a:	2302      	movs	r3, #2
 800333c:	e0b6      	b.n	80034ac <HAL_TIM_ConfigClockSource+0x18a>
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	2201      	movs	r2, #1
 8003342:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	2202      	movs	r2, #2
 800334a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	689b      	ldr	r3, [r3, #8]
 8003354:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003356:	68bb      	ldr	r3, [r7, #8]
 8003358:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800335c:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003360:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003362:	68bb      	ldr	r3, [r7, #8]
 8003364:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003368:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	68ba      	ldr	r2, [r7, #8]
 8003370:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003372:	683b      	ldr	r3, [r7, #0]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800337a:	d03e      	beq.n	80033fa <HAL_TIM_ConfigClockSource+0xd8>
 800337c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003380:	f200 8087 	bhi.w	8003492 <HAL_TIM_ConfigClockSource+0x170>
 8003384:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003388:	f000 8086 	beq.w	8003498 <HAL_TIM_ConfigClockSource+0x176>
 800338c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003390:	d87f      	bhi.n	8003492 <HAL_TIM_ConfigClockSource+0x170>
 8003392:	2b70      	cmp	r3, #112	; 0x70
 8003394:	d01a      	beq.n	80033cc <HAL_TIM_ConfigClockSource+0xaa>
 8003396:	2b70      	cmp	r3, #112	; 0x70
 8003398:	d87b      	bhi.n	8003492 <HAL_TIM_ConfigClockSource+0x170>
 800339a:	2b60      	cmp	r3, #96	; 0x60
 800339c:	d050      	beq.n	8003440 <HAL_TIM_ConfigClockSource+0x11e>
 800339e:	2b60      	cmp	r3, #96	; 0x60
 80033a0:	d877      	bhi.n	8003492 <HAL_TIM_ConfigClockSource+0x170>
 80033a2:	2b50      	cmp	r3, #80	; 0x50
 80033a4:	d03c      	beq.n	8003420 <HAL_TIM_ConfigClockSource+0xfe>
 80033a6:	2b50      	cmp	r3, #80	; 0x50
 80033a8:	d873      	bhi.n	8003492 <HAL_TIM_ConfigClockSource+0x170>
 80033aa:	2b40      	cmp	r3, #64	; 0x40
 80033ac:	d058      	beq.n	8003460 <HAL_TIM_ConfigClockSource+0x13e>
 80033ae:	2b40      	cmp	r3, #64	; 0x40
 80033b0:	d86f      	bhi.n	8003492 <HAL_TIM_ConfigClockSource+0x170>
 80033b2:	2b30      	cmp	r3, #48	; 0x30
 80033b4:	d064      	beq.n	8003480 <HAL_TIM_ConfigClockSource+0x15e>
 80033b6:	2b30      	cmp	r3, #48	; 0x30
 80033b8:	d86b      	bhi.n	8003492 <HAL_TIM_ConfigClockSource+0x170>
 80033ba:	2b20      	cmp	r3, #32
 80033bc:	d060      	beq.n	8003480 <HAL_TIM_ConfigClockSource+0x15e>
 80033be:	2b20      	cmp	r3, #32
 80033c0:	d867      	bhi.n	8003492 <HAL_TIM_ConfigClockSource+0x170>
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d05c      	beq.n	8003480 <HAL_TIM_ConfigClockSource+0x15e>
 80033c6:	2b10      	cmp	r3, #16
 80033c8:	d05a      	beq.n	8003480 <HAL_TIM_ConfigClockSource+0x15e>
 80033ca:	e062      	b.n	8003492 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	6818      	ldr	r0, [r3, #0]
 80033d0:	683b      	ldr	r3, [r7, #0]
 80033d2:	6899      	ldr	r1, [r3, #8]
 80033d4:	683b      	ldr	r3, [r7, #0]
 80033d6:	685a      	ldr	r2, [r3, #4]
 80033d8:	683b      	ldr	r3, [r7, #0]
 80033da:	68db      	ldr	r3, [r3, #12]
 80033dc:	f000 f948 	bl	8003670 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	689b      	ldr	r3, [r3, #8]
 80033e6:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80033e8:	68bb      	ldr	r3, [r7, #8]
 80033ea:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80033ee:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	68ba      	ldr	r2, [r7, #8]
 80033f6:	609a      	str	r2, [r3, #8]
      break;
 80033f8:	e04f      	b.n	800349a <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	6818      	ldr	r0, [r3, #0]
 80033fe:	683b      	ldr	r3, [r7, #0]
 8003400:	6899      	ldr	r1, [r3, #8]
 8003402:	683b      	ldr	r3, [r7, #0]
 8003404:	685a      	ldr	r2, [r3, #4]
 8003406:	683b      	ldr	r3, [r7, #0]
 8003408:	68db      	ldr	r3, [r3, #12]
 800340a:	f000 f931 	bl	8003670 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	689a      	ldr	r2, [r3, #8]
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800341c:	609a      	str	r2, [r3, #8]
      break;
 800341e:	e03c      	b.n	800349a <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	6818      	ldr	r0, [r3, #0]
 8003424:	683b      	ldr	r3, [r7, #0]
 8003426:	6859      	ldr	r1, [r3, #4]
 8003428:	683b      	ldr	r3, [r7, #0]
 800342a:	68db      	ldr	r3, [r3, #12]
 800342c:	461a      	mov	r2, r3
 800342e:	f000 f8a5 	bl	800357c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	2150      	movs	r1, #80	; 0x50
 8003438:	4618      	mov	r0, r3
 800343a:	f000 f8fe 	bl	800363a <TIM_ITRx_SetConfig>
      break;
 800343e:	e02c      	b.n	800349a <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	6818      	ldr	r0, [r3, #0]
 8003444:	683b      	ldr	r3, [r7, #0]
 8003446:	6859      	ldr	r1, [r3, #4]
 8003448:	683b      	ldr	r3, [r7, #0]
 800344a:	68db      	ldr	r3, [r3, #12]
 800344c:	461a      	mov	r2, r3
 800344e:	f000 f8c4 	bl	80035da <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	2160      	movs	r1, #96	; 0x60
 8003458:	4618      	mov	r0, r3
 800345a:	f000 f8ee 	bl	800363a <TIM_ITRx_SetConfig>
      break;
 800345e:	e01c      	b.n	800349a <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	6818      	ldr	r0, [r3, #0]
 8003464:	683b      	ldr	r3, [r7, #0]
 8003466:	6859      	ldr	r1, [r3, #4]
 8003468:	683b      	ldr	r3, [r7, #0]
 800346a:	68db      	ldr	r3, [r3, #12]
 800346c:	461a      	mov	r2, r3
 800346e:	f000 f885 	bl	800357c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	2140      	movs	r1, #64	; 0x40
 8003478:	4618      	mov	r0, r3
 800347a:	f000 f8de 	bl	800363a <TIM_ITRx_SetConfig>
      break;
 800347e:	e00c      	b.n	800349a <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681a      	ldr	r2, [r3, #0]
 8003484:	683b      	ldr	r3, [r7, #0]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	4619      	mov	r1, r3
 800348a:	4610      	mov	r0, r2
 800348c:	f000 f8d5 	bl	800363a <TIM_ITRx_SetConfig>
      break;
 8003490:	e003      	b.n	800349a <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8003492:	2301      	movs	r3, #1
 8003494:	73fb      	strb	r3, [r7, #15]
      break;
 8003496:	e000      	b.n	800349a <HAL_TIM_ConfigClockSource+0x178>
      break;
 8003498:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	2201      	movs	r2, #1
 800349e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	2200      	movs	r2, #0
 80034a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80034aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80034ac:	4618      	mov	r0, r3
 80034ae:	3710      	adds	r7, #16
 80034b0:	46bd      	mov	sp, r7
 80034b2:	bd80      	pop	{r7, pc}

080034b4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80034b4:	b480      	push	{r7}
 80034b6:	b085      	sub	sp, #20
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	6078      	str	r0, [r7, #4]
 80034bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	4a2a      	ldr	r2, [pc, #168]	; (8003570 <TIM_Base_SetConfig+0xbc>)
 80034c8:	4293      	cmp	r3, r2
 80034ca:	d003      	beq.n	80034d4 <TIM_Base_SetConfig+0x20>
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80034d2:	d108      	bne.n	80034e6 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80034da:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80034dc:	683b      	ldr	r3, [r7, #0]
 80034de:	685b      	ldr	r3, [r3, #4]
 80034e0:	68fa      	ldr	r2, [r7, #12]
 80034e2:	4313      	orrs	r3, r2
 80034e4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	4a21      	ldr	r2, [pc, #132]	; (8003570 <TIM_Base_SetConfig+0xbc>)
 80034ea:	4293      	cmp	r3, r2
 80034ec:	d00b      	beq.n	8003506 <TIM_Base_SetConfig+0x52>
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80034f4:	d007      	beq.n	8003506 <TIM_Base_SetConfig+0x52>
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	4a1e      	ldr	r2, [pc, #120]	; (8003574 <TIM_Base_SetConfig+0xc0>)
 80034fa:	4293      	cmp	r3, r2
 80034fc:	d003      	beq.n	8003506 <TIM_Base_SetConfig+0x52>
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	4a1d      	ldr	r2, [pc, #116]	; (8003578 <TIM_Base_SetConfig+0xc4>)
 8003502:	4293      	cmp	r3, r2
 8003504:	d108      	bne.n	8003518 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800350c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800350e:	683b      	ldr	r3, [r7, #0]
 8003510:	68db      	ldr	r3, [r3, #12]
 8003512:	68fa      	ldr	r2, [r7, #12]
 8003514:	4313      	orrs	r3, r2
 8003516:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800351e:	683b      	ldr	r3, [r7, #0]
 8003520:	695b      	ldr	r3, [r3, #20]
 8003522:	4313      	orrs	r3, r2
 8003524:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	68fa      	ldr	r2, [r7, #12]
 800352a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800352c:	683b      	ldr	r3, [r7, #0]
 800352e:	689a      	ldr	r2, [r3, #8]
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003534:	683b      	ldr	r3, [r7, #0]
 8003536:	681a      	ldr	r2, [r3, #0]
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	4a0c      	ldr	r2, [pc, #48]	; (8003570 <TIM_Base_SetConfig+0xbc>)
 8003540:	4293      	cmp	r3, r2
 8003542:	d007      	beq.n	8003554 <TIM_Base_SetConfig+0xa0>
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	4a0b      	ldr	r2, [pc, #44]	; (8003574 <TIM_Base_SetConfig+0xc0>)
 8003548:	4293      	cmp	r3, r2
 800354a:	d003      	beq.n	8003554 <TIM_Base_SetConfig+0xa0>
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	4a0a      	ldr	r2, [pc, #40]	; (8003578 <TIM_Base_SetConfig+0xc4>)
 8003550:	4293      	cmp	r3, r2
 8003552:	d103      	bne.n	800355c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003554:	683b      	ldr	r3, [r7, #0]
 8003556:	691a      	ldr	r2, [r3, #16]
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	2201      	movs	r2, #1
 8003560:	615a      	str	r2, [r3, #20]
}
 8003562:	bf00      	nop
 8003564:	3714      	adds	r7, #20
 8003566:	46bd      	mov	sp, r7
 8003568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800356c:	4770      	bx	lr
 800356e:	bf00      	nop
 8003570:	40012c00 	.word	0x40012c00
 8003574:	40014000 	.word	0x40014000
 8003578:	40014400 	.word	0x40014400

0800357c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800357c:	b480      	push	{r7}
 800357e:	b087      	sub	sp, #28
 8003580:	af00      	add	r7, sp, #0
 8003582:	60f8      	str	r0, [r7, #12]
 8003584:	60b9      	str	r1, [r7, #8]
 8003586:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	6a1b      	ldr	r3, [r3, #32]
 800358c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	6a1b      	ldr	r3, [r3, #32]
 8003592:	f023 0201 	bic.w	r2, r3, #1
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	699b      	ldr	r3, [r3, #24]
 800359e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80035a0:	693b      	ldr	r3, [r7, #16]
 80035a2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80035a6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	011b      	lsls	r3, r3, #4
 80035ac:	693a      	ldr	r2, [r7, #16]
 80035ae:	4313      	orrs	r3, r2
 80035b0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80035b2:	697b      	ldr	r3, [r7, #20]
 80035b4:	f023 030a 	bic.w	r3, r3, #10
 80035b8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80035ba:	697a      	ldr	r2, [r7, #20]
 80035bc:	68bb      	ldr	r3, [r7, #8]
 80035be:	4313      	orrs	r3, r2
 80035c0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	693a      	ldr	r2, [r7, #16]
 80035c6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	697a      	ldr	r2, [r7, #20]
 80035cc:	621a      	str	r2, [r3, #32]
}
 80035ce:	bf00      	nop
 80035d0:	371c      	adds	r7, #28
 80035d2:	46bd      	mov	sp, r7
 80035d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d8:	4770      	bx	lr

080035da <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80035da:	b480      	push	{r7}
 80035dc:	b087      	sub	sp, #28
 80035de:	af00      	add	r7, sp, #0
 80035e0:	60f8      	str	r0, [r7, #12]
 80035e2:	60b9      	str	r1, [r7, #8]
 80035e4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	6a1b      	ldr	r3, [r3, #32]
 80035ea:	f023 0210 	bic.w	r2, r3, #16
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	699b      	ldr	r3, [r3, #24]
 80035f6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	6a1b      	ldr	r3, [r3, #32]
 80035fc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80035fe:	697b      	ldr	r3, [r7, #20]
 8003600:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003604:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	031b      	lsls	r3, r3, #12
 800360a:	697a      	ldr	r2, [r7, #20]
 800360c:	4313      	orrs	r3, r2
 800360e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003610:	693b      	ldr	r3, [r7, #16]
 8003612:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003616:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003618:	68bb      	ldr	r3, [r7, #8]
 800361a:	011b      	lsls	r3, r3, #4
 800361c:	693a      	ldr	r2, [r7, #16]
 800361e:	4313      	orrs	r3, r2
 8003620:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	697a      	ldr	r2, [r7, #20]
 8003626:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	693a      	ldr	r2, [r7, #16]
 800362c:	621a      	str	r2, [r3, #32]
}
 800362e:	bf00      	nop
 8003630:	371c      	adds	r7, #28
 8003632:	46bd      	mov	sp, r7
 8003634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003638:	4770      	bx	lr

0800363a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800363a:	b480      	push	{r7}
 800363c:	b085      	sub	sp, #20
 800363e:	af00      	add	r7, sp, #0
 8003640:	6078      	str	r0, [r7, #4]
 8003642:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	689b      	ldr	r3, [r3, #8]
 8003648:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003650:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003652:	683a      	ldr	r2, [r7, #0]
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	4313      	orrs	r3, r2
 8003658:	f043 0307 	orr.w	r3, r3, #7
 800365c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	68fa      	ldr	r2, [r7, #12]
 8003662:	609a      	str	r2, [r3, #8]
}
 8003664:	bf00      	nop
 8003666:	3714      	adds	r7, #20
 8003668:	46bd      	mov	sp, r7
 800366a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800366e:	4770      	bx	lr

08003670 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003670:	b480      	push	{r7}
 8003672:	b087      	sub	sp, #28
 8003674:	af00      	add	r7, sp, #0
 8003676:	60f8      	str	r0, [r7, #12]
 8003678:	60b9      	str	r1, [r7, #8]
 800367a:	607a      	str	r2, [r7, #4]
 800367c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	689b      	ldr	r3, [r3, #8]
 8003682:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003684:	697b      	ldr	r3, [r7, #20]
 8003686:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800368a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800368c:	683b      	ldr	r3, [r7, #0]
 800368e:	021a      	lsls	r2, r3, #8
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	431a      	orrs	r2, r3
 8003694:	68bb      	ldr	r3, [r7, #8]
 8003696:	4313      	orrs	r3, r2
 8003698:	697a      	ldr	r2, [r7, #20]
 800369a:	4313      	orrs	r3, r2
 800369c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	697a      	ldr	r2, [r7, #20]
 80036a2:	609a      	str	r2, [r3, #8]
}
 80036a4:	bf00      	nop
 80036a6:	371c      	adds	r7, #28
 80036a8:	46bd      	mov	sp, r7
 80036aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ae:	4770      	bx	lr

080036b0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80036b0:	b480      	push	{r7}
 80036b2:	b085      	sub	sp, #20
 80036b4:	af00      	add	r7, sp, #0
 80036b6:	6078      	str	r0, [r7, #4]
 80036b8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80036c0:	2b01      	cmp	r3, #1
 80036c2:	d101      	bne.n	80036c8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80036c4:	2302      	movs	r3, #2
 80036c6:	e04f      	b.n	8003768 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	2201      	movs	r2, #1
 80036cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	2202      	movs	r2, #2
 80036d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	685b      	ldr	r3, [r3, #4]
 80036de:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	689b      	ldr	r3, [r3, #8]
 80036e6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	4a21      	ldr	r2, [pc, #132]	; (8003774 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80036ee:	4293      	cmp	r3, r2
 80036f0:	d108      	bne.n	8003704 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80036f8:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80036fa:	683b      	ldr	r3, [r7, #0]
 80036fc:	685b      	ldr	r3, [r3, #4]
 80036fe:	68fa      	ldr	r2, [r7, #12]
 8003700:	4313      	orrs	r3, r2
 8003702:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800370a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800370c:	683b      	ldr	r3, [r7, #0]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	68fa      	ldr	r2, [r7, #12]
 8003712:	4313      	orrs	r3, r2
 8003714:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	68fa      	ldr	r2, [r7, #12]
 800371c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	4a14      	ldr	r2, [pc, #80]	; (8003774 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8003724:	4293      	cmp	r3, r2
 8003726:	d009      	beq.n	800373c <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003730:	d004      	beq.n	800373c <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	4a10      	ldr	r2, [pc, #64]	; (8003778 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003738:	4293      	cmp	r3, r2
 800373a:	d10c      	bne.n	8003756 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800373c:	68bb      	ldr	r3, [r7, #8]
 800373e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003742:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003744:	683b      	ldr	r3, [r7, #0]
 8003746:	689b      	ldr	r3, [r3, #8]
 8003748:	68ba      	ldr	r2, [r7, #8]
 800374a:	4313      	orrs	r3, r2
 800374c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	68ba      	ldr	r2, [r7, #8]
 8003754:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	2201      	movs	r2, #1
 800375a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	2200      	movs	r2, #0
 8003762:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003766:	2300      	movs	r3, #0
}
 8003768:	4618      	mov	r0, r3
 800376a:	3714      	adds	r7, #20
 800376c:	46bd      	mov	sp, r7
 800376e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003772:	4770      	bx	lr
 8003774:	40012c00 	.word	0x40012c00
 8003778:	40014000 	.word	0x40014000

0800377c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800377c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003780:	b08a      	sub	sp, #40	; 0x28
 8003782:	af00      	add	r7, sp, #0
 8003784:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003786:	2300      	movs	r3, #0
 8003788:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	689a      	ldr	r2, [r3, #8]
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	691b      	ldr	r3, [r3, #16]
 8003794:	431a      	orrs	r2, r3
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	695b      	ldr	r3, [r3, #20]
 800379a:	431a      	orrs	r2, r3
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	69db      	ldr	r3, [r3, #28]
 80037a0:	4313      	orrs	r3, r2
 80037a2:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	681a      	ldr	r2, [r3, #0]
 80037aa:	4bb4      	ldr	r3, [pc, #720]	; (8003a7c <UART_SetConfig+0x300>)
 80037ac:	4013      	ands	r3, r2
 80037ae:	68fa      	ldr	r2, [r7, #12]
 80037b0:	6812      	ldr	r2, [r2, #0]
 80037b2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80037b4:	430b      	orrs	r3, r1
 80037b6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	685b      	ldr	r3, [r3, #4]
 80037be:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	68da      	ldr	r2, [r3, #12]
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	430a      	orrs	r2, r1
 80037cc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	699b      	ldr	r3, [r3, #24]
 80037d2:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	4aa9      	ldr	r2, [pc, #676]	; (8003a80 <UART_SetConfig+0x304>)
 80037da:	4293      	cmp	r3, r2
 80037dc:	d004      	beq.n	80037e8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	6a1b      	ldr	r3, [r3, #32]
 80037e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80037e4:	4313      	orrs	r3, r2
 80037e6:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	689b      	ldr	r3, [r3, #8]
 80037ee:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80037f8:	430a      	orrs	r2, r1
 80037fa:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	4aa0      	ldr	r2, [pc, #640]	; (8003a84 <UART_SetConfig+0x308>)
 8003802:	4293      	cmp	r3, r2
 8003804:	d126      	bne.n	8003854 <UART_SetConfig+0xd8>
 8003806:	4ba0      	ldr	r3, [pc, #640]	; (8003a88 <UART_SetConfig+0x30c>)
 8003808:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800380c:	f003 0303 	and.w	r3, r3, #3
 8003810:	2b03      	cmp	r3, #3
 8003812:	d81b      	bhi.n	800384c <UART_SetConfig+0xd0>
 8003814:	a201      	add	r2, pc, #4	; (adr r2, 800381c <UART_SetConfig+0xa0>)
 8003816:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800381a:	bf00      	nop
 800381c:	0800382d 	.word	0x0800382d
 8003820:	0800383d 	.word	0x0800383d
 8003824:	08003835 	.word	0x08003835
 8003828:	08003845 	.word	0x08003845
 800382c:	2301      	movs	r3, #1
 800382e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003832:	e080      	b.n	8003936 <UART_SetConfig+0x1ba>
 8003834:	2302      	movs	r3, #2
 8003836:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800383a:	e07c      	b.n	8003936 <UART_SetConfig+0x1ba>
 800383c:	2304      	movs	r3, #4
 800383e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003842:	e078      	b.n	8003936 <UART_SetConfig+0x1ba>
 8003844:	2308      	movs	r3, #8
 8003846:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800384a:	e074      	b.n	8003936 <UART_SetConfig+0x1ba>
 800384c:	2310      	movs	r3, #16
 800384e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003852:	e070      	b.n	8003936 <UART_SetConfig+0x1ba>
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	4a8c      	ldr	r2, [pc, #560]	; (8003a8c <UART_SetConfig+0x310>)
 800385a:	4293      	cmp	r3, r2
 800385c:	d138      	bne.n	80038d0 <UART_SetConfig+0x154>
 800385e:	4b8a      	ldr	r3, [pc, #552]	; (8003a88 <UART_SetConfig+0x30c>)
 8003860:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003864:	f003 030c 	and.w	r3, r3, #12
 8003868:	2b0c      	cmp	r3, #12
 800386a:	d82d      	bhi.n	80038c8 <UART_SetConfig+0x14c>
 800386c:	a201      	add	r2, pc, #4	; (adr r2, 8003874 <UART_SetConfig+0xf8>)
 800386e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003872:	bf00      	nop
 8003874:	080038a9 	.word	0x080038a9
 8003878:	080038c9 	.word	0x080038c9
 800387c:	080038c9 	.word	0x080038c9
 8003880:	080038c9 	.word	0x080038c9
 8003884:	080038b9 	.word	0x080038b9
 8003888:	080038c9 	.word	0x080038c9
 800388c:	080038c9 	.word	0x080038c9
 8003890:	080038c9 	.word	0x080038c9
 8003894:	080038b1 	.word	0x080038b1
 8003898:	080038c9 	.word	0x080038c9
 800389c:	080038c9 	.word	0x080038c9
 80038a0:	080038c9 	.word	0x080038c9
 80038a4:	080038c1 	.word	0x080038c1
 80038a8:	2300      	movs	r3, #0
 80038aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80038ae:	e042      	b.n	8003936 <UART_SetConfig+0x1ba>
 80038b0:	2302      	movs	r3, #2
 80038b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80038b6:	e03e      	b.n	8003936 <UART_SetConfig+0x1ba>
 80038b8:	2304      	movs	r3, #4
 80038ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80038be:	e03a      	b.n	8003936 <UART_SetConfig+0x1ba>
 80038c0:	2308      	movs	r3, #8
 80038c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80038c6:	e036      	b.n	8003936 <UART_SetConfig+0x1ba>
 80038c8:	2310      	movs	r3, #16
 80038ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80038ce:	e032      	b.n	8003936 <UART_SetConfig+0x1ba>
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	4a6a      	ldr	r2, [pc, #424]	; (8003a80 <UART_SetConfig+0x304>)
 80038d6:	4293      	cmp	r3, r2
 80038d8:	d12a      	bne.n	8003930 <UART_SetConfig+0x1b4>
 80038da:	4b6b      	ldr	r3, [pc, #428]	; (8003a88 <UART_SetConfig+0x30c>)
 80038dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038e0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80038e4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80038e8:	d01a      	beq.n	8003920 <UART_SetConfig+0x1a4>
 80038ea:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80038ee:	d81b      	bhi.n	8003928 <UART_SetConfig+0x1ac>
 80038f0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80038f4:	d00c      	beq.n	8003910 <UART_SetConfig+0x194>
 80038f6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80038fa:	d815      	bhi.n	8003928 <UART_SetConfig+0x1ac>
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d003      	beq.n	8003908 <UART_SetConfig+0x18c>
 8003900:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003904:	d008      	beq.n	8003918 <UART_SetConfig+0x19c>
 8003906:	e00f      	b.n	8003928 <UART_SetConfig+0x1ac>
 8003908:	2300      	movs	r3, #0
 800390a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800390e:	e012      	b.n	8003936 <UART_SetConfig+0x1ba>
 8003910:	2302      	movs	r3, #2
 8003912:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003916:	e00e      	b.n	8003936 <UART_SetConfig+0x1ba>
 8003918:	2304      	movs	r3, #4
 800391a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800391e:	e00a      	b.n	8003936 <UART_SetConfig+0x1ba>
 8003920:	2308      	movs	r3, #8
 8003922:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003926:	e006      	b.n	8003936 <UART_SetConfig+0x1ba>
 8003928:	2310      	movs	r3, #16
 800392a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800392e:	e002      	b.n	8003936 <UART_SetConfig+0x1ba>
 8003930:	2310      	movs	r3, #16
 8003932:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	4a51      	ldr	r2, [pc, #324]	; (8003a80 <UART_SetConfig+0x304>)
 800393c:	4293      	cmp	r3, r2
 800393e:	d17a      	bne.n	8003a36 <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003940:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003944:	2b08      	cmp	r3, #8
 8003946:	d824      	bhi.n	8003992 <UART_SetConfig+0x216>
 8003948:	a201      	add	r2, pc, #4	; (adr r2, 8003950 <UART_SetConfig+0x1d4>)
 800394a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800394e:	bf00      	nop
 8003950:	08003975 	.word	0x08003975
 8003954:	08003993 	.word	0x08003993
 8003958:	0800397d 	.word	0x0800397d
 800395c:	08003993 	.word	0x08003993
 8003960:	08003983 	.word	0x08003983
 8003964:	08003993 	.word	0x08003993
 8003968:	08003993 	.word	0x08003993
 800396c:	08003993 	.word	0x08003993
 8003970:	0800398b 	.word	0x0800398b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003974:	f7ff f90a 	bl	8002b8c <HAL_RCC_GetPCLK1Freq>
 8003978:	61f8      	str	r0, [r7, #28]
        break;
 800397a:	e010      	b.n	800399e <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800397c:	4b44      	ldr	r3, [pc, #272]	; (8003a90 <UART_SetConfig+0x314>)
 800397e:	61fb      	str	r3, [r7, #28]
        break;
 8003980:	e00d      	b.n	800399e <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003982:	f7ff f86b 	bl	8002a5c <HAL_RCC_GetSysClockFreq>
 8003986:	61f8      	str	r0, [r7, #28]
        break;
 8003988:	e009      	b.n	800399e <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800398a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800398e:	61fb      	str	r3, [r7, #28]
        break;
 8003990:	e005      	b.n	800399e <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 8003992:	2300      	movs	r3, #0
 8003994:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003996:	2301      	movs	r3, #1
 8003998:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800399c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800399e:	69fb      	ldr	r3, [r7, #28]
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	f000 8107 	beq.w	8003bb4 <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	685a      	ldr	r2, [r3, #4]
 80039aa:	4613      	mov	r3, r2
 80039ac:	005b      	lsls	r3, r3, #1
 80039ae:	4413      	add	r3, r2
 80039b0:	69fa      	ldr	r2, [r7, #28]
 80039b2:	429a      	cmp	r2, r3
 80039b4:	d305      	bcc.n	80039c2 <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	685b      	ldr	r3, [r3, #4]
 80039ba:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80039bc:	69fa      	ldr	r2, [r7, #28]
 80039be:	429a      	cmp	r2, r3
 80039c0:	d903      	bls.n	80039ca <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 80039c2:	2301      	movs	r3, #1
 80039c4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80039c8:	e0f4      	b.n	8003bb4 <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80039ca:	69fb      	ldr	r3, [r7, #28]
 80039cc:	2200      	movs	r2, #0
 80039ce:	461c      	mov	r4, r3
 80039d0:	4615      	mov	r5, r2
 80039d2:	f04f 0200 	mov.w	r2, #0
 80039d6:	f04f 0300 	mov.w	r3, #0
 80039da:	022b      	lsls	r3, r5, #8
 80039dc:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80039e0:	0222      	lsls	r2, r4, #8
 80039e2:	68f9      	ldr	r1, [r7, #12]
 80039e4:	6849      	ldr	r1, [r1, #4]
 80039e6:	0849      	lsrs	r1, r1, #1
 80039e8:	2000      	movs	r0, #0
 80039ea:	4688      	mov	r8, r1
 80039ec:	4681      	mov	r9, r0
 80039ee:	eb12 0a08 	adds.w	sl, r2, r8
 80039f2:	eb43 0b09 	adc.w	fp, r3, r9
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	685b      	ldr	r3, [r3, #4]
 80039fa:	2200      	movs	r2, #0
 80039fc:	603b      	str	r3, [r7, #0]
 80039fe:	607a      	str	r2, [r7, #4]
 8003a00:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003a04:	4650      	mov	r0, sl
 8003a06:	4659      	mov	r1, fp
 8003a08:	f7fd f8ce 	bl	8000ba8 <__aeabi_uldivmod>
 8003a0c:	4602      	mov	r2, r0
 8003a0e:	460b      	mov	r3, r1
 8003a10:	4613      	mov	r3, r2
 8003a12:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003a14:	69bb      	ldr	r3, [r7, #24]
 8003a16:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003a1a:	d308      	bcc.n	8003a2e <UART_SetConfig+0x2b2>
 8003a1c:	69bb      	ldr	r3, [r7, #24]
 8003a1e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003a22:	d204      	bcs.n	8003a2e <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	69ba      	ldr	r2, [r7, #24]
 8003a2a:	60da      	str	r2, [r3, #12]
 8003a2c:	e0c2      	b.n	8003bb4 <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 8003a2e:	2301      	movs	r3, #1
 8003a30:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003a34:	e0be      	b.n	8003bb4 <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	69db      	ldr	r3, [r3, #28]
 8003a3a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003a3e:	d16a      	bne.n	8003b16 <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 8003a40:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003a44:	2b08      	cmp	r3, #8
 8003a46:	d834      	bhi.n	8003ab2 <UART_SetConfig+0x336>
 8003a48:	a201      	add	r2, pc, #4	; (adr r2, 8003a50 <UART_SetConfig+0x2d4>)
 8003a4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a4e:	bf00      	nop
 8003a50:	08003a75 	.word	0x08003a75
 8003a54:	08003a95 	.word	0x08003a95
 8003a58:	08003a9d 	.word	0x08003a9d
 8003a5c:	08003ab3 	.word	0x08003ab3
 8003a60:	08003aa3 	.word	0x08003aa3
 8003a64:	08003ab3 	.word	0x08003ab3
 8003a68:	08003ab3 	.word	0x08003ab3
 8003a6c:	08003ab3 	.word	0x08003ab3
 8003a70:	08003aab 	.word	0x08003aab
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003a74:	f7ff f88a 	bl	8002b8c <HAL_RCC_GetPCLK1Freq>
 8003a78:	61f8      	str	r0, [r7, #28]
        break;
 8003a7a:	e020      	b.n	8003abe <UART_SetConfig+0x342>
 8003a7c:	efff69f3 	.word	0xefff69f3
 8003a80:	40008000 	.word	0x40008000
 8003a84:	40013800 	.word	0x40013800
 8003a88:	40021000 	.word	0x40021000
 8003a8c:	40004400 	.word	0x40004400
 8003a90:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003a94:	f7ff f890 	bl	8002bb8 <HAL_RCC_GetPCLK2Freq>
 8003a98:	61f8      	str	r0, [r7, #28]
        break;
 8003a9a:	e010      	b.n	8003abe <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003a9c:	4b4c      	ldr	r3, [pc, #304]	; (8003bd0 <UART_SetConfig+0x454>)
 8003a9e:	61fb      	str	r3, [r7, #28]
        break;
 8003aa0:	e00d      	b.n	8003abe <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003aa2:	f7fe ffdb 	bl	8002a5c <HAL_RCC_GetSysClockFreq>
 8003aa6:	61f8      	str	r0, [r7, #28]
        break;
 8003aa8:	e009      	b.n	8003abe <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003aaa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003aae:	61fb      	str	r3, [r7, #28]
        break;
 8003ab0:	e005      	b.n	8003abe <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 8003ab2:	2300      	movs	r3, #0
 8003ab4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003ab6:	2301      	movs	r3, #1
 8003ab8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003abc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003abe:	69fb      	ldr	r3, [r7, #28]
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d077      	beq.n	8003bb4 <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003ac4:	69fb      	ldr	r3, [r7, #28]
 8003ac6:	005a      	lsls	r2, r3, #1
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	685b      	ldr	r3, [r3, #4]
 8003acc:	085b      	lsrs	r3, r3, #1
 8003ace:	441a      	add	r2, r3
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	685b      	ldr	r3, [r3, #4]
 8003ad4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ad8:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003ada:	69bb      	ldr	r3, [r7, #24]
 8003adc:	2b0f      	cmp	r3, #15
 8003ade:	d916      	bls.n	8003b0e <UART_SetConfig+0x392>
 8003ae0:	69bb      	ldr	r3, [r7, #24]
 8003ae2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ae6:	d212      	bcs.n	8003b0e <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003ae8:	69bb      	ldr	r3, [r7, #24]
 8003aea:	b29b      	uxth	r3, r3
 8003aec:	f023 030f 	bic.w	r3, r3, #15
 8003af0:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003af2:	69bb      	ldr	r3, [r7, #24]
 8003af4:	085b      	lsrs	r3, r3, #1
 8003af6:	b29b      	uxth	r3, r3
 8003af8:	f003 0307 	and.w	r3, r3, #7
 8003afc:	b29a      	uxth	r2, r3
 8003afe:	8afb      	ldrh	r3, [r7, #22]
 8003b00:	4313      	orrs	r3, r2
 8003b02:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	8afa      	ldrh	r2, [r7, #22]
 8003b0a:	60da      	str	r2, [r3, #12]
 8003b0c:	e052      	b.n	8003bb4 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8003b0e:	2301      	movs	r3, #1
 8003b10:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003b14:	e04e      	b.n	8003bb4 <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003b16:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003b1a:	2b08      	cmp	r3, #8
 8003b1c:	d827      	bhi.n	8003b6e <UART_SetConfig+0x3f2>
 8003b1e:	a201      	add	r2, pc, #4	; (adr r2, 8003b24 <UART_SetConfig+0x3a8>)
 8003b20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b24:	08003b49 	.word	0x08003b49
 8003b28:	08003b51 	.word	0x08003b51
 8003b2c:	08003b59 	.word	0x08003b59
 8003b30:	08003b6f 	.word	0x08003b6f
 8003b34:	08003b5f 	.word	0x08003b5f
 8003b38:	08003b6f 	.word	0x08003b6f
 8003b3c:	08003b6f 	.word	0x08003b6f
 8003b40:	08003b6f 	.word	0x08003b6f
 8003b44:	08003b67 	.word	0x08003b67
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003b48:	f7ff f820 	bl	8002b8c <HAL_RCC_GetPCLK1Freq>
 8003b4c:	61f8      	str	r0, [r7, #28]
        break;
 8003b4e:	e014      	b.n	8003b7a <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003b50:	f7ff f832 	bl	8002bb8 <HAL_RCC_GetPCLK2Freq>
 8003b54:	61f8      	str	r0, [r7, #28]
        break;
 8003b56:	e010      	b.n	8003b7a <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003b58:	4b1d      	ldr	r3, [pc, #116]	; (8003bd0 <UART_SetConfig+0x454>)
 8003b5a:	61fb      	str	r3, [r7, #28]
        break;
 8003b5c:	e00d      	b.n	8003b7a <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003b5e:	f7fe ff7d 	bl	8002a5c <HAL_RCC_GetSysClockFreq>
 8003b62:	61f8      	str	r0, [r7, #28]
        break;
 8003b64:	e009      	b.n	8003b7a <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003b66:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003b6a:	61fb      	str	r3, [r7, #28]
        break;
 8003b6c:	e005      	b.n	8003b7a <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 8003b6e:	2300      	movs	r3, #0
 8003b70:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003b72:	2301      	movs	r3, #1
 8003b74:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003b78:	bf00      	nop
    }

    if (pclk != 0U)
 8003b7a:	69fb      	ldr	r3, [r7, #28]
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d019      	beq.n	8003bb4 <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	685b      	ldr	r3, [r3, #4]
 8003b84:	085a      	lsrs	r2, r3, #1
 8003b86:	69fb      	ldr	r3, [r7, #28]
 8003b88:	441a      	add	r2, r3
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	685b      	ldr	r3, [r3, #4]
 8003b8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b92:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003b94:	69bb      	ldr	r3, [r7, #24]
 8003b96:	2b0f      	cmp	r3, #15
 8003b98:	d909      	bls.n	8003bae <UART_SetConfig+0x432>
 8003b9a:	69bb      	ldr	r3, [r7, #24]
 8003b9c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ba0:	d205      	bcs.n	8003bae <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003ba2:	69bb      	ldr	r3, [r7, #24]
 8003ba4:	b29a      	uxth	r2, r3
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	60da      	str	r2, [r3, #12]
 8003bac:	e002      	b.n	8003bb4 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8003bae:	2301      	movs	r3, #1
 8003bb0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	2200      	movs	r2, #0
 8003bb8:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	2200      	movs	r2, #0
 8003bbe:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8003bc0:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8003bc4:	4618      	mov	r0, r3
 8003bc6:	3728      	adds	r7, #40	; 0x28
 8003bc8:	46bd      	mov	sp, r7
 8003bca:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003bce:	bf00      	nop
 8003bd0:	00f42400 	.word	0x00f42400

08003bd4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003bd4:	b480      	push	{r7}
 8003bd6:	b083      	sub	sp, #12
 8003bd8:	af00      	add	r7, sp, #0
 8003bda:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003be0:	f003 0301 	and.w	r3, r3, #1
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d00a      	beq.n	8003bfe <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	685b      	ldr	r3, [r3, #4]
 8003bee:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	430a      	orrs	r2, r1
 8003bfc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c02:	f003 0302 	and.w	r3, r3, #2
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d00a      	beq.n	8003c20 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	685b      	ldr	r3, [r3, #4]
 8003c10:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	430a      	orrs	r2, r1
 8003c1e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c24:	f003 0304 	and.w	r3, r3, #4
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d00a      	beq.n	8003c42 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	685b      	ldr	r3, [r3, #4]
 8003c32:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	430a      	orrs	r2, r1
 8003c40:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c46:	f003 0308 	and.w	r3, r3, #8
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d00a      	beq.n	8003c64 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	685b      	ldr	r3, [r3, #4]
 8003c54:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	430a      	orrs	r2, r1
 8003c62:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c68:	f003 0310 	and.w	r3, r3, #16
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d00a      	beq.n	8003c86 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	689b      	ldr	r3, [r3, #8]
 8003c76:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	430a      	orrs	r2, r1
 8003c84:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c8a:	f003 0320 	and.w	r3, r3, #32
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d00a      	beq.n	8003ca8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	689b      	ldr	r3, [r3, #8]
 8003c98:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	430a      	orrs	r2, r1
 8003ca6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d01a      	beq.n	8003cea <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	685b      	ldr	r3, [r3, #4]
 8003cba:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	430a      	orrs	r2, r1
 8003cc8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cce:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003cd2:	d10a      	bne.n	8003cea <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	685b      	ldr	r3, [r3, #4]
 8003cda:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	430a      	orrs	r2, r1
 8003ce8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d00a      	beq.n	8003d0c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	685b      	ldr	r3, [r3, #4]
 8003cfc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	430a      	orrs	r2, r1
 8003d0a:	605a      	str	r2, [r3, #4]
  }
}
 8003d0c:	bf00      	nop
 8003d0e:	370c      	adds	r7, #12
 8003d10:	46bd      	mov	sp, r7
 8003d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d16:	4770      	bx	lr

08003d18 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003d18:	b580      	push	{r7, lr}
 8003d1a:	b086      	sub	sp, #24
 8003d1c:	af02      	add	r7, sp, #8
 8003d1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	2200      	movs	r2, #0
 8003d24:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003d28:	f7fd fe0a 	bl	8001940 <HAL_GetTick>
 8003d2c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	f003 0308 	and.w	r3, r3, #8
 8003d38:	2b08      	cmp	r3, #8
 8003d3a:	d10e      	bne.n	8003d5a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003d3c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003d40:	9300      	str	r3, [sp, #0]
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	2200      	movs	r2, #0
 8003d46:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003d4a:	6878      	ldr	r0, [r7, #4]
 8003d4c:	f000 f82d 	bl	8003daa <UART_WaitOnFlagUntilTimeout>
 8003d50:	4603      	mov	r3, r0
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d001      	beq.n	8003d5a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003d56:	2303      	movs	r3, #3
 8003d58:	e023      	b.n	8003da2 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	f003 0304 	and.w	r3, r3, #4
 8003d64:	2b04      	cmp	r3, #4
 8003d66:	d10e      	bne.n	8003d86 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003d68:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003d6c:	9300      	str	r3, [sp, #0]
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	2200      	movs	r2, #0
 8003d72:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003d76:	6878      	ldr	r0, [r7, #4]
 8003d78:	f000 f817 	bl	8003daa <UART_WaitOnFlagUntilTimeout>
 8003d7c:	4603      	mov	r3, r0
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d001      	beq.n	8003d86 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003d82:	2303      	movs	r3, #3
 8003d84:	e00d      	b.n	8003da2 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	2220      	movs	r2, #32
 8003d8a:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	2220      	movs	r2, #32
 8003d90:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	2200      	movs	r2, #0
 8003d96:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	2200      	movs	r2, #0
 8003d9c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8003da0:	2300      	movs	r3, #0
}
 8003da2:	4618      	mov	r0, r3
 8003da4:	3710      	adds	r7, #16
 8003da6:	46bd      	mov	sp, r7
 8003da8:	bd80      	pop	{r7, pc}

08003daa <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003daa:	b580      	push	{r7, lr}
 8003dac:	b09c      	sub	sp, #112	; 0x70
 8003dae:	af00      	add	r7, sp, #0
 8003db0:	60f8      	str	r0, [r7, #12]
 8003db2:	60b9      	str	r1, [r7, #8]
 8003db4:	603b      	str	r3, [r7, #0]
 8003db6:	4613      	mov	r3, r2
 8003db8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003dba:	e0a5      	b.n	8003f08 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003dbc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003dbe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003dc2:	f000 80a1 	beq.w	8003f08 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003dc6:	f7fd fdbb 	bl	8001940 <HAL_GetTick>
 8003dca:	4602      	mov	r2, r0
 8003dcc:	683b      	ldr	r3, [r7, #0]
 8003dce:	1ad3      	subs	r3, r2, r3
 8003dd0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8003dd2:	429a      	cmp	r2, r3
 8003dd4:	d302      	bcc.n	8003ddc <UART_WaitOnFlagUntilTimeout+0x32>
 8003dd6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d13e      	bne.n	8003e5a <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003de2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003de4:	e853 3f00 	ldrex	r3, [r3]
 8003de8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8003dea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003dec:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003df0:	667b      	str	r3, [r7, #100]	; 0x64
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	461a      	mov	r2, r3
 8003df8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003dfa:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003dfc:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dfe:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003e00:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003e02:	e841 2300 	strex	r3, r2, [r1]
 8003e06:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8003e08:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d1e6      	bne.n	8003ddc <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	3308      	adds	r3, #8
 8003e14:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e16:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e18:	e853 3f00 	ldrex	r3, [r3]
 8003e1c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003e1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e20:	f023 0301 	bic.w	r3, r3, #1
 8003e24:	663b      	str	r3, [r7, #96]	; 0x60
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	3308      	adds	r3, #8
 8003e2c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003e2e:	64ba      	str	r2, [r7, #72]	; 0x48
 8003e30:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e32:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003e34:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003e36:	e841 2300 	strex	r3, r2, [r1]
 8003e3a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003e3c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d1e5      	bne.n	8003e0e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	2220      	movs	r2, #32
 8003e46:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	2220      	movs	r2, #32
 8003e4c:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	2200      	movs	r2, #0
 8003e52:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8003e56:	2303      	movs	r3, #3
 8003e58:	e067      	b.n	8003f2a <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	f003 0304 	and.w	r3, r3, #4
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d04f      	beq.n	8003f08 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	69db      	ldr	r3, [r3, #28]
 8003e6e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003e72:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003e76:	d147      	bne.n	8003f08 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003e80:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e8a:	e853 3f00 	ldrex	r3, [r3]
 8003e8e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003e90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e92:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003e96:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	461a      	mov	r2, r3
 8003e9e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ea0:	637b      	str	r3, [r7, #52]	; 0x34
 8003ea2:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ea4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003ea6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003ea8:	e841 2300 	strex	r3, r2, [r1]
 8003eac:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003eae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d1e6      	bne.n	8003e82 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	3308      	adds	r3, #8
 8003eba:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ebc:	697b      	ldr	r3, [r7, #20]
 8003ebe:	e853 3f00 	ldrex	r3, [r3]
 8003ec2:	613b      	str	r3, [r7, #16]
   return(result);
 8003ec4:	693b      	ldr	r3, [r7, #16]
 8003ec6:	f023 0301 	bic.w	r3, r3, #1
 8003eca:	66bb      	str	r3, [r7, #104]	; 0x68
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	3308      	adds	r3, #8
 8003ed2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003ed4:	623a      	str	r2, [r7, #32]
 8003ed6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ed8:	69f9      	ldr	r1, [r7, #28]
 8003eda:	6a3a      	ldr	r2, [r7, #32]
 8003edc:	e841 2300 	strex	r3, r2, [r1]
 8003ee0:	61bb      	str	r3, [r7, #24]
   return(result);
 8003ee2:	69bb      	ldr	r3, [r7, #24]
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d1e5      	bne.n	8003eb4 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	2220      	movs	r2, #32
 8003eec:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	2220      	movs	r2, #32
 8003ef2:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	2220      	movs	r2, #32
 8003ef8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	2200      	movs	r2, #0
 8003f00:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8003f04:	2303      	movs	r3, #3
 8003f06:	e010      	b.n	8003f2a <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	69da      	ldr	r2, [r3, #28]
 8003f0e:	68bb      	ldr	r3, [r7, #8]
 8003f10:	4013      	ands	r3, r2
 8003f12:	68ba      	ldr	r2, [r7, #8]
 8003f14:	429a      	cmp	r2, r3
 8003f16:	bf0c      	ite	eq
 8003f18:	2301      	moveq	r3, #1
 8003f1a:	2300      	movne	r3, #0
 8003f1c:	b2db      	uxtb	r3, r3
 8003f1e:	461a      	mov	r2, r3
 8003f20:	79fb      	ldrb	r3, [r7, #7]
 8003f22:	429a      	cmp	r2, r3
 8003f24:	f43f af4a 	beq.w	8003dbc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003f28:	2300      	movs	r3, #0
}
 8003f2a:	4618      	mov	r0, r3
 8003f2c:	3770      	adds	r7, #112	; 0x70
 8003f2e:	46bd      	mov	sp, r7
 8003f30:	bd80      	pop	{r7, pc}

08003f32 <HAL_RS485Ex_Init>:
  *       oversampling rate).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RS485Ex_Init(UART_HandleTypeDef *huart, uint32_t Polarity, uint32_t AssertionTime,
                                   uint32_t DeassertionTime)
{
 8003f32:	b580      	push	{r7, lr}
 8003f34:	b086      	sub	sp, #24
 8003f36:	af00      	add	r7, sp, #0
 8003f38:	60f8      	str	r0, [r7, #12]
 8003f3a:	60b9      	str	r1, [r7, #8]
 8003f3c:	607a      	str	r2, [r7, #4]
 8003f3e:	603b      	str	r3, [r7, #0]
  uint32_t temp;

  /* Check the UART handle allocation */
  if (huart == NULL)
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d101      	bne.n	8003f4a <HAL_RS485Ex_Init+0x18>
  {
    return HAL_ERROR;
 8003f46:	2301      	movs	r3, #1
 8003f48:	e056      	b.n	8003ff8 <HAL_RS485Ex_Init+0xc6>
  assert_param(IS_UART_ASSERTIONTIME(AssertionTime));

  /* Check the Driver Enable deassertion time */
  assert_param(IS_UART_DEASSERTIONTIME(DeassertionTime));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d106      	bne.n	8003f60 <HAL_RS485Ex_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	2200      	movs	r2, #0
 8003f56:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX */
    HAL_UART_MspInit(huart);
 8003f5a:	68f8      	ldr	r0, [r7, #12]
 8003f5c:	f7fd fad8 	bl	8001510 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	2224      	movs	r2, #36	; 0x24
 8003f64:	679a      	str	r2, [r3, #120]	; 0x78

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	681a      	ldr	r2, [r3, #0]
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	f022 0201 	bic.w	r2, r2, #1
 8003f74:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003f76:	68f8      	ldr	r0, [r7, #12]
 8003f78:	f7ff fc00 	bl	800377c <UART_SetConfig>
 8003f7c:	4603      	mov	r3, r0
 8003f7e:	2b01      	cmp	r3, #1
 8003f80:	d101      	bne.n	8003f86 <HAL_RS485Ex_Init+0x54>
  {
    return HAL_ERROR;
 8003f82:	2301      	movs	r3, #1
 8003f84:	e038      	b.n	8003ff8 <HAL_RS485Ex_Init+0xc6>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d002      	beq.n	8003f94 <HAL_RS485Ex_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8003f8e:	68f8      	ldr	r0, [r7, #12]
 8003f90:	f7ff fe20 	bl	8003bd4 <UART_AdvFeatureConfig>
  }

  /* Enable the Driver Enable mode by setting the DEM bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DEM);
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	689a      	ldr	r2, [r3, #8]
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003fa2:	609a      	str	r2, [r3, #8]

  /* Set the Driver Enable polarity */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_DEP, Polarity);
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	689b      	ldr	r3, [r3, #8]
 8003faa:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	68ba      	ldr	r2, [r7, #8]
 8003fb4:	430a      	orrs	r2, r1
 8003fb6:	609a      	str	r2, [r3, #8]

  /* Set the Driver Enable assertion and deassertion times */
  temp = (AssertionTime << UART_CR1_DEAT_ADDRESS_LSB_POS);
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	055b      	lsls	r3, r3, #21
 8003fbc:	617b      	str	r3, [r7, #20]
  temp |= (DeassertionTime << UART_CR1_DEDT_ADDRESS_LSB_POS);
 8003fbe:	683b      	ldr	r3, [r7, #0]
 8003fc0:	041b      	lsls	r3, r3, #16
 8003fc2:	697a      	ldr	r2, [r7, #20]
 8003fc4:	4313      	orrs	r3, r2
 8003fc6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, (USART_CR1_DEDT | USART_CR1_DEAT), temp);
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	f023 737f 	bic.w	r3, r3, #66846720	; 0x3fc0000
 8003fd2:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8003fd6:	68fa      	ldr	r2, [r7, #12]
 8003fd8:	6812      	ldr	r2, [r2, #0]
 8003fda:	6979      	ldr	r1, [r7, #20]
 8003fdc:	430b      	orrs	r3, r1
 8003fde:	6013      	str	r3, [r2, #0]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	681a      	ldr	r2, [r3, #0]
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	f042 0201 	orr.w	r2, r2, #1
 8003fee:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003ff0:	68f8      	ldr	r0, [r7, #12]
 8003ff2:	f7ff fe91 	bl	8003d18 <UART_CheckIdleState>
 8003ff6:	4603      	mov	r3, r0
}
 8003ff8:	4618      	mov	r0, r3
 8003ffa:	3718      	adds	r7, #24
 8003ffc:	46bd      	mov	sp, r7
 8003ffe:	bd80      	pop	{r7, pc}

08004000 <__errno>:
 8004000:	4b01      	ldr	r3, [pc, #4]	; (8004008 <__errno+0x8>)
 8004002:	6818      	ldr	r0, [r3, #0]
 8004004:	4770      	bx	lr
 8004006:	bf00      	nop
 8004008:	2000000c 	.word	0x2000000c

0800400c <__libc_init_array>:
 800400c:	b570      	push	{r4, r5, r6, lr}
 800400e:	4d0d      	ldr	r5, [pc, #52]	; (8004044 <__libc_init_array+0x38>)
 8004010:	4c0d      	ldr	r4, [pc, #52]	; (8004048 <__libc_init_array+0x3c>)
 8004012:	1b64      	subs	r4, r4, r5
 8004014:	10a4      	asrs	r4, r4, #2
 8004016:	2600      	movs	r6, #0
 8004018:	42a6      	cmp	r6, r4
 800401a:	d109      	bne.n	8004030 <__libc_init_array+0x24>
 800401c:	4d0b      	ldr	r5, [pc, #44]	; (800404c <__libc_init_array+0x40>)
 800401e:	4c0c      	ldr	r4, [pc, #48]	; (8004050 <__libc_init_array+0x44>)
 8004020:	f002 fdfe 	bl	8006c20 <_init>
 8004024:	1b64      	subs	r4, r4, r5
 8004026:	10a4      	asrs	r4, r4, #2
 8004028:	2600      	movs	r6, #0
 800402a:	42a6      	cmp	r6, r4
 800402c:	d105      	bne.n	800403a <__libc_init_array+0x2e>
 800402e:	bd70      	pop	{r4, r5, r6, pc}
 8004030:	f855 3b04 	ldr.w	r3, [r5], #4
 8004034:	4798      	blx	r3
 8004036:	3601      	adds	r6, #1
 8004038:	e7ee      	b.n	8004018 <__libc_init_array+0xc>
 800403a:	f855 3b04 	ldr.w	r3, [r5], #4
 800403e:	4798      	blx	r3
 8004040:	3601      	adds	r6, #1
 8004042:	e7f2      	b.n	800402a <__libc_init_array+0x1e>
 8004044:	08007064 	.word	0x08007064
 8004048:	08007064 	.word	0x08007064
 800404c:	08007064 	.word	0x08007064
 8004050:	08007068 	.word	0x08007068

08004054 <memset>:
 8004054:	4402      	add	r2, r0
 8004056:	4603      	mov	r3, r0
 8004058:	4293      	cmp	r3, r2
 800405a:	d100      	bne.n	800405e <memset+0xa>
 800405c:	4770      	bx	lr
 800405e:	f803 1b01 	strb.w	r1, [r3], #1
 8004062:	e7f9      	b.n	8004058 <memset+0x4>

08004064 <__cvt>:
 8004064:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004068:	ec55 4b10 	vmov	r4, r5, d0
 800406c:	2d00      	cmp	r5, #0
 800406e:	460e      	mov	r6, r1
 8004070:	4619      	mov	r1, r3
 8004072:	462b      	mov	r3, r5
 8004074:	bfbb      	ittet	lt
 8004076:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800407a:	461d      	movlt	r5, r3
 800407c:	2300      	movge	r3, #0
 800407e:	232d      	movlt	r3, #45	; 0x2d
 8004080:	700b      	strb	r3, [r1, #0]
 8004082:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004084:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8004088:	4691      	mov	r9, r2
 800408a:	f023 0820 	bic.w	r8, r3, #32
 800408e:	bfbc      	itt	lt
 8004090:	4622      	movlt	r2, r4
 8004092:	4614      	movlt	r4, r2
 8004094:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004098:	d005      	beq.n	80040a6 <__cvt+0x42>
 800409a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800409e:	d100      	bne.n	80040a2 <__cvt+0x3e>
 80040a0:	3601      	adds	r6, #1
 80040a2:	2102      	movs	r1, #2
 80040a4:	e000      	b.n	80040a8 <__cvt+0x44>
 80040a6:	2103      	movs	r1, #3
 80040a8:	ab03      	add	r3, sp, #12
 80040aa:	9301      	str	r3, [sp, #4]
 80040ac:	ab02      	add	r3, sp, #8
 80040ae:	9300      	str	r3, [sp, #0]
 80040b0:	ec45 4b10 	vmov	d0, r4, r5
 80040b4:	4653      	mov	r3, sl
 80040b6:	4632      	mov	r2, r6
 80040b8:	f000 fd92 	bl	8004be0 <_dtoa_r>
 80040bc:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80040c0:	4607      	mov	r7, r0
 80040c2:	d102      	bne.n	80040ca <__cvt+0x66>
 80040c4:	f019 0f01 	tst.w	r9, #1
 80040c8:	d022      	beq.n	8004110 <__cvt+0xac>
 80040ca:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80040ce:	eb07 0906 	add.w	r9, r7, r6
 80040d2:	d110      	bne.n	80040f6 <__cvt+0x92>
 80040d4:	783b      	ldrb	r3, [r7, #0]
 80040d6:	2b30      	cmp	r3, #48	; 0x30
 80040d8:	d10a      	bne.n	80040f0 <__cvt+0x8c>
 80040da:	2200      	movs	r2, #0
 80040dc:	2300      	movs	r3, #0
 80040de:	4620      	mov	r0, r4
 80040e0:	4629      	mov	r1, r5
 80040e2:	f7fc fcf1 	bl	8000ac8 <__aeabi_dcmpeq>
 80040e6:	b918      	cbnz	r0, 80040f0 <__cvt+0x8c>
 80040e8:	f1c6 0601 	rsb	r6, r6, #1
 80040ec:	f8ca 6000 	str.w	r6, [sl]
 80040f0:	f8da 3000 	ldr.w	r3, [sl]
 80040f4:	4499      	add	r9, r3
 80040f6:	2200      	movs	r2, #0
 80040f8:	2300      	movs	r3, #0
 80040fa:	4620      	mov	r0, r4
 80040fc:	4629      	mov	r1, r5
 80040fe:	f7fc fce3 	bl	8000ac8 <__aeabi_dcmpeq>
 8004102:	b108      	cbz	r0, 8004108 <__cvt+0xa4>
 8004104:	f8cd 900c 	str.w	r9, [sp, #12]
 8004108:	2230      	movs	r2, #48	; 0x30
 800410a:	9b03      	ldr	r3, [sp, #12]
 800410c:	454b      	cmp	r3, r9
 800410e:	d307      	bcc.n	8004120 <__cvt+0xbc>
 8004110:	9b03      	ldr	r3, [sp, #12]
 8004112:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004114:	1bdb      	subs	r3, r3, r7
 8004116:	4638      	mov	r0, r7
 8004118:	6013      	str	r3, [r2, #0]
 800411a:	b004      	add	sp, #16
 800411c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004120:	1c59      	adds	r1, r3, #1
 8004122:	9103      	str	r1, [sp, #12]
 8004124:	701a      	strb	r2, [r3, #0]
 8004126:	e7f0      	b.n	800410a <__cvt+0xa6>

08004128 <__exponent>:
 8004128:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800412a:	4603      	mov	r3, r0
 800412c:	2900      	cmp	r1, #0
 800412e:	bfb8      	it	lt
 8004130:	4249      	neglt	r1, r1
 8004132:	f803 2b02 	strb.w	r2, [r3], #2
 8004136:	bfb4      	ite	lt
 8004138:	222d      	movlt	r2, #45	; 0x2d
 800413a:	222b      	movge	r2, #43	; 0x2b
 800413c:	2909      	cmp	r1, #9
 800413e:	7042      	strb	r2, [r0, #1]
 8004140:	dd2a      	ble.n	8004198 <__exponent+0x70>
 8004142:	f10d 0407 	add.w	r4, sp, #7
 8004146:	46a4      	mov	ip, r4
 8004148:	270a      	movs	r7, #10
 800414a:	46a6      	mov	lr, r4
 800414c:	460a      	mov	r2, r1
 800414e:	fb91 f6f7 	sdiv	r6, r1, r7
 8004152:	fb07 1516 	mls	r5, r7, r6, r1
 8004156:	3530      	adds	r5, #48	; 0x30
 8004158:	2a63      	cmp	r2, #99	; 0x63
 800415a:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 800415e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8004162:	4631      	mov	r1, r6
 8004164:	dcf1      	bgt.n	800414a <__exponent+0x22>
 8004166:	3130      	adds	r1, #48	; 0x30
 8004168:	f1ae 0502 	sub.w	r5, lr, #2
 800416c:	f804 1c01 	strb.w	r1, [r4, #-1]
 8004170:	1c44      	adds	r4, r0, #1
 8004172:	4629      	mov	r1, r5
 8004174:	4561      	cmp	r1, ip
 8004176:	d30a      	bcc.n	800418e <__exponent+0x66>
 8004178:	f10d 0209 	add.w	r2, sp, #9
 800417c:	eba2 020e 	sub.w	r2, r2, lr
 8004180:	4565      	cmp	r5, ip
 8004182:	bf88      	it	hi
 8004184:	2200      	movhi	r2, #0
 8004186:	4413      	add	r3, r2
 8004188:	1a18      	subs	r0, r3, r0
 800418a:	b003      	add	sp, #12
 800418c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800418e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004192:	f804 2f01 	strb.w	r2, [r4, #1]!
 8004196:	e7ed      	b.n	8004174 <__exponent+0x4c>
 8004198:	2330      	movs	r3, #48	; 0x30
 800419a:	3130      	adds	r1, #48	; 0x30
 800419c:	7083      	strb	r3, [r0, #2]
 800419e:	70c1      	strb	r1, [r0, #3]
 80041a0:	1d03      	adds	r3, r0, #4
 80041a2:	e7f1      	b.n	8004188 <__exponent+0x60>

080041a4 <_printf_float>:
 80041a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80041a8:	ed2d 8b02 	vpush	{d8}
 80041ac:	b08d      	sub	sp, #52	; 0x34
 80041ae:	460c      	mov	r4, r1
 80041b0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80041b4:	4616      	mov	r6, r2
 80041b6:	461f      	mov	r7, r3
 80041b8:	4605      	mov	r5, r0
 80041ba:	f001 fcb7 	bl	8005b2c <_localeconv_r>
 80041be:	f8d0 a000 	ldr.w	sl, [r0]
 80041c2:	4650      	mov	r0, sl
 80041c4:	f7fc f804 	bl	80001d0 <strlen>
 80041c8:	2300      	movs	r3, #0
 80041ca:	930a      	str	r3, [sp, #40]	; 0x28
 80041cc:	6823      	ldr	r3, [r4, #0]
 80041ce:	9305      	str	r3, [sp, #20]
 80041d0:	f8d8 3000 	ldr.w	r3, [r8]
 80041d4:	f894 b018 	ldrb.w	fp, [r4, #24]
 80041d8:	3307      	adds	r3, #7
 80041da:	f023 0307 	bic.w	r3, r3, #7
 80041de:	f103 0208 	add.w	r2, r3, #8
 80041e2:	f8c8 2000 	str.w	r2, [r8]
 80041e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041ea:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80041ee:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80041f2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80041f6:	9307      	str	r3, [sp, #28]
 80041f8:	f8cd 8018 	str.w	r8, [sp, #24]
 80041fc:	ee08 0a10 	vmov	s16, r0
 8004200:	4b9f      	ldr	r3, [pc, #636]	; (8004480 <_printf_float+0x2dc>)
 8004202:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004206:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800420a:	f7fc fc8f 	bl	8000b2c <__aeabi_dcmpun>
 800420e:	bb88      	cbnz	r0, 8004274 <_printf_float+0xd0>
 8004210:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004214:	4b9a      	ldr	r3, [pc, #616]	; (8004480 <_printf_float+0x2dc>)
 8004216:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800421a:	f7fc fc69 	bl	8000af0 <__aeabi_dcmple>
 800421e:	bb48      	cbnz	r0, 8004274 <_printf_float+0xd0>
 8004220:	2200      	movs	r2, #0
 8004222:	2300      	movs	r3, #0
 8004224:	4640      	mov	r0, r8
 8004226:	4649      	mov	r1, r9
 8004228:	f7fc fc58 	bl	8000adc <__aeabi_dcmplt>
 800422c:	b110      	cbz	r0, 8004234 <_printf_float+0x90>
 800422e:	232d      	movs	r3, #45	; 0x2d
 8004230:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004234:	4b93      	ldr	r3, [pc, #588]	; (8004484 <_printf_float+0x2e0>)
 8004236:	4894      	ldr	r0, [pc, #592]	; (8004488 <_printf_float+0x2e4>)
 8004238:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800423c:	bf94      	ite	ls
 800423e:	4698      	movls	r8, r3
 8004240:	4680      	movhi	r8, r0
 8004242:	2303      	movs	r3, #3
 8004244:	6123      	str	r3, [r4, #16]
 8004246:	9b05      	ldr	r3, [sp, #20]
 8004248:	f023 0204 	bic.w	r2, r3, #4
 800424c:	6022      	str	r2, [r4, #0]
 800424e:	f04f 0900 	mov.w	r9, #0
 8004252:	9700      	str	r7, [sp, #0]
 8004254:	4633      	mov	r3, r6
 8004256:	aa0b      	add	r2, sp, #44	; 0x2c
 8004258:	4621      	mov	r1, r4
 800425a:	4628      	mov	r0, r5
 800425c:	f000 f9d8 	bl	8004610 <_printf_common>
 8004260:	3001      	adds	r0, #1
 8004262:	f040 8090 	bne.w	8004386 <_printf_float+0x1e2>
 8004266:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800426a:	b00d      	add	sp, #52	; 0x34
 800426c:	ecbd 8b02 	vpop	{d8}
 8004270:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004274:	4642      	mov	r2, r8
 8004276:	464b      	mov	r3, r9
 8004278:	4640      	mov	r0, r8
 800427a:	4649      	mov	r1, r9
 800427c:	f7fc fc56 	bl	8000b2c <__aeabi_dcmpun>
 8004280:	b140      	cbz	r0, 8004294 <_printf_float+0xf0>
 8004282:	464b      	mov	r3, r9
 8004284:	2b00      	cmp	r3, #0
 8004286:	bfbc      	itt	lt
 8004288:	232d      	movlt	r3, #45	; 0x2d
 800428a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800428e:	487f      	ldr	r0, [pc, #508]	; (800448c <_printf_float+0x2e8>)
 8004290:	4b7f      	ldr	r3, [pc, #508]	; (8004490 <_printf_float+0x2ec>)
 8004292:	e7d1      	b.n	8004238 <_printf_float+0x94>
 8004294:	6863      	ldr	r3, [r4, #4]
 8004296:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800429a:	9206      	str	r2, [sp, #24]
 800429c:	1c5a      	adds	r2, r3, #1
 800429e:	d13f      	bne.n	8004320 <_printf_float+0x17c>
 80042a0:	2306      	movs	r3, #6
 80042a2:	6063      	str	r3, [r4, #4]
 80042a4:	9b05      	ldr	r3, [sp, #20]
 80042a6:	6861      	ldr	r1, [r4, #4]
 80042a8:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80042ac:	2300      	movs	r3, #0
 80042ae:	9303      	str	r3, [sp, #12]
 80042b0:	ab0a      	add	r3, sp, #40	; 0x28
 80042b2:	e9cd b301 	strd	fp, r3, [sp, #4]
 80042b6:	ab09      	add	r3, sp, #36	; 0x24
 80042b8:	ec49 8b10 	vmov	d0, r8, r9
 80042bc:	9300      	str	r3, [sp, #0]
 80042be:	6022      	str	r2, [r4, #0]
 80042c0:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80042c4:	4628      	mov	r0, r5
 80042c6:	f7ff fecd 	bl	8004064 <__cvt>
 80042ca:	9b06      	ldr	r3, [sp, #24]
 80042cc:	9909      	ldr	r1, [sp, #36]	; 0x24
 80042ce:	2b47      	cmp	r3, #71	; 0x47
 80042d0:	4680      	mov	r8, r0
 80042d2:	d108      	bne.n	80042e6 <_printf_float+0x142>
 80042d4:	1cc8      	adds	r0, r1, #3
 80042d6:	db02      	blt.n	80042de <_printf_float+0x13a>
 80042d8:	6863      	ldr	r3, [r4, #4]
 80042da:	4299      	cmp	r1, r3
 80042dc:	dd41      	ble.n	8004362 <_printf_float+0x1be>
 80042de:	f1ab 0b02 	sub.w	fp, fp, #2
 80042e2:	fa5f fb8b 	uxtb.w	fp, fp
 80042e6:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80042ea:	d820      	bhi.n	800432e <_printf_float+0x18a>
 80042ec:	3901      	subs	r1, #1
 80042ee:	465a      	mov	r2, fp
 80042f0:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80042f4:	9109      	str	r1, [sp, #36]	; 0x24
 80042f6:	f7ff ff17 	bl	8004128 <__exponent>
 80042fa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80042fc:	1813      	adds	r3, r2, r0
 80042fe:	2a01      	cmp	r2, #1
 8004300:	4681      	mov	r9, r0
 8004302:	6123      	str	r3, [r4, #16]
 8004304:	dc02      	bgt.n	800430c <_printf_float+0x168>
 8004306:	6822      	ldr	r2, [r4, #0]
 8004308:	07d2      	lsls	r2, r2, #31
 800430a:	d501      	bpl.n	8004310 <_printf_float+0x16c>
 800430c:	3301      	adds	r3, #1
 800430e:	6123      	str	r3, [r4, #16]
 8004310:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8004314:	2b00      	cmp	r3, #0
 8004316:	d09c      	beq.n	8004252 <_printf_float+0xae>
 8004318:	232d      	movs	r3, #45	; 0x2d
 800431a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800431e:	e798      	b.n	8004252 <_printf_float+0xae>
 8004320:	9a06      	ldr	r2, [sp, #24]
 8004322:	2a47      	cmp	r2, #71	; 0x47
 8004324:	d1be      	bne.n	80042a4 <_printf_float+0x100>
 8004326:	2b00      	cmp	r3, #0
 8004328:	d1bc      	bne.n	80042a4 <_printf_float+0x100>
 800432a:	2301      	movs	r3, #1
 800432c:	e7b9      	b.n	80042a2 <_printf_float+0xfe>
 800432e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8004332:	d118      	bne.n	8004366 <_printf_float+0x1c2>
 8004334:	2900      	cmp	r1, #0
 8004336:	6863      	ldr	r3, [r4, #4]
 8004338:	dd0b      	ble.n	8004352 <_printf_float+0x1ae>
 800433a:	6121      	str	r1, [r4, #16]
 800433c:	b913      	cbnz	r3, 8004344 <_printf_float+0x1a0>
 800433e:	6822      	ldr	r2, [r4, #0]
 8004340:	07d0      	lsls	r0, r2, #31
 8004342:	d502      	bpl.n	800434a <_printf_float+0x1a6>
 8004344:	3301      	adds	r3, #1
 8004346:	440b      	add	r3, r1
 8004348:	6123      	str	r3, [r4, #16]
 800434a:	65a1      	str	r1, [r4, #88]	; 0x58
 800434c:	f04f 0900 	mov.w	r9, #0
 8004350:	e7de      	b.n	8004310 <_printf_float+0x16c>
 8004352:	b913      	cbnz	r3, 800435a <_printf_float+0x1b6>
 8004354:	6822      	ldr	r2, [r4, #0]
 8004356:	07d2      	lsls	r2, r2, #31
 8004358:	d501      	bpl.n	800435e <_printf_float+0x1ba>
 800435a:	3302      	adds	r3, #2
 800435c:	e7f4      	b.n	8004348 <_printf_float+0x1a4>
 800435e:	2301      	movs	r3, #1
 8004360:	e7f2      	b.n	8004348 <_printf_float+0x1a4>
 8004362:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8004366:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004368:	4299      	cmp	r1, r3
 800436a:	db05      	blt.n	8004378 <_printf_float+0x1d4>
 800436c:	6823      	ldr	r3, [r4, #0]
 800436e:	6121      	str	r1, [r4, #16]
 8004370:	07d8      	lsls	r0, r3, #31
 8004372:	d5ea      	bpl.n	800434a <_printf_float+0x1a6>
 8004374:	1c4b      	adds	r3, r1, #1
 8004376:	e7e7      	b.n	8004348 <_printf_float+0x1a4>
 8004378:	2900      	cmp	r1, #0
 800437a:	bfd4      	ite	le
 800437c:	f1c1 0202 	rsble	r2, r1, #2
 8004380:	2201      	movgt	r2, #1
 8004382:	4413      	add	r3, r2
 8004384:	e7e0      	b.n	8004348 <_printf_float+0x1a4>
 8004386:	6823      	ldr	r3, [r4, #0]
 8004388:	055a      	lsls	r2, r3, #21
 800438a:	d407      	bmi.n	800439c <_printf_float+0x1f8>
 800438c:	6923      	ldr	r3, [r4, #16]
 800438e:	4642      	mov	r2, r8
 8004390:	4631      	mov	r1, r6
 8004392:	4628      	mov	r0, r5
 8004394:	47b8      	blx	r7
 8004396:	3001      	adds	r0, #1
 8004398:	d12c      	bne.n	80043f4 <_printf_float+0x250>
 800439a:	e764      	b.n	8004266 <_printf_float+0xc2>
 800439c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80043a0:	f240 80e0 	bls.w	8004564 <_printf_float+0x3c0>
 80043a4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80043a8:	2200      	movs	r2, #0
 80043aa:	2300      	movs	r3, #0
 80043ac:	f7fc fb8c 	bl	8000ac8 <__aeabi_dcmpeq>
 80043b0:	2800      	cmp	r0, #0
 80043b2:	d034      	beq.n	800441e <_printf_float+0x27a>
 80043b4:	4a37      	ldr	r2, [pc, #220]	; (8004494 <_printf_float+0x2f0>)
 80043b6:	2301      	movs	r3, #1
 80043b8:	4631      	mov	r1, r6
 80043ba:	4628      	mov	r0, r5
 80043bc:	47b8      	blx	r7
 80043be:	3001      	adds	r0, #1
 80043c0:	f43f af51 	beq.w	8004266 <_printf_float+0xc2>
 80043c4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80043c8:	429a      	cmp	r2, r3
 80043ca:	db02      	blt.n	80043d2 <_printf_float+0x22e>
 80043cc:	6823      	ldr	r3, [r4, #0]
 80043ce:	07d8      	lsls	r0, r3, #31
 80043d0:	d510      	bpl.n	80043f4 <_printf_float+0x250>
 80043d2:	ee18 3a10 	vmov	r3, s16
 80043d6:	4652      	mov	r2, sl
 80043d8:	4631      	mov	r1, r6
 80043da:	4628      	mov	r0, r5
 80043dc:	47b8      	blx	r7
 80043de:	3001      	adds	r0, #1
 80043e0:	f43f af41 	beq.w	8004266 <_printf_float+0xc2>
 80043e4:	f04f 0800 	mov.w	r8, #0
 80043e8:	f104 091a 	add.w	r9, r4, #26
 80043ec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80043ee:	3b01      	subs	r3, #1
 80043f0:	4543      	cmp	r3, r8
 80043f2:	dc09      	bgt.n	8004408 <_printf_float+0x264>
 80043f4:	6823      	ldr	r3, [r4, #0]
 80043f6:	079b      	lsls	r3, r3, #30
 80043f8:	f100 8105 	bmi.w	8004606 <_printf_float+0x462>
 80043fc:	68e0      	ldr	r0, [r4, #12]
 80043fe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004400:	4298      	cmp	r0, r3
 8004402:	bfb8      	it	lt
 8004404:	4618      	movlt	r0, r3
 8004406:	e730      	b.n	800426a <_printf_float+0xc6>
 8004408:	2301      	movs	r3, #1
 800440a:	464a      	mov	r2, r9
 800440c:	4631      	mov	r1, r6
 800440e:	4628      	mov	r0, r5
 8004410:	47b8      	blx	r7
 8004412:	3001      	adds	r0, #1
 8004414:	f43f af27 	beq.w	8004266 <_printf_float+0xc2>
 8004418:	f108 0801 	add.w	r8, r8, #1
 800441c:	e7e6      	b.n	80043ec <_printf_float+0x248>
 800441e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004420:	2b00      	cmp	r3, #0
 8004422:	dc39      	bgt.n	8004498 <_printf_float+0x2f4>
 8004424:	4a1b      	ldr	r2, [pc, #108]	; (8004494 <_printf_float+0x2f0>)
 8004426:	2301      	movs	r3, #1
 8004428:	4631      	mov	r1, r6
 800442a:	4628      	mov	r0, r5
 800442c:	47b8      	blx	r7
 800442e:	3001      	adds	r0, #1
 8004430:	f43f af19 	beq.w	8004266 <_printf_float+0xc2>
 8004434:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004438:	4313      	orrs	r3, r2
 800443a:	d102      	bne.n	8004442 <_printf_float+0x29e>
 800443c:	6823      	ldr	r3, [r4, #0]
 800443e:	07d9      	lsls	r1, r3, #31
 8004440:	d5d8      	bpl.n	80043f4 <_printf_float+0x250>
 8004442:	ee18 3a10 	vmov	r3, s16
 8004446:	4652      	mov	r2, sl
 8004448:	4631      	mov	r1, r6
 800444a:	4628      	mov	r0, r5
 800444c:	47b8      	blx	r7
 800444e:	3001      	adds	r0, #1
 8004450:	f43f af09 	beq.w	8004266 <_printf_float+0xc2>
 8004454:	f04f 0900 	mov.w	r9, #0
 8004458:	f104 0a1a 	add.w	sl, r4, #26
 800445c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800445e:	425b      	negs	r3, r3
 8004460:	454b      	cmp	r3, r9
 8004462:	dc01      	bgt.n	8004468 <_printf_float+0x2c4>
 8004464:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004466:	e792      	b.n	800438e <_printf_float+0x1ea>
 8004468:	2301      	movs	r3, #1
 800446a:	4652      	mov	r2, sl
 800446c:	4631      	mov	r1, r6
 800446e:	4628      	mov	r0, r5
 8004470:	47b8      	blx	r7
 8004472:	3001      	adds	r0, #1
 8004474:	f43f aef7 	beq.w	8004266 <_printf_float+0xc2>
 8004478:	f109 0901 	add.w	r9, r9, #1
 800447c:	e7ee      	b.n	800445c <_printf_float+0x2b8>
 800447e:	bf00      	nop
 8004480:	7fefffff 	.word	0x7fefffff
 8004484:	08006c84 	.word	0x08006c84
 8004488:	08006c88 	.word	0x08006c88
 800448c:	08006c90 	.word	0x08006c90
 8004490:	08006c8c 	.word	0x08006c8c
 8004494:	08006c94 	.word	0x08006c94
 8004498:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800449a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800449c:	429a      	cmp	r2, r3
 800449e:	bfa8      	it	ge
 80044a0:	461a      	movge	r2, r3
 80044a2:	2a00      	cmp	r2, #0
 80044a4:	4691      	mov	r9, r2
 80044a6:	dc37      	bgt.n	8004518 <_printf_float+0x374>
 80044a8:	f04f 0b00 	mov.w	fp, #0
 80044ac:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80044b0:	f104 021a 	add.w	r2, r4, #26
 80044b4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80044b6:	9305      	str	r3, [sp, #20]
 80044b8:	eba3 0309 	sub.w	r3, r3, r9
 80044bc:	455b      	cmp	r3, fp
 80044be:	dc33      	bgt.n	8004528 <_printf_float+0x384>
 80044c0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80044c4:	429a      	cmp	r2, r3
 80044c6:	db3b      	blt.n	8004540 <_printf_float+0x39c>
 80044c8:	6823      	ldr	r3, [r4, #0]
 80044ca:	07da      	lsls	r2, r3, #31
 80044cc:	d438      	bmi.n	8004540 <_printf_float+0x39c>
 80044ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80044d0:	9a05      	ldr	r2, [sp, #20]
 80044d2:	9909      	ldr	r1, [sp, #36]	; 0x24
 80044d4:	1a9a      	subs	r2, r3, r2
 80044d6:	eba3 0901 	sub.w	r9, r3, r1
 80044da:	4591      	cmp	r9, r2
 80044dc:	bfa8      	it	ge
 80044de:	4691      	movge	r9, r2
 80044e0:	f1b9 0f00 	cmp.w	r9, #0
 80044e4:	dc35      	bgt.n	8004552 <_printf_float+0x3ae>
 80044e6:	f04f 0800 	mov.w	r8, #0
 80044ea:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80044ee:	f104 0a1a 	add.w	sl, r4, #26
 80044f2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80044f6:	1a9b      	subs	r3, r3, r2
 80044f8:	eba3 0309 	sub.w	r3, r3, r9
 80044fc:	4543      	cmp	r3, r8
 80044fe:	f77f af79 	ble.w	80043f4 <_printf_float+0x250>
 8004502:	2301      	movs	r3, #1
 8004504:	4652      	mov	r2, sl
 8004506:	4631      	mov	r1, r6
 8004508:	4628      	mov	r0, r5
 800450a:	47b8      	blx	r7
 800450c:	3001      	adds	r0, #1
 800450e:	f43f aeaa 	beq.w	8004266 <_printf_float+0xc2>
 8004512:	f108 0801 	add.w	r8, r8, #1
 8004516:	e7ec      	b.n	80044f2 <_printf_float+0x34e>
 8004518:	4613      	mov	r3, r2
 800451a:	4631      	mov	r1, r6
 800451c:	4642      	mov	r2, r8
 800451e:	4628      	mov	r0, r5
 8004520:	47b8      	blx	r7
 8004522:	3001      	adds	r0, #1
 8004524:	d1c0      	bne.n	80044a8 <_printf_float+0x304>
 8004526:	e69e      	b.n	8004266 <_printf_float+0xc2>
 8004528:	2301      	movs	r3, #1
 800452a:	4631      	mov	r1, r6
 800452c:	4628      	mov	r0, r5
 800452e:	9205      	str	r2, [sp, #20]
 8004530:	47b8      	blx	r7
 8004532:	3001      	adds	r0, #1
 8004534:	f43f ae97 	beq.w	8004266 <_printf_float+0xc2>
 8004538:	9a05      	ldr	r2, [sp, #20]
 800453a:	f10b 0b01 	add.w	fp, fp, #1
 800453e:	e7b9      	b.n	80044b4 <_printf_float+0x310>
 8004540:	ee18 3a10 	vmov	r3, s16
 8004544:	4652      	mov	r2, sl
 8004546:	4631      	mov	r1, r6
 8004548:	4628      	mov	r0, r5
 800454a:	47b8      	blx	r7
 800454c:	3001      	adds	r0, #1
 800454e:	d1be      	bne.n	80044ce <_printf_float+0x32a>
 8004550:	e689      	b.n	8004266 <_printf_float+0xc2>
 8004552:	9a05      	ldr	r2, [sp, #20]
 8004554:	464b      	mov	r3, r9
 8004556:	4442      	add	r2, r8
 8004558:	4631      	mov	r1, r6
 800455a:	4628      	mov	r0, r5
 800455c:	47b8      	blx	r7
 800455e:	3001      	adds	r0, #1
 8004560:	d1c1      	bne.n	80044e6 <_printf_float+0x342>
 8004562:	e680      	b.n	8004266 <_printf_float+0xc2>
 8004564:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004566:	2a01      	cmp	r2, #1
 8004568:	dc01      	bgt.n	800456e <_printf_float+0x3ca>
 800456a:	07db      	lsls	r3, r3, #31
 800456c:	d538      	bpl.n	80045e0 <_printf_float+0x43c>
 800456e:	2301      	movs	r3, #1
 8004570:	4642      	mov	r2, r8
 8004572:	4631      	mov	r1, r6
 8004574:	4628      	mov	r0, r5
 8004576:	47b8      	blx	r7
 8004578:	3001      	adds	r0, #1
 800457a:	f43f ae74 	beq.w	8004266 <_printf_float+0xc2>
 800457e:	ee18 3a10 	vmov	r3, s16
 8004582:	4652      	mov	r2, sl
 8004584:	4631      	mov	r1, r6
 8004586:	4628      	mov	r0, r5
 8004588:	47b8      	blx	r7
 800458a:	3001      	adds	r0, #1
 800458c:	f43f ae6b 	beq.w	8004266 <_printf_float+0xc2>
 8004590:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004594:	2200      	movs	r2, #0
 8004596:	2300      	movs	r3, #0
 8004598:	f7fc fa96 	bl	8000ac8 <__aeabi_dcmpeq>
 800459c:	b9d8      	cbnz	r0, 80045d6 <_printf_float+0x432>
 800459e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80045a0:	f108 0201 	add.w	r2, r8, #1
 80045a4:	3b01      	subs	r3, #1
 80045a6:	4631      	mov	r1, r6
 80045a8:	4628      	mov	r0, r5
 80045aa:	47b8      	blx	r7
 80045ac:	3001      	adds	r0, #1
 80045ae:	d10e      	bne.n	80045ce <_printf_float+0x42a>
 80045b0:	e659      	b.n	8004266 <_printf_float+0xc2>
 80045b2:	2301      	movs	r3, #1
 80045b4:	4652      	mov	r2, sl
 80045b6:	4631      	mov	r1, r6
 80045b8:	4628      	mov	r0, r5
 80045ba:	47b8      	blx	r7
 80045bc:	3001      	adds	r0, #1
 80045be:	f43f ae52 	beq.w	8004266 <_printf_float+0xc2>
 80045c2:	f108 0801 	add.w	r8, r8, #1
 80045c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80045c8:	3b01      	subs	r3, #1
 80045ca:	4543      	cmp	r3, r8
 80045cc:	dcf1      	bgt.n	80045b2 <_printf_float+0x40e>
 80045ce:	464b      	mov	r3, r9
 80045d0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80045d4:	e6dc      	b.n	8004390 <_printf_float+0x1ec>
 80045d6:	f04f 0800 	mov.w	r8, #0
 80045da:	f104 0a1a 	add.w	sl, r4, #26
 80045de:	e7f2      	b.n	80045c6 <_printf_float+0x422>
 80045e0:	2301      	movs	r3, #1
 80045e2:	4642      	mov	r2, r8
 80045e4:	e7df      	b.n	80045a6 <_printf_float+0x402>
 80045e6:	2301      	movs	r3, #1
 80045e8:	464a      	mov	r2, r9
 80045ea:	4631      	mov	r1, r6
 80045ec:	4628      	mov	r0, r5
 80045ee:	47b8      	blx	r7
 80045f0:	3001      	adds	r0, #1
 80045f2:	f43f ae38 	beq.w	8004266 <_printf_float+0xc2>
 80045f6:	f108 0801 	add.w	r8, r8, #1
 80045fa:	68e3      	ldr	r3, [r4, #12]
 80045fc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80045fe:	1a5b      	subs	r3, r3, r1
 8004600:	4543      	cmp	r3, r8
 8004602:	dcf0      	bgt.n	80045e6 <_printf_float+0x442>
 8004604:	e6fa      	b.n	80043fc <_printf_float+0x258>
 8004606:	f04f 0800 	mov.w	r8, #0
 800460a:	f104 0919 	add.w	r9, r4, #25
 800460e:	e7f4      	b.n	80045fa <_printf_float+0x456>

08004610 <_printf_common>:
 8004610:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004614:	4616      	mov	r6, r2
 8004616:	4699      	mov	r9, r3
 8004618:	688a      	ldr	r2, [r1, #8]
 800461a:	690b      	ldr	r3, [r1, #16]
 800461c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004620:	4293      	cmp	r3, r2
 8004622:	bfb8      	it	lt
 8004624:	4613      	movlt	r3, r2
 8004626:	6033      	str	r3, [r6, #0]
 8004628:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800462c:	4607      	mov	r7, r0
 800462e:	460c      	mov	r4, r1
 8004630:	b10a      	cbz	r2, 8004636 <_printf_common+0x26>
 8004632:	3301      	adds	r3, #1
 8004634:	6033      	str	r3, [r6, #0]
 8004636:	6823      	ldr	r3, [r4, #0]
 8004638:	0699      	lsls	r1, r3, #26
 800463a:	bf42      	ittt	mi
 800463c:	6833      	ldrmi	r3, [r6, #0]
 800463e:	3302      	addmi	r3, #2
 8004640:	6033      	strmi	r3, [r6, #0]
 8004642:	6825      	ldr	r5, [r4, #0]
 8004644:	f015 0506 	ands.w	r5, r5, #6
 8004648:	d106      	bne.n	8004658 <_printf_common+0x48>
 800464a:	f104 0a19 	add.w	sl, r4, #25
 800464e:	68e3      	ldr	r3, [r4, #12]
 8004650:	6832      	ldr	r2, [r6, #0]
 8004652:	1a9b      	subs	r3, r3, r2
 8004654:	42ab      	cmp	r3, r5
 8004656:	dc26      	bgt.n	80046a6 <_printf_common+0x96>
 8004658:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800465c:	1e13      	subs	r3, r2, #0
 800465e:	6822      	ldr	r2, [r4, #0]
 8004660:	bf18      	it	ne
 8004662:	2301      	movne	r3, #1
 8004664:	0692      	lsls	r2, r2, #26
 8004666:	d42b      	bmi.n	80046c0 <_printf_common+0xb0>
 8004668:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800466c:	4649      	mov	r1, r9
 800466e:	4638      	mov	r0, r7
 8004670:	47c0      	blx	r8
 8004672:	3001      	adds	r0, #1
 8004674:	d01e      	beq.n	80046b4 <_printf_common+0xa4>
 8004676:	6823      	ldr	r3, [r4, #0]
 8004678:	68e5      	ldr	r5, [r4, #12]
 800467a:	6832      	ldr	r2, [r6, #0]
 800467c:	f003 0306 	and.w	r3, r3, #6
 8004680:	2b04      	cmp	r3, #4
 8004682:	bf08      	it	eq
 8004684:	1aad      	subeq	r5, r5, r2
 8004686:	68a3      	ldr	r3, [r4, #8]
 8004688:	6922      	ldr	r2, [r4, #16]
 800468a:	bf0c      	ite	eq
 800468c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004690:	2500      	movne	r5, #0
 8004692:	4293      	cmp	r3, r2
 8004694:	bfc4      	itt	gt
 8004696:	1a9b      	subgt	r3, r3, r2
 8004698:	18ed      	addgt	r5, r5, r3
 800469a:	2600      	movs	r6, #0
 800469c:	341a      	adds	r4, #26
 800469e:	42b5      	cmp	r5, r6
 80046a0:	d11a      	bne.n	80046d8 <_printf_common+0xc8>
 80046a2:	2000      	movs	r0, #0
 80046a4:	e008      	b.n	80046b8 <_printf_common+0xa8>
 80046a6:	2301      	movs	r3, #1
 80046a8:	4652      	mov	r2, sl
 80046aa:	4649      	mov	r1, r9
 80046ac:	4638      	mov	r0, r7
 80046ae:	47c0      	blx	r8
 80046b0:	3001      	adds	r0, #1
 80046b2:	d103      	bne.n	80046bc <_printf_common+0xac>
 80046b4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80046b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80046bc:	3501      	adds	r5, #1
 80046be:	e7c6      	b.n	800464e <_printf_common+0x3e>
 80046c0:	18e1      	adds	r1, r4, r3
 80046c2:	1c5a      	adds	r2, r3, #1
 80046c4:	2030      	movs	r0, #48	; 0x30
 80046c6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80046ca:	4422      	add	r2, r4
 80046cc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80046d0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80046d4:	3302      	adds	r3, #2
 80046d6:	e7c7      	b.n	8004668 <_printf_common+0x58>
 80046d8:	2301      	movs	r3, #1
 80046da:	4622      	mov	r2, r4
 80046dc:	4649      	mov	r1, r9
 80046de:	4638      	mov	r0, r7
 80046e0:	47c0      	blx	r8
 80046e2:	3001      	adds	r0, #1
 80046e4:	d0e6      	beq.n	80046b4 <_printf_common+0xa4>
 80046e6:	3601      	adds	r6, #1
 80046e8:	e7d9      	b.n	800469e <_printf_common+0x8e>
	...

080046ec <_printf_i>:
 80046ec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80046f0:	7e0f      	ldrb	r7, [r1, #24]
 80046f2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80046f4:	2f78      	cmp	r7, #120	; 0x78
 80046f6:	4691      	mov	r9, r2
 80046f8:	4680      	mov	r8, r0
 80046fa:	460c      	mov	r4, r1
 80046fc:	469a      	mov	sl, r3
 80046fe:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004702:	d807      	bhi.n	8004714 <_printf_i+0x28>
 8004704:	2f62      	cmp	r7, #98	; 0x62
 8004706:	d80a      	bhi.n	800471e <_printf_i+0x32>
 8004708:	2f00      	cmp	r7, #0
 800470a:	f000 80d8 	beq.w	80048be <_printf_i+0x1d2>
 800470e:	2f58      	cmp	r7, #88	; 0x58
 8004710:	f000 80a3 	beq.w	800485a <_printf_i+0x16e>
 8004714:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004718:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800471c:	e03a      	b.n	8004794 <_printf_i+0xa8>
 800471e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004722:	2b15      	cmp	r3, #21
 8004724:	d8f6      	bhi.n	8004714 <_printf_i+0x28>
 8004726:	a101      	add	r1, pc, #4	; (adr r1, 800472c <_printf_i+0x40>)
 8004728:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800472c:	08004785 	.word	0x08004785
 8004730:	08004799 	.word	0x08004799
 8004734:	08004715 	.word	0x08004715
 8004738:	08004715 	.word	0x08004715
 800473c:	08004715 	.word	0x08004715
 8004740:	08004715 	.word	0x08004715
 8004744:	08004799 	.word	0x08004799
 8004748:	08004715 	.word	0x08004715
 800474c:	08004715 	.word	0x08004715
 8004750:	08004715 	.word	0x08004715
 8004754:	08004715 	.word	0x08004715
 8004758:	080048a5 	.word	0x080048a5
 800475c:	080047c9 	.word	0x080047c9
 8004760:	08004887 	.word	0x08004887
 8004764:	08004715 	.word	0x08004715
 8004768:	08004715 	.word	0x08004715
 800476c:	080048c7 	.word	0x080048c7
 8004770:	08004715 	.word	0x08004715
 8004774:	080047c9 	.word	0x080047c9
 8004778:	08004715 	.word	0x08004715
 800477c:	08004715 	.word	0x08004715
 8004780:	0800488f 	.word	0x0800488f
 8004784:	682b      	ldr	r3, [r5, #0]
 8004786:	1d1a      	adds	r2, r3, #4
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	602a      	str	r2, [r5, #0]
 800478c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004790:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004794:	2301      	movs	r3, #1
 8004796:	e0a3      	b.n	80048e0 <_printf_i+0x1f4>
 8004798:	6820      	ldr	r0, [r4, #0]
 800479a:	6829      	ldr	r1, [r5, #0]
 800479c:	0606      	lsls	r6, r0, #24
 800479e:	f101 0304 	add.w	r3, r1, #4
 80047a2:	d50a      	bpl.n	80047ba <_printf_i+0xce>
 80047a4:	680e      	ldr	r6, [r1, #0]
 80047a6:	602b      	str	r3, [r5, #0]
 80047a8:	2e00      	cmp	r6, #0
 80047aa:	da03      	bge.n	80047b4 <_printf_i+0xc8>
 80047ac:	232d      	movs	r3, #45	; 0x2d
 80047ae:	4276      	negs	r6, r6
 80047b0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80047b4:	485e      	ldr	r0, [pc, #376]	; (8004930 <_printf_i+0x244>)
 80047b6:	230a      	movs	r3, #10
 80047b8:	e019      	b.n	80047ee <_printf_i+0x102>
 80047ba:	680e      	ldr	r6, [r1, #0]
 80047bc:	602b      	str	r3, [r5, #0]
 80047be:	f010 0f40 	tst.w	r0, #64	; 0x40
 80047c2:	bf18      	it	ne
 80047c4:	b236      	sxthne	r6, r6
 80047c6:	e7ef      	b.n	80047a8 <_printf_i+0xbc>
 80047c8:	682b      	ldr	r3, [r5, #0]
 80047ca:	6820      	ldr	r0, [r4, #0]
 80047cc:	1d19      	adds	r1, r3, #4
 80047ce:	6029      	str	r1, [r5, #0]
 80047d0:	0601      	lsls	r1, r0, #24
 80047d2:	d501      	bpl.n	80047d8 <_printf_i+0xec>
 80047d4:	681e      	ldr	r6, [r3, #0]
 80047d6:	e002      	b.n	80047de <_printf_i+0xf2>
 80047d8:	0646      	lsls	r6, r0, #25
 80047da:	d5fb      	bpl.n	80047d4 <_printf_i+0xe8>
 80047dc:	881e      	ldrh	r6, [r3, #0]
 80047de:	4854      	ldr	r0, [pc, #336]	; (8004930 <_printf_i+0x244>)
 80047e0:	2f6f      	cmp	r7, #111	; 0x6f
 80047e2:	bf0c      	ite	eq
 80047e4:	2308      	moveq	r3, #8
 80047e6:	230a      	movne	r3, #10
 80047e8:	2100      	movs	r1, #0
 80047ea:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80047ee:	6865      	ldr	r5, [r4, #4]
 80047f0:	60a5      	str	r5, [r4, #8]
 80047f2:	2d00      	cmp	r5, #0
 80047f4:	bfa2      	ittt	ge
 80047f6:	6821      	ldrge	r1, [r4, #0]
 80047f8:	f021 0104 	bicge.w	r1, r1, #4
 80047fc:	6021      	strge	r1, [r4, #0]
 80047fe:	b90e      	cbnz	r6, 8004804 <_printf_i+0x118>
 8004800:	2d00      	cmp	r5, #0
 8004802:	d04d      	beq.n	80048a0 <_printf_i+0x1b4>
 8004804:	4615      	mov	r5, r2
 8004806:	fbb6 f1f3 	udiv	r1, r6, r3
 800480a:	fb03 6711 	mls	r7, r3, r1, r6
 800480e:	5dc7      	ldrb	r7, [r0, r7]
 8004810:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004814:	4637      	mov	r7, r6
 8004816:	42bb      	cmp	r3, r7
 8004818:	460e      	mov	r6, r1
 800481a:	d9f4      	bls.n	8004806 <_printf_i+0x11a>
 800481c:	2b08      	cmp	r3, #8
 800481e:	d10b      	bne.n	8004838 <_printf_i+0x14c>
 8004820:	6823      	ldr	r3, [r4, #0]
 8004822:	07de      	lsls	r6, r3, #31
 8004824:	d508      	bpl.n	8004838 <_printf_i+0x14c>
 8004826:	6923      	ldr	r3, [r4, #16]
 8004828:	6861      	ldr	r1, [r4, #4]
 800482a:	4299      	cmp	r1, r3
 800482c:	bfde      	ittt	le
 800482e:	2330      	movle	r3, #48	; 0x30
 8004830:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004834:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8004838:	1b52      	subs	r2, r2, r5
 800483a:	6122      	str	r2, [r4, #16]
 800483c:	f8cd a000 	str.w	sl, [sp]
 8004840:	464b      	mov	r3, r9
 8004842:	aa03      	add	r2, sp, #12
 8004844:	4621      	mov	r1, r4
 8004846:	4640      	mov	r0, r8
 8004848:	f7ff fee2 	bl	8004610 <_printf_common>
 800484c:	3001      	adds	r0, #1
 800484e:	d14c      	bne.n	80048ea <_printf_i+0x1fe>
 8004850:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004854:	b004      	add	sp, #16
 8004856:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800485a:	4835      	ldr	r0, [pc, #212]	; (8004930 <_printf_i+0x244>)
 800485c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8004860:	6829      	ldr	r1, [r5, #0]
 8004862:	6823      	ldr	r3, [r4, #0]
 8004864:	f851 6b04 	ldr.w	r6, [r1], #4
 8004868:	6029      	str	r1, [r5, #0]
 800486a:	061d      	lsls	r5, r3, #24
 800486c:	d514      	bpl.n	8004898 <_printf_i+0x1ac>
 800486e:	07df      	lsls	r7, r3, #31
 8004870:	bf44      	itt	mi
 8004872:	f043 0320 	orrmi.w	r3, r3, #32
 8004876:	6023      	strmi	r3, [r4, #0]
 8004878:	b91e      	cbnz	r6, 8004882 <_printf_i+0x196>
 800487a:	6823      	ldr	r3, [r4, #0]
 800487c:	f023 0320 	bic.w	r3, r3, #32
 8004880:	6023      	str	r3, [r4, #0]
 8004882:	2310      	movs	r3, #16
 8004884:	e7b0      	b.n	80047e8 <_printf_i+0xfc>
 8004886:	6823      	ldr	r3, [r4, #0]
 8004888:	f043 0320 	orr.w	r3, r3, #32
 800488c:	6023      	str	r3, [r4, #0]
 800488e:	2378      	movs	r3, #120	; 0x78
 8004890:	4828      	ldr	r0, [pc, #160]	; (8004934 <_printf_i+0x248>)
 8004892:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004896:	e7e3      	b.n	8004860 <_printf_i+0x174>
 8004898:	0659      	lsls	r1, r3, #25
 800489a:	bf48      	it	mi
 800489c:	b2b6      	uxthmi	r6, r6
 800489e:	e7e6      	b.n	800486e <_printf_i+0x182>
 80048a0:	4615      	mov	r5, r2
 80048a2:	e7bb      	b.n	800481c <_printf_i+0x130>
 80048a4:	682b      	ldr	r3, [r5, #0]
 80048a6:	6826      	ldr	r6, [r4, #0]
 80048a8:	6961      	ldr	r1, [r4, #20]
 80048aa:	1d18      	adds	r0, r3, #4
 80048ac:	6028      	str	r0, [r5, #0]
 80048ae:	0635      	lsls	r5, r6, #24
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	d501      	bpl.n	80048b8 <_printf_i+0x1cc>
 80048b4:	6019      	str	r1, [r3, #0]
 80048b6:	e002      	b.n	80048be <_printf_i+0x1d2>
 80048b8:	0670      	lsls	r0, r6, #25
 80048ba:	d5fb      	bpl.n	80048b4 <_printf_i+0x1c8>
 80048bc:	8019      	strh	r1, [r3, #0]
 80048be:	2300      	movs	r3, #0
 80048c0:	6123      	str	r3, [r4, #16]
 80048c2:	4615      	mov	r5, r2
 80048c4:	e7ba      	b.n	800483c <_printf_i+0x150>
 80048c6:	682b      	ldr	r3, [r5, #0]
 80048c8:	1d1a      	adds	r2, r3, #4
 80048ca:	602a      	str	r2, [r5, #0]
 80048cc:	681d      	ldr	r5, [r3, #0]
 80048ce:	6862      	ldr	r2, [r4, #4]
 80048d0:	2100      	movs	r1, #0
 80048d2:	4628      	mov	r0, r5
 80048d4:	f7fb fc84 	bl	80001e0 <memchr>
 80048d8:	b108      	cbz	r0, 80048de <_printf_i+0x1f2>
 80048da:	1b40      	subs	r0, r0, r5
 80048dc:	6060      	str	r0, [r4, #4]
 80048de:	6863      	ldr	r3, [r4, #4]
 80048e0:	6123      	str	r3, [r4, #16]
 80048e2:	2300      	movs	r3, #0
 80048e4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80048e8:	e7a8      	b.n	800483c <_printf_i+0x150>
 80048ea:	6923      	ldr	r3, [r4, #16]
 80048ec:	462a      	mov	r2, r5
 80048ee:	4649      	mov	r1, r9
 80048f0:	4640      	mov	r0, r8
 80048f2:	47d0      	blx	sl
 80048f4:	3001      	adds	r0, #1
 80048f6:	d0ab      	beq.n	8004850 <_printf_i+0x164>
 80048f8:	6823      	ldr	r3, [r4, #0]
 80048fa:	079b      	lsls	r3, r3, #30
 80048fc:	d413      	bmi.n	8004926 <_printf_i+0x23a>
 80048fe:	68e0      	ldr	r0, [r4, #12]
 8004900:	9b03      	ldr	r3, [sp, #12]
 8004902:	4298      	cmp	r0, r3
 8004904:	bfb8      	it	lt
 8004906:	4618      	movlt	r0, r3
 8004908:	e7a4      	b.n	8004854 <_printf_i+0x168>
 800490a:	2301      	movs	r3, #1
 800490c:	4632      	mov	r2, r6
 800490e:	4649      	mov	r1, r9
 8004910:	4640      	mov	r0, r8
 8004912:	47d0      	blx	sl
 8004914:	3001      	adds	r0, #1
 8004916:	d09b      	beq.n	8004850 <_printf_i+0x164>
 8004918:	3501      	adds	r5, #1
 800491a:	68e3      	ldr	r3, [r4, #12]
 800491c:	9903      	ldr	r1, [sp, #12]
 800491e:	1a5b      	subs	r3, r3, r1
 8004920:	42ab      	cmp	r3, r5
 8004922:	dcf2      	bgt.n	800490a <_printf_i+0x21e>
 8004924:	e7eb      	b.n	80048fe <_printf_i+0x212>
 8004926:	2500      	movs	r5, #0
 8004928:	f104 0619 	add.w	r6, r4, #25
 800492c:	e7f5      	b.n	800491a <_printf_i+0x22e>
 800492e:	bf00      	nop
 8004930:	08006c96 	.word	0x08006c96
 8004934:	08006ca7 	.word	0x08006ca7

08004938 <setvbuf>:
 8004938:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800493c:	461d      	mov	r5, r3
 800493e:	4b5d      	ldr	r3, [pc, #372]	; (8004ab4 <setvbuf+0x17c>)
 8004940:	681f      	ldr	r7, [r3, #0]
 8004942:	4604      	mov	r4, r0
 8004944:	460e      	mov	r6, r1
 8004946:	4690      	mov	r8, r2
 8004948:	b127      	cbz	r7, 8004954 <setvbuf+0x1c>
 800494a:	69bb      	ldr	r3, [r7, #24]
 800494c:	b913      	cbnz	r3, 8004954 <setvbuf+0x1c>
 800494e:	4638      	mov	r0, r7
 8004950:	f001 f84e 	bl	80059f0 <__sinit>
 8004954:	4b58      	ldr	r3, [pc, #352]	; (8004ab8 <setvbuf+0x180>)
 8004956:	429c      	cmp	r4, r3
 8004958:	d167      	bne.n	8004a2a <setvbuf+0xf2>
 800495a:	687c      	ldr	r4, [r7, #4]
 800495c:	f1b8 0f02 	cmp.w	r8, #2
 8004960:	d006      	beq.n	8004970 <setvbuf+0x38>
 8004962:	f1b8 0f01 	cmp.w	r8, #1
 8004966:	f200 809f 	bhi.w	8004aa8 <setvbuf+0x170>
 800496a:	2d00      	cmp	r5, #0
 800496c:	f2c0 809c 	blt.w	8004aa8 <setvbuf+0x170>
 8004970:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004972:	07db      	lsls	r3, r3, #31
 8004974:	d405      	bmi.n	8004982 <setvbuf+0x4a>
 8004976:	89a3      	ldrh	r3, [r4, #12]
 8004978:	0598      	lsls	r0, r3, #22
 800497a:	d402      	bmi.n	8004982 <setvbuf+0x4a>
 800497c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800497e:	f001 f8da 	bl	8005b36 <__retarget_lock_acquire_recursive>
 8004982:	4621      	mov	r1, r4
 8004984:	4638      	mov	r0, r7
 8004986:	f000 ff9f 	bl	80058c8 <_fflush_r>
 800498a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800498c:	b141      	cbz	r1, 80049a0 <setvbuf+0x68>
 800498e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004992:	4299      	cmp	r1, r3
 8004994:	d002      	beq.n	800499c <setvbuf+0x64>
 8004996:	4638      	mov	r0, r7
 8004998:	f001 fce4 	bl	8006364 <_free_r>
 800499c:	2300      	movs	r3, #0
 800499e:	6363      	str	r3, [r4, #52]	; 0x34
 80049a0:	2300      	movs	r3, #0
 80049a2:	61a3      	str	r3, [r4, #24]
 80049a4:	6063      	str	r3, [r4, #4]
 80049a6:	89a3      	ldrh	r3, [r4, #12]
 80049a8:	0619      	lsls	r1, r3, #24
 80049aa:	d503      	bpl.n	80049b4 <setvbuf+0x7c>
 80049ac:	6921      	ldr	r1, [r4, #16]
 80049ae:	4638      	mov	r0, r7
 80049b0:	f001 fcd8 	bl	8006364 <_free_r>
 80049b4:	89a3      	ldrh	r3, [r4, #12]
 80049b6:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 80049ba:	f023 0303 	bic.w	r3, r3, #3
 80049be:	f1b8 0f02 	cmp.w	r8, #2
 80049c2:	81a3      	strh	r3, [r4, #12]
 80049c4:	d06c      	beq.n	8004aa0 <setvbuf+0x168>
 80049c6:	ab01      	add	r3, sp, #4
 80049c8:	466a      	mov	r2, sp
 80049ca:	4621      	mov	r1, r4
 80049cc:	4638      	mov	r0, r7
 80049ce:	f001 f8b4 	bl	8005b3a <__swhatbuf_r>
 80049d2:	89a3      	ldrh	r3, [r4, #12]
 80049d4:	4318      	orrs	r0, r3
 80049d6:	81a0      	strh	r0, [r4, #12]
 80049d8:	2d00      	cmp	r5, #0
 80049da:	d130      	bne.n	8004a3e <setvbuf+0x106>
 80049dc:	9d00      	ldr	r5, [sp, #0]
 80049de:	4628      	mov	r0, r5
 80049e0:	f001 f910 	bl	8005c04 <malloc>
 80049e4:	4606      	mov	r6, r0
 80049e6:	2800      	cmp	r0, #0
 80049e8:	d155      	bne.n	8004a96 <setvbuf+0x15e>
 80049ea:	f8dd 9000 	ldr.w	r9, [sp]
 80049ee:	45a9      	cmp	r9, r5
 80049f0:	d14a      	bne.n	8004a88 <setvbuf+0x150>
 80049f2:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80049f6:	2200      	movs	r2, #0
 80049f8:	60a2      	str	r2, [r4, #8]
 80049fa:	f104 0247 	add.w	r2, r4, #71	; 0x47
 80049fe:	6022      	str	r2, [r4, #0]
 8004a00:	6122      	str	r2, [r4, #16]
 8004a02:	2201      	movs	r2, #1
 8004a04:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004a08:	6162      	str	r2, [r4, #20]
 8004a0a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004a0c:	f043 0302 	orr.w	r3, r3, #2
 8004a10:	07d2      	lsls	r2, r2, #31
 8004a12:	81a3      	strh	r3, [r4, #12]
 8004a14:	d405      	bmi.n	8004a22 <setvbuf+0xea>
 8004a16:	f413 7f00 	tst.w	r3, #512	; 0x200
 8004a1a:	d102      	bne.n	8004a22 <setvbuf+0xea>
 8004a1c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004a1e:	f001 f88b 	bl	8005b38 <__retarget_lock_release_recursive>
 8004a22:	4628      	mov	r0, r5
 8004a24:	b003      	add	sp, #12
 8004a26:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004a2a:	4b24      	ldr	r3, [pc, #144]	; (8004abc <setvbuf+0x184>)
 8004a2c:	429c      	cmp	r4, r3
 8004a2e:	d101      	bne.n	8004a34 <setvbuf+0xfc>
 8004a30:	68bc      	ldr	r4, [r7, #8]
 8004a32:	e793      	b.n	800495c <setvbuf+0x24>
 8004a34:	4b22      	ldr	r3, [pc, #136]	; (8004ac0 <setvbuf+0x188>)
 8004a36:	429c      	cmp	r4, r3
 8004a38:	bf08      	it	eq
 8004a3a:	68fc      	ldreq	r4, [r7, #12]
 8004a3c:	e78e      	b.n	800495c <setvbuf+0x24>
 8004a3e:	2e00      	cmp	r6, #0
 8004a40:	d0cd      	beq.n	80049de <setvbuf+0xa6>
 8004a42:	69bb      	ldr	r3, [r7, #24]
 8004a44:	b913      	cbnz	r3, 8004a4c <setvbuf+0x114>
 8004a46:	4638      	mov	r0, r7
 8004a48:	f000 ffd2 	bl	80059f0 <__sinit>
 8004a4c:	f1b8 0f01 	cmp.w	r8, #1
 8004a50:	bf08      	it	eq
 8004a52:	89a3      	ldrheq	r3, [r4, #12]
 8004a54:	6026      	str	r6, [r4, #0]
 8004a56:	bf04      	itt	eq
 8004a58:	f043 0301 	orreq.w	r3, r3, #1
 8004a5c:	81a3      	strheq	r3, [r4, #12]
 8004a5e:	89a2      	ldrh	r2, [r4, #12]
 8004a60:	f012 0308 	ands.w	r3, r2, #8
 8004a64:	e9c4 6504 	strd	r6, r5, [r4, #16]
 8004a68:	d01c      	beq.n	8004aa4 <setvbuf+0x16c>
 8004a6a:	07d3      	lsls	r3, r2, #31
 8004a6c:	bf41      	itttt	mi
 8004a6e:	2300      	movmi	r3, #0
 8004a70:	426d      	negmi	r5, r5
 8004a72:	60a3      	strmi	r3, [r4, #8]
 8004a74:	61a5      	strmi	r5, [r4, #24]
 8004a76:	bf58      	it	pl
 8004a78:	60a5      	strpl	r5, [r4, #8]
 8004a7a:	6e65      	ldr	r5, [r4, #100]	; 0x64
 8004a7c:	f015 0501 	ands.w	r5, r5, #1
 8004a80:	d115      	bne.n	8004aae <setvbuf+0x176>
 8004a82:	f412 7f00 	tst.w	r2, #512	; 0x200
 8004a86:	e7c8      	b.n	8004a1a <setvbuf+0xe2>
 8004a88:	4648      	mov	r0, r9
 8004a8a:	f001 f8bb 	bl	8005c04 <malloc>
 8004a8e:	4606      	mov	r6, r0
 8004a90:	2800      	cmp	r0, #0
 8004a92:	d0ae      	beq.n	80049f2 <setvbuf+0xba>
 8004a94:	464d      	mov	r5, r9
 8004a96:	89a3      	ldrh	r3, [r4, #12]
 8004a98:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a9c:	81a3      	strh	r3, [r4, #12]
 8004a9e:	e7d0      	b.n	8004a42 <setvbuf+0x10a>
 8004aa0:	2500      	movs	r5, #0
 8004aa2:	e7a8      	b.n	80049f6 <setvbuf+0xbe>
 8004aa4:	60a3      	str	r3, [r4, #8]
 8004aa6:	e7e8      	b.n	8004a7a <setvbuf+0x142>
 8004aa8:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8004aac:	e7b9      	b.n	8004a22 <setvbuf+0xea>
 8004aae:	2500      	movs	r5, #0
 8004ab0:	e7b7      	b.n	8004a22 <setvbuf+0xea>
 8004ab2:	bf00      	nop
 8004ab4:	2000000c 	.word	0x2000000c
 8004ab8:	08006d68 	.word	0x08006d68
 8004abc:	08006d88 	.word	0x08006d88
 8004ac0:	08006d48 	.word	0x08006d48

08004ac4 <quorem>:
 8004ac4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ac8:	6903      	ldr	r3, [r0, #16]
 8004aca:	690c      	ldr	r4, [r1, #16]
 8004acc:	42a3      	cmp	r3, r4
 8004ace:	4607      	mov	r7, r0
 8004ad0:	f2c0 8081 	blt.w	8004bd6 <quorem+0x112>
 8004ad4:	3c01      	subs	r4, #1
 8004ad6:	f101 0814 	add.w	r8, r1, #20
 8004ada:	f100 0514 	add.w	r5, r0, #20
 8004ade:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004ae2:	9301      	str	r3, [sp, #4]
 8004ae4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8004ae8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004aec:	3301      	adds	r3, #1
 8004aee:	429a      	cmp	r2, r3
 8004af0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8004af4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8004af8:	fbb2 f6f3 	udiv	r6, r2, r3
 8004afc:	d331      	bcc.n	8004b62 <quorem+0x9e>
 8004afe:	f04f 0e00 	mov.w	lr, #0
 8004b02:	4640      	mov	r0, r8
 8004b04:	46ac      	mov	ip, r5
 8004b06:	46f2      	mov	sl, lr
 8004b08:	f850 2b04 	ldr.w	r2, [r0], #4
 8004b0c:	b293      	uxth	r3, r2
 8004b0e:	fb06 e303 	mla	r3, r6, r3, lr
 8004b12:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8004b16:	b29b      	uxth	r3, r3
 8004b18:	ebaa 0303 	sub.w	r3, sl, r3
 8004b1c:	f8dc a000 	ldr.w	sl, [ip]
 8004b20:	0c12      	lsrs	r2, r2, #16
 8004b22:	fa13 f38a 	uxtah	r3, r3, sl
 8004b26:	fb06 e202 	mla	r2, r6, r2, lr
 8004b2a:	9300      	str	r3, [sp, #0]
 8004b2c:	9b00      	ldr	r3, [sp, #0]
 8004b2e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8004b32:	b292      	uxth	r2, r2
 8004b34:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8004b38:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004b3c:	f8bd 3000 	ldrh.w	r3, [sp]
 8004b40:	4581      	cmp	r9, r0
 8004b42:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004b46:	f84c 3b04 	str.w	r3, [ip], #4
 8004b4a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8004b4e:	d2db      	bcs.n	8004b08 <quorem+0x44>
 8004b50:	f855 300b 	ldr.w	r3, [r5, fp]
 8004b54:	b92b      	cbnz	r3, 8004b62 <quorem+0x9e>
 8004b56:	9b01      	ldr	r3, [sp, #4]
 8004b58:	3b04      	subs	r3, #4
 8004b5a:	429d      	cmp	r5, r3
 8004b5c:	461a      	mov	r2, r3
 8004b5e:	d32e      	bcc.n	8004bbe <quorem+0xfa>
 8004b60:	613c      	str	r4, [r7, #16]
 8004b62:	4638      	mov	r0, r7
 8004b64:	f001 fae6 	bl	8006134 <__mcmp>
 8004b68:	2800      	cmp	r0, #0
 8004b6a:	db24      	blt.n	8004bb6 <quorem+0xf2>
 8004b6c:	3601      	adds	r6, #1
 8004b6e:	4628      	mov	r0, r5
 8004b70:	f04f 0c00 	mov.w	ip, #0
 8004b74:	f858 2b04 	ldr.w	r2, [r8], #4
 8004b78:	f8d0 e000 	ldr.w	lr, [r0]
 8004b7c:	b293      	uxth	r3, r2
 8004b7e:	ebac 0303 	sub.w	r3, ip, r3
 8004b82:	0c12      	lsrs	r2, r2, #16
 8004b84:	fa13 f38e 	uxtah	r3, r3, lr
 8004b88:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8004b8c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004b90:	b29b      	uxth	r3, r3
 8004b92:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004b96:	45c1      	cmp	r9, r8
 8004b98:	f840 3b04 	str.w	r3, [r0], #4
 8004b9c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8004ba0:	d2e8      	bcs.n	8004b74 <quorem+0xb0>
 8004ba2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004ba6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004baa:	b922      	cbnz	r2, 8004bb6 <quorem+0xf2>
 8004bac:	3b04      	subs	r3, #4
 8004bae:	429d      	cmp	r5, r3
 8004bb0:	461a      	mov	r2, r3
 8004bb2:	d30a      	bcc.n	8004bca <quorem+0x106>
 8004bb4:	613c      	str	r4, [r7, #16]
 8004bb6:	4630      	mov	r0, r6
 8004bb8:	b003      	add	sp, #12
 8004bba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004bbe:	6812      	ldr	r2, [r2, #0]
 8004bc0:	3b04      	subs	r3, #4
 8004bc2:	2a00      	cmp	r2, #0
 8004bc4:	d1cc      	bne.n	8004b60 <quorem+0x9c>
 8004bc6:	3c01      	subs	r4, #1
 8004bc8:	e7c7      	b.n	8004b5a <quorem+0x96>
 8004bca:	6812      	ldr	r2, [r2, #0]
 8004bcc:	3b04      	subs	r3, #4
 8004bce:	2a00      	cmp	r2, #0
 8004bd0:	d1f0      	bne.n	8004bb4 <quorem+0xf0>
 8004bd2:	3c01      	subs	r4, #1
 8004bd4:	e7eb      	b.n	8004bae <quorem+0xea>
 8004bd6:	2000      	movs	r0, #0
 8004bd8:	e7ee      	b.n	8004bb8 <quorem+0xf4>
 8004bda:	0000      	movs	r0, r0
 8004bdc:	0000      	movs	r0, r0
	...

08004be0 <_dtoa_r>:
 8004be0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004be4:	ed2d 8b04 	vpush	{d8-d9}
 8004be8:	ec57 6b10 	vmov	r6, r7, d0
 8004bec:	b093      	sub	sp, #76	; 0x4c
 8004bee:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8004bf0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8004bf4:	9106      	str	r1, [sp, #24]
 8004bf6:	ee10 aa10 	vmov	sl, s0
 8004bfa:	4604      	mov	r4, r0
 8004bfc:	9209      	str	r2, [sp, #36]	; 0x24
 8004bfe:	930c      	str	r3, [sp, #48]	; 0x30
 8004c00:	46bb      	mov	fp, r7
 8004c02:	b975      	cbnz	r5, 8004c22 <_dtoa_r+0x42>
 8004c04:	2010      	movs	r0, #16
 8004c06:	f000 fffd 	bl	8005c04 <malloc>
 8004c0a:	4602      	mov	r2, r0
 8004c0c:	6260      	str	r0, [r4, #36]	; 0x24
 8004c0e:	b920      	cbnz	r0, 8004c1a <_dtoa_r+0x3a>
 8004c10:	4ba7      	ldr	r3, [pc, #668]	; (8004eb0 <_dtoa_r+0x2d0>)
 8004c12:	21ea      	movs	r1, #234	; 0xea
 8004c14:	48a7      	ldr	r0, [pc, #668]	; (8004eb4 <_dtoa_r+0x2d4>)
 8004c16:	f001 fceb 	bl	80065f0 <__assert_func>
 8004c1a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8004c1e:	6005      	str	r5, [r0, #0]
 8004c20:	60c5      	str	r5, [r0, #12]
 8004c22:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004c24:	6819      	ldr	r1, [r3, #0]
 8004c26:	b151      	cbz	r1, 8004c3e <_dtoa_r+0x5e>
 8004c28:	685a      	ldr	r2, [r3, #4]
 8004c2a:	604a      	str	r2, [r1, #4]
 8004c2c:	2301      	movs	r3, #1
 8004c2e:	4093      	lsls	r3, r2
 8004c30:	608b      	str	r3, [r1, #8]
 8004c32:	4620      	mov	r0, r4
 8004c34:	f001 f83c 	bl	8005cb0 <_Bfree>
 8004c38:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004c3a:	2200      	movs	r2, #0
 8004c3c:	601a      	str	r2, [r3, #0]
 8004c3e:	1e3b      	subs	r3, r7, #0
 8004c40:	bfaa      	itet	ge
 8004c42:	2300      	movge	r3, #0
 8004c44:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8004c48:	f8c8 3000 	strge.w	r3, [r8]
 8004c4c:	4b9a      	ldr	r3, [pc, #616]	; (8004eb8 <_dtoa_r+0x2d8>)
 8004c4e:	bfbc      	itt	lt
 8004c50:	2201      	movlt	r2, #1
 8004c52:	f8c8 2000 	strlt.w	r2, [r8]
 8004c56:	ea33 030b 	bics.w	r3, r3, fp
 8004c5a:	d11b      	bne.n	8004c94 <_dtoa_r+0xb4>
 8004c5c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004c5e:	f242 730f 	movw	r3, #9999	; 0x270f
 8004c62:	6013      	str	r3, [r2, #0]
 8004c64:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8004c68:	4333      	orrs	r3, r6
 8004c6a:	f000 8592 	beq.w	8005792 <_dtoa_r+0xbb2>
 8004c6e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004c70:	b963      	cbnz	r3, 8004c8c <_dtoa_r+0xac>
 8004c72:	4b92      	ldr	r3, [pc, #584]	; (8004ebc <_dtoa_r+0x2dc>)
 8004c74:	e022      	b.n	8004cbc <_dtoa_r+0xdc>
 8004c76:	4b92      	ldr	r3, [pc, #584]	; (8004ec0 <_dtoa_r+0x2e0>)
 8004c78:	9301      	str	r3, [sp, #4]
 8004c7a:	3308      	adds	r3, #8
 8004c7c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8004c7e:	6013      	str	r3, [r2, #0]
 8004c80:	9801      	ldr	r0, [sp, #4]
 8004c82:	b013      	add	sp, #76	; 0x4c
 8004c84:	ecbd 8b04 	vpop	{d8-d9}
 8004c88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004c8c:	4b8b      	ldr	r3, [pc, #556]	; (8004ebc <_dtoa_r+0x2dc>)
 8004c8e:	9301      	str	r3, [sp, #4]
 8004c90:	3303      	adds	r3, #3
 8004c92:	e7f3      	b.n	8004c7c <_dtoa_r+0x9c>
 8004c94:	2200      	movs	r2, #0
 8004c96:	2300      	movs	r3, #0
 8004c98:	4650      	mov	r0, sl
 8004c9a:	4659      	mov	r1, fp
 8004c9c:	f7fb ff14 	bl	8000ac8 <__aeabi_dcmpeq>
 8004ca0:	ec4b ab19 	vmov	d9, sl, fp
 8004ca4:	4680      	mov	r8, r0
 8004ca6:	b158      	cbz	r0, 8004cc0 <_dtoa_r+0xe0>
 8004ca8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004caa:	2301      	movs	r3, #1
 8004cac:	6013      	str	r3, [r2, #0]
 8004cae:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	f000 856b 	beq.w	800578c <_dtoa_r+0xbac>
 8004cb6:	4883      	ldr	r0, [pc, #524]	; (8004ec4 <_dtoa_r+0x2e4>)
 8004cb8:	6018      	str	r0, [r3, #0]
 8004cba:	1e43      	subs	r3, r0, #1
 8004cbc:	9301      	str	r3, [sp, #4]
 8004cbe:	e7df      	b.n	8004c80 <_dtoa_r+0xa0>
 8004cc0:	ec4b ab10 	vmov	d0, sl, fp
 8004cc4:	aa10      	add	r2, sp, #64	; 0x40
 8004cc6:	a911      	add	r1, sp, #68	; 0x44
 8004cc8:	4620      	mov	r0, r4
 8004cca:	f001 fad9 	bl	8006280 <__d2b>
 8004cce:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8004cd2:	ee08 0a10 	vmov	s16, r0
 8004cd6:	2d00      	cmp	r5, #0
 8004cd8:	f000 8084 	beq.w	8004de4 <_dtoa_r+0x204>
 8004cdc:	ee19 3a90 	vmov	r3, s19
 8004ce0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004ce4:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8004ce8:	4656      	mov	r6, sl
 8004cea:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8004cee:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8004cf2:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8004cf6:	4b74      	ldr	r3, [pc, #464]	; (8004ec8 <_dtoa_r+0x2e8>)
 8004cf8:	2200      	movs	r2, #0
 8004cfa:	4630      	mov	r0, r6
 8004cfc:	4639      	mov	r1, r7
 8004cfe:	f7fb fac3 	bl	8000288 <__aeabi_dsub>
 8004d02:	a365      	add	r3, pc, #404	; (adr r3, 8004e98 <_dtoa_r+0x2b8>)
 8004d04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d08:	f7fb fc76 	bl	80005f8 <__aeabi_dmul>
 8004d0c:	a364      	add	r3, pc, #400	; (adr r3, 8004ea0 <_dtoa_r+0x2c0>)
 8004d0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d12:	f7fb fabb 	bl	800028c <__adddf3>
 8004d16:	4606      	mov	r6, r0
 8004d18:	4628      	mov	r0, r5
 8004d1a:	460f      	mov	r7, r1
 8004d1c:	f7fb fc02 	bl	8000524 <__aeabi_i2d>
 8004d20:	a361      	add	r3, pc, #388	; (adr r3, 8004ea8 <_dtoa_r+0x2c8>)
 8004d22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d26:	f7fb fc67 	bl	80005f8 <__aeabi_dmul>
 8004d2a:	4602      	mov	r2, r0
 8004d2c:	460b      	mov	r3, r1
 8004d2e:	4630      	mov	r0, r6
 8004d30:	4639      	mov	r1, r7
 8004d32:	f7fb faab 	bl	800028c <__adddf3>
 8004d36:	4606      	mov	r6, r0
 8004d38:	460f      	mov	r7, r1
 8004d3a:	f7fb ff0d 	bl	8000b58 <__aeabi_d2iz>
 8004d3e:	2200      	movs	r2, #0
 8004d40:	9000      	str	r0, [sp, #0]
 8004d42:	2300      	movs	r3, #0
 8004d44:	4630      	mov	r0, r6
 8004d46:	4639      	mov	r1, r7
 8004d48:	f7fb fec8 	bl	8000adc <__aeabi_dcmplt>
 8004d4c:	b150      	cbz	r0, 8004d64 <_dtoa_r+0x184>
 8004d4e:	9800      	ldr	r0, [sp, #0]
 8004d50:	f7fb fbe8 	bl	8000524 <__aeabi_i2d>
 8004d54:	4632      	mov	r2, r6
 8004d56:	463b      	mov	r3, r7
 8004d58:	f7fb feb6 	bl	8000ac8 <__aeabi_dcmpeq>
 8004d5c:	b910      	cbnz	r0, 8004d64 <_dtoa_r+0x184>
 8004d5e:	9b00      	ldr	r3, [sp, #0]
 8004d60:	3b01      	subs	r3, #1
 8004d62:	9300      	str	r3, [sp, #0]
 8004d64:	9b00      	ldr	r3, [sp, #0]
 8004d66:	2b16      	cmp	r3, #22
 8004d68:	d85a      	bhi.n	8004e20 <_dtoa_r+0x240>
 8004d6a:	9a00      	ldr	r2, [sp, #0]
 8004d6c:	4b57      	ldr	r3, [pc, #348]	; (8004ecc <_dtoa_r+0x2ec>)
 8004d6e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004d72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d76:	ec51 0b19 	vmov	r0, r1, d9
 8004d7a:	f7fb feaf 	bl	8000adc <__aeabi_dcmplt>
 8004d7e:	2800      	cmp	r0, #0
 8004d80:	d050      	beq.n	8004e24 <_dtoa_r+0x244>
 8004d82:	9b00      	ldr	r3, [sp, #0]
 8004d84:	3b01      	subs	r3, #1
 8004d86:	9300      	str	r3, [sp, #0]
 8004d88:	2300      	movs	r3, #0
 8004d8a:	930b      	str	r3, [sp, #44]	; 0x2c
 8004d8c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8004d8e:	1b5d      	subs	r5, r3, r5
 8004d90:	1e6b      	subs	r3, r5, #1
 8004d92:	9305      	str	r3, [sp, #20]
 8004d94:	bf45      	ittet	mi
 8004d96:	f1c5 0301 	rsbmi	r3, r5, #1
 8004d9a:	9304      	strmi	r3, [sp, #16]
 8004d9c:	2300      	movpl	r3, #0
 8004d9e:	2300      	movmi	r3, #0
 8004da0:	bf4c      	ite	mi
 8004da2:	9305      	strmi	r3, [sp, #20]
 8004da4:	9304      	strpl	r3, [sp, #16]
 8004da6:	9b00      	ldr	r3, [sp, #0]
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	db3d      	blt.n	8004e28 <_dtoa_r+0x248>
 8004dac:	9b05      	ldr	r3, [sp, #20]
 8004dae:	9a00      	ldr	r2, [sp, #0]
 8004db0:	920a      	str	r2, [sp, #40]	; 0x28
 8004db2:	4413      	add	r3, r2
 8004db4:	9305      	str	r3, [sp, #20]
 8004db6:	2300      	movs	r3, #0
 8004db8:	9307      	str	r3, [sp, #28]
 8004dba:	9b06      	ldr	r3, [sp, #24]
 8004dbc:	2b09      	cmp	r3, #9
 8004dbe:	f200 8089 	bhi.w	8004ed4 <_dtoa_r+0x2f4>
 8004dc2:	2b05      	cmp	r3, #5
 8004dc4:	bfc4      	itt	gt
 8004dc6:	3b04      	subgt	r3, #4
 8004dc8:	9306      	strgt	r3, [sp, #24]
 8004dca:	9b06      	ldr	r3, [sp, #24]
 8004dcc:	f1a3 0302 	sub.w	r3, r3, #2
 8004dd0:	bfcc      	ite	gt
 8004dd2:	2500      	movgt	r5, #0
 8004dd4:	2501      	movle	r5, #1
 8004dd6:	2b03      	cmp	r3, #3
 8004dd8:	f200 8087 	bhi.w	8004eea <_dtoa_r+0x30a>
 8004ddc:	e8df f003 	tbb	[pc, r3]
 8004de0:	59383a2d 	.word	0x59383a2d
 8004de4:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8004de8:	441d      	add	r5, r3
 8004dea:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8004dee:	2b20      	cmp	r3, #32
 8004df0:	bfc1      	itttt	gt
 8004df2:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8004df6:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8004dfa:	fa0b f303 	lslgt.w	r3, fp, r3
 8004dfe:	fa26 f000 	lsrgt.w	r0, r6, r0
 8004e02:	bfda      	itte	le
 8004e04:	f1c3 0320 	rsble	r3, r3, #32
 8004e08:	fa06 f003 	lslle.w	r0, r6, r3
 8004e0c:	4318      	orrgt	r0, r3
 8004e0e:	f7fb fb79 	bl	8000504 <__aeabi_ui2d>
 8004e12:	2301      	movs	r3, #1
 8004e14:	4606      	mov	r6, r0
 8004e16:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8004e1a:	3d01      	subs	r5, #1
 8004e1c:	930e      	str	r3, [sp, #56]	; 0x38
 8004e1e:	e76a      	b.n	8004cf6 <_dtoa_r+0x116>
 8004e20:	2301      	movs	r3, #1
 8004e22:	e7b2      	b.n	8004d8a <_dtoa_r+0x1aa>
 8004e24:	900b      	str	r0, [sp, #44]	; 0x2c
 8004e26:	e7b1      	b.n	8004d8c <_dtoa_r+0x1ac>
 8004e28:	9b04      	ldr	r3, [sp, #16]
 8004e2a:	9a00      	ldr	r2, [sp, #0]
 8004e2c:	1a9b      	subs	r3, r3, r2
 8004e2e:	9304      	str	r3, [sp, #16]
 8004e30:	4253      	negs	r3, r2
 8004e32:	9307      	str	r3, [sp, #28]
 8004e34:	2300      	movs	r3, #0
 8004e36:	930a      	str	r3, [sp, #40]	; 0x28
 8004e38:	e7bf      	b.n	8004dba <_dtoa_r+0x1da>
 8004e3a:	2300      	movs	r3, #0
 8004e3c:	9308      	str	r3, [sp, #32]
 8004e3e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	dc55      	bgt.n	8004ef0 <_dtoa_r+0x310>
 8004e44:	2301      	movs	r3, #1
 8004e46:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8004e4a:	461a      	mov	r2, r3
 8004e4c:	9209      	str	r2, [sp, #36]	; 0x24
 8004e4e:	e00c      	b.n	8004e6a <_dtoa_r+0x28a>
 8004e50:	2301      	movs	r3, #1
 8004e52:	e7f3      	b.n	8004e3c <_dtoa_r+0x25c>
 8004e54:	2300      	movs	r3, #0
 8004e56:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004e58:	9308      	str	r3, [sp, #32]
 8004e5a:	9b00      	ldr	r3, [sp, #0]
 8004e5c:	4413      	add	r3, r2
 8004e5e:	9302      	str	r3, [sp, #8]
 8004e60:	3301      	adds	r3, #1
 8004e62:	2b01      	cmp	r3, #1
 8004e64:	9303      	str	r3, [sp, #12]
 8004e66:	bfb8      	it	lt
 8004e68:	2301      	movlt	r3, #1
 8004e6a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8004e6c:	2200      	movs	r2, #0
 8004e6e:	6042      	str	r2, [r0, #4]
 8004e70:	2204      	movs	r2, #4
 8004e72:	f102 0614 	add.w	r6, r2, #20
 8004e76:	429e      	cmp	r6, r3
 8004e78:	6841      	ldr	r1, [r0, #4]
 8004e7a:	d93d      	bls.n	8004ef8 <_dtoa_r+0x318>
 8004e7c:	4620      	mov	r0, r4
 8004e7e:	f000 fed7 	bl	8005c30 <_Balloc>
 8004e82:	9001      	str	r0, [sp, #4]
 8004e84:	2800      	cmp	r0, #0
 8004e86:	d13b      	bne.n	8004f00 <_dtoa_r+0x320>
 8004e88:	4b11      	ldr	r3, [pc, #68]	; (8004ed0 <_dtoa_r+0x2f0>)
 8004e8a:	4602      	mov	r2, r0
 8004e8c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8004e90:	e6c0      	b.n	8004c14 <_dtoa_r+0x34>
 8004e92:	2301      	movs	r3, #1
 8004e94:	e7df      	b.n	8004e56 <_dtoa_r+0x276>
 8004e96:	bf00      	nop
 8004e98:	636f4361 	.word	0x636f4361
 8004e9c:	3fd287a7 	.word	0x3fd287a7
 8004ea0:	8b60c8b3 	.word	0x8b60c8b3
 8004ea4:	3fc68a28 	.word	0x3fc68a28
 8004ea8:	509f79fb 	.word	0x509f79fb
 8004eac:	3fd34413 	.word	0x3fd34413
 8004eb0:	08006cc5 	.word	0x08006cc5
 8004eb4:	08006cdc 	.word	0x08006cdc
 8004eb8:	7ff00000 	.word	0x7ff00000
 8004ebc:	08006cc1 	.word	0x08006cc1
 8004ec0:	08006cb8 	.word	0x08006cb8
 8004ec4:	08006c95 	.word	0x08006c95
 8004ec8:	3ff80000 	.word	0x3ff80000
 8004ecc:	08006e30 	.word	0x08006e30
 8004ed0:	08006d37 	.word	0x08006d37
 8004ed4:	2501      	movs	r5, #1
 8004ed6:	2300      	movs	r3, #0
 8004ed8:	9306      	str	r3, [sp, #24]
 8004eda:	9508      	str	r5, [sp, #32]
 8004edc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004ee0:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8004ee4:	2200      	movs	r2, #0
 8004ee6:	2312      	movs	r3, #18
 8004ee8:	e7b0      	b.n	8004e4c <_dtoa_r+0x26c>
 8004eea:	2301      	movs	r3, #1
 8004eec:	9308      	str	r3, [sp, #32]
 8004eee:	e7f5      	b.n	8004edc <_dtoa_r+0x2fc>
 8004ef0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004ef2:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8004ef6:	e7b8      	b.n	8004e6a <_dtoa_r+0x28a>
 8004ef8:	3101      	adds	r1, #1
 8004efa:	6041      	str	r1, [r0, #4]
 8004efc:	0052      	lsls	r2, r2, #1
 8004efe:	e7b8      	b.n	8004e72 <_dtoa_r+0x292>
 8004f00:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004f02:	9a01      	ldr	r2, [sp, #4]
 8004f04:	601a      	str	r2, [r3, #0]
 8004f06:	9b03      	ldr	r3, [sp, #12]
 8004f08:	2b0e      	cmp	r3, #14
 8004f0a:	f200 809d 	bhi.w	8005048 <_dtoa_r+0x468>
 8004f0e:	2d00      	cmp	r5, #0
 8004f10:	f000 809a 	beq.w	8005048 <_dtoa_r+0x468>
 8004f14:	9b00      	ldr	r3, [sp, #0]
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	dd32      	ble.n	8004f80 <_dtoa_r+0x3a0>
 8004f1a:	4ab7      	ldr	r2, [pc, #732]	; (80051f8 <_dtoa_r+0x618>)
 8004f1c:	f003 030f 	and.w	r3, r3, #15
 8004f20:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8004f24:	e9d3 8900 	ldrd	r8, r9, [r3]
 8004f28:	9b00      	ldr	r3, [sp, #0]
 8004f2a:	05d8      	lsls	r0, r3, #23
 8004f2c:	ea4f 1723 	mov.w	r7, r3, asr #4
 8004f30:	d516      	bpl.n	8004f60 <_dtoa_r+0x380>
 8004f32:	4bb2      	ldr	r3, [pc, #712]	; (80051fc <_dtoa_r+0x61c>)
 8004f34:	ec51 0b19 	vmov	r0, r1, d9
 8004f38:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8004f3c:	f7fb fc86 	bl	800084c <__aeabi_ddiv>
 8004f40:	f007 070f 	and.w	r7, r7, #15
 8004f44:	4682      	mov	sl, r0
 8004f46:	468b      	mov	fp, r1
 8004f48:	2503      	movs	r5, #3
 8004f4a:	4eac      	ldr	r6, [pc, #688]	; (80051fc <_dtoa_r+0x61c>)
 8004f4c:	b957      	cbnz	r7, 8004f64 <_dtoa_r+0x384>
 8004f4e:	4642      	mov	r2, r8
 8004f50:	464b      	mov	r3, r9
 8004f52:	4650      	mov	r0, sl
 8004f54:	4659      	mov	r1, fp
 8004f56:	f7fb fc79 	bl	800084c <__aeabi_ddiv>
 8004f5a:	4682      	mov	sl, r0
 8004f5c:	468b      	mov	fp, r1
 8004f5e:	e028      	b.n	8004fb2 <_dtoa_r+0x3d2>
 8004f60:	2502      	movs	r5, #2
 8004f62:	e7f2      	b.n	8004f4a <_dtoa_r+0x36a>
 8004f64:	07f9      	lsls	r1, r7, #31
 8004f66:	d508      	bpl.n	8004f7a <_dtoa_r+0x39a>
 8004f68:	4640      	mov	r0, r8
 8004f6a:	4649      	mov	r1, r9
 8004f6c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8004f70:	f7fb fb42 	bl	80005f8 <__aeabi_dmul>
 8004f74:	3501      	adds	r5, #1
 8004f76:	4680      	mov	r8, r0
 8004f78:	4689      	mov	r9, r1
 8004f7a:	107f      	asrs	r7, r7, #1
 8004f7c:	3608      	adds	r6, #8
 8004f7e:	e7e5      	b.n	8004f4c <_dtoa_r+0x36c>
 8004f80:	f000 809b 	beq.w	80050ba <_dtoa_r+0x4da>
 8004f84:	9b00      	ldr	r3, [sp, #0]
 8004f86:	4f9d      	ldr	r7, [pc, #628]	; (80051fc <_dtoa_r+0x61c>)
 8004f88:	425e      	negs	r6, r3
 8004f8a:	4b9b      	ldr	r3, [pc, #620]	; (80051f8 <_dtoa_r+0x618>)
 8004f8c:	f006 020f 	and.w	r2, r6, #15
 8004f90:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004f94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f98:	ec51 0b19 	vmov	r0, r1, d9
 8004f9c:	f7fb fb2c 	bl	80005f8 <__aeabi_dmul>
 8004fa0:	1136      	asrs	r6, r6, #4
 8004fa2:	4682      	mov	sl, r0
 8004fa4:	468b      	mov	fp, r1
 8004fa6:	2300      	movs	r3, #0
 8004fa8:	2502      	movs	r5, #2
 8004faa:	2e00      	cmp	r6, #0
 8004fac:	d17a      	bne.n	80050a4 <_dtoa_r+0x4c4>
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d1d3      	bne.n	8004f5a <_dtoa_r+0x37a>
 8004fb2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	f000 8082 	beq.w	80050be <_dtoa_r+0x4de>
 8004fba:	4b91      	ldr	r3, [pc, #580]	; (8005200 <_dtoa_r+0x620>)
 8004fbc:	2200      	movs	r2, #0
 8004fbe:	4650      	mov	r0, sl
 8004fc0:	4659      	mov	r1, fp
 8004fc2:	f7fb fd8b 	bl	8000adc <__aeabi_dcmplt>
 8004fc6:	2800      	cmp	r0, #0
 8004fc8:	d079      	beq.n	80050be <_dtoa_r+0x4de>
 8004fca:	9b03      	ldr	r3, [sp, #12]
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d076      	beq.n	80050be <_dtoa_r+0x4de>
 8004fd0:	9b02      	ldr	r3, [sp, #8]
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	dd36      	ble.n	8005044 <_dtoa_r+0x464>
 8004fd6:	9b00      	ldr	r3, [sp, #0]
 8004fd8:	4650      	mov	r0, sl
 8004fda:	4659      	mov	r1, fp
 8004fdc:	1e5f      	subs	r7, r3, #1
 8004fde:	2200      	movs	r2, #0
 8004fe0:	4b88      	ldr	r3, [pc, #544]	; (8005204 <_dtoa_r+0x624>)
 8004fe2:	f7fb fb09 	bl	80005f8 <__aeabi_dmul>
 8004fe6:	9e02      	ldr	r6, [sp, #8]
 8004fe8:	4682      	mov	sl, r0
 8004fea:	468b      	mov	fp, r1
 8004fec:	3501      	adds	r5, #1
 8004fee:	4628      	mov	r0, r5
 8004ff0:	f7fb fa98 	bl	8000524 <__aeabi_i2d>
 8004ff4:	4652      	mov	r2, sl
 8004ff6:	465b      	mov	r3, fp
 8004ff8:	f7fb fafe 	bl	80005f8 <__aeabi_dmul>
 8004ffc:	4b82      	ldr	r3, [pc, #520]	; (8005208 <_dtoa_r+0x628>)
 8004ffe:	2200      	movs	r2, #0
 8005000:	f7fb f944 	bl	800028c <__adddf3>
 8005004:	46d0      	mov	r8, sl
 8005006:	46d9      	mov	r9, fp
 8005008:	4682      	mov	sl, r0
 800500a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800500e:	2e00      	cmp	r6, #0
 8005010:	d158      	bne.n	80050c4 <_dtoa_r+0x4e4>
 8005012:	4b7e      	ldr	r3, [pc, #504]	; (800520c <_dtoa_r+0x62c>)
 8005014:	2200      	movs	r2, #0
 8005016:	4640      	mov	r0, r8
 8005018:	4649      	mov	r1, r9
 800501a:	f7fb f935 	bl	8000288 <__aeabi_dsub>
 800501e:	4652      	mov	r2, sl
 8005020:	465b      	mov	r3, fp
 8005022:	4680      	mov	r8, r0
 8005024:	4689      	mov	r9, r1
 8005026:	f7fb fd77 	bl	8000b18 <__aeabi_dcmpgt>
 800502a:	2800      	cmp	r0, #0
 800502c:	f040 8295 	bne.w	800555a <_dtoa_r+0x97a>
 8005030:	4652      	mov	r2, sl
 8005032:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8005036:	4640      	mov	r0, r8
 8005038:	4649      	mov	r1, r9
 800503a:	f7fb fd4f 	bl	8000adc <__aeabi_dcmplt>
 800503e:	2800      	cmp	r0, #0
 8005040:	f040 8289 	bne.w	8005556 <_dtoa_r+0x976>
 8005044:	ec5b ab19 	vmov	sl, fp, d9
 8005048:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800504a:	2b00      	cmp	r3, #0
 800504c:	f2c0 8148 	blt.w	80052e0 <_dtoa_r+0x700>
 8005050:	9a00      	ldr	r2, [sp, #0]
 8005052:	2a0e      	cmp	r2, #14
 8005054:	f300 8144 	bgt.w	80052e0 <_dtoa_r+0x700>
 8005058:	4b67      	ldr	r3, [pc, #412]	; (80051f8 <_dtoa_r+0x618>)
 800505a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800505e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005062:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005064:	2b00      	cmp	r3, #0
 8005066:	f280 80d5 	bge.w	8005214 <_dtoa_r+0x634>
 800506a:	9b03      	ldr	r3, [sp, #12]
 800506c:	2b00      	cmp	r3, #0
 800506e:	f300 80d1 	bgt.w	8005214 <_dtoa_r+0x634>
 8005072:	f040 826f 	bne.w	8005554 <_dtoa_r+0x974>
 8005076:	4b65      	ldr	r3, [pc, #404]	; (800520c <_dtoa_r+0x62c>)
 8005078:	2200      	movs	r2, #0
 800507a:	4640      	mov	r0, r8
 800507c:	4649      	mov	r1, r9
 800507e:	f7fb fabb 	bl	80005f8 <__aeabi_dmul>
 8005082:	4652      	mov	r2, sl
 8005084:	465b      	mov	r3, fp
 8005086:	f7fb fd3d 	bl	8000b04 <__aeabi_dcmpge>
 800508a:	9e03      	ldr	r6, [sp, #12]
 800508c:	4637      	mov	r7, r6
 800508e:	2800      	cmp	r0, #0
 8005090:	f040 8245 	bne.w	800551e <_dtoa_r+0x93e>
 8005094:	9d01      	ldr	r5, [sp, #4]
 8005096:	2331      	movs	r3, #49	; 0x31
 8005098:	f805 3b01 	strb.w	r3, [r5], #1
 800509c:	9b00      	ldr	r3, [sp, #0]
 800509e:	3301      	adds	r3, #1
 80050a0:	9300      	str	r3, [sp, #0]
 80050a2:	e240      	b.n	8005526 <_dtoa_r+0x946>
 80050a4:	07f2      	lsls	r2, r6, #31
 80050a6:	d505      	bpl.n	80050b4 <_dtoa_r+0x4d4>
 80050a8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80050ac:	f7fb faa4 	bl	80005f8 <__aeabi_dmul>
 80050b0:	3501      	adds	r5, #1
 80050b2:	2301      	movs	r3, #1
 80050b4:	1076      	asrs	r6, r6, #1
 80050b6:	3708      	adds	r7, #8
 80050b8:	e777      	b.n	8004faa <_dtoa_r+0x3ca>
 80050ba:	2502      	movs	r5, #2
 80050bc:	e779      	b.n	8004fb2 <_dtoa_r+0x3d2>
 80050be:	9f00      	ldr	r7, [sp, #0]
 80050c0:	9e03      	ldr	r6, [sp, #12]
 80050c2:	e794      	b.n	8004fee <_dtoa_r+0x40e>
 80050c4:	9901      	ldr	r1, [sp, #4]
 80050c6:	4b4c      	ldr	r3, [pc, #304]	; (80051f8 <_dtoa_r+0x618>)
 80050c8:	4431      	add	r1, r6
 80050ca:	910d      	str	r1, [sp, #52]	; 0x34
 80050cc:	9908      	ldr	r1, [sp, #32]
 80050ce:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80050d2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80050d6:	2900      	cmp	r1, #0
 80050d8:	d043      	beq.n	8005162 <_dtoa_r+0x582>
 80050da:	494d      	ldr	r1, [pc, #308]	; (8005210 <_dtoa_r+0x630>)
 80050dc:	2000      	movs	r0, #0
 80050de:	f7fb fbb5 	bl	800084c <__aeabi_ddiv>
 80050e2:	4652      	mov	r2, sl
 80050e4:	465b      	mov	r3, fp
 80050e6:	f7fb f8cf 	bl	8000288 <__aeabi_dsub>
 80050ea:	9d01      	ldr	r5, [sp, #4]
 80050ec:	4682      	mov	sl, r0
 80050ee:	468b      	mov	fp, r1
 80050f0:	4649      	mov	r1, r9
 80050f2:	4640      	mov	r0, r8
 80050f4:	f7fb fd30 	bl	8000b58 <__aeabi_d2iz>
 80050f8:	4606      	mov	r6, r0
 80050fa:	f7fb fa13 	bl	8000524 <__aeabi_i2d>
 80050fe:	4602      	mov	r2, r0
 8005100:	460b      	mov	r3, r1
 8005102:	4640      	mov	r0, r8
 8005104:	4649      	mov	r1, r9
 8005106:	f7fb f8bf 	bl	8000288 <__aeabi_dsub>
 800510a:	3630      	adds	r6, #48	; 0x30
 800510c:	f805 6b01 	strb.w	r6, [r5], #1
 8005110:	4652      	mov	r2, sl
 8005112:	465b      	mov	r3, fp
 8005114:	4680      	mov	r8, r0
 8005116:	4689      	mov	r9, r1
 8005118:	f7fb fce0 	bl	8000adc <__aeabi_dcmplt>
 800511c:	2800      	cmp	r0, #0
 800511e:	d163      	bne.n	80051e8 <_dtoa_r+0x608>
 8005120:	4642      	mov	r2, r8
 8005122:	464b      	mov	r3, r9
 8005124:	4936      	ldr	r1, [pc, #216]	; (8005200 <_dtoa_r+0x620>)
 8005126:	2000      	movs	r0, #0
 8005128:	f7fb f8ae 	bl	8000288 <__aeabi_dsub>
 800512c:	4652      	mov	r2, sl
 800512e:	465b      	mov	r3, fp
 8005130:	f7fb fcd4 	bl	8000adc <__aeabi_dcmplt>
 8005134:	2800      	cmp	r0, #0
 8005136:	f040 80b5 	bne.w	80052a4 <_dtoa_r+0x6c4>
 800513a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800513c:	429d      	cmp	r5, r3
 800513e:	d081      	beq.n	8005044 <_dtoa_r+0x464>
 8005140:	4b30      	ldr	r3, [pc, #192]	; (8005204 <_dtoa_r+0x624>)
 8005142:	2200      	movs	r2, #0
 8005144:	4650      	mov	r0, sl
 8005146:	4659      	mov	r1, fp
 8005148:	f7fb fa56 	bl	80005f8 <__aeabi_dmul>
 800514c:	4b2d      	ldr	r3, [pc, #180]	; (8005204 <_dtoa_r+0x624>)
 800514e:	4682      	mov	sl, r0
 8005150:	468b      	mov	fp, r1
 8005152:	4640      	mov	r0, r8
 8005154:	4649      	mov	r1, r9
 8005156:	2200      	movs	r2, #0
 8005158:	f7fb fa4e 	bl	80005f8 <__aeabi_dmul>
 800515c:	4680      	mov	r8, r0
 800515e:	4689      	mov	r9, r1
 8005160:	e7c6      	b.n	80050f0 <_dtoa_r+0x510>
 8005162:	4650      	mov	r0, sl
 8005164:	4659      	mov	r1, fp
 8005166:	f7fb fa47 	bl	80005f8 <__aeabi_dmul>
 800516a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800516c:	9d01      	ldr	r5, [sp, #4]
 800516e:	930f      	str	r3, [sp, #60]	; 0x3c
 8005170:	4682      	mov	sl, r0
 8005172:	468b      	mov	fp, r1
 8005174:	4649      	mov	r1, r9
 8005176:	4640      	mov	r0, r8
 8005178:	f7fb fcee 	bl	8000b58 <__aeabi_d2iz>
 800517c:	4606      	mov	r6, r0
 800517e:	f7fb f9d1 	bl	8000524 <__aeabi_i2d>
 8005182:	3630      	adds	r6, #48	; 0x30
 8005184:	4602      	mov	r2, r0
 8005186:	460b      	mov	r3, r1
 8005188:	4640      	mov	r0, r8
 800518a:	4649      	mov	r1, r9
 800518c:	f7fb f87c 	bl	8000288 <__aeabi_dsub>
 8005190:	f805 6b01 	strb.w	r6, [r5], #1
 8005194:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005196:	429d      	cmp	r5, r3
 8005198:	4680      	mov	r8, r0
 800519a:	4689      	mov	r9, r1
 800519c:	f04f 0200 	mov.w	r2, #0
 80051a0:	d124      	bne.n	80051ec <_dtoa_r+0x60c>
 80051a2:	4b1b      	ldr	r3, [pc, #108]	; (8005210 <_dtoa_r+0x630>)
 80051a4:	4650      	mov	r0, sl
 80051a6:	4659      	mov	r1, fp
 80051a8:	f7fb f870 	bl	800028c <__adddf3>
 80051ac:	4602      	mov	r2, r0
 80051ae:	460b      	mov	r3, r1
 80051b0:	4640      	mov	r0, r8
 80051b2:	4649      	mov	r1, r9
 80051b4:	f7fb fcb0 	bl	8000b18 <__aeabi_dcmpgt>
 80051b8:	2800      	cmp	r0, #0
 80051ba:	d173      	bne.n	80052a4 <_dtoa_r+0x6c4>
 80051bc:	4652      	mov	r2, sl
 80051be:	465b      	mov	r3, fp
 80051c0:	4913      	ldr	r1, [pc, #76]	; (8005210 <_dtoa_r+0x630>)
 80051c2:	2000      	movs	r0, #0
 80051c4:	f7fb f860 	bl	8000288 <__aeabi_dsub>
 80051c8:	4602      	mov	r2, r0
 80051ca:	460b      	mov	r3, r1
 80051cc:	4640      	mov	r0, r8
 80051ce:	4649      	mov	r1, r9
 80051d0:	f7fb fc84 	bl	8000adc <__aeabi_dcmplt>
 80051d4:	2800      	cmp	r0, #0
 80051d6:	f43f af35 	beq.w	8005044 <_dtoa_r+0x464>
 80051da:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80051dc:	1e6b      	subs	r3, r5, #1
 80051de:	930f      	str	r3, [sp, #60]	; 0x3c
 80051e0:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80051e4:	2b30      	cmp	r3, #48	; 0x30
 80051e6:	d0f8      	beq.n	80051da <_dtoa_r+0x5fa>
 80051e8:	9700      	str	r7, [sp, #0]
 80051ea:	e049      	b.n	8005280 <_dtoa_r+0x6a0>
 80051ec:	4b05      	ldr	r3, [pc, #20]	; (8005204 <_dtoa_r+0x624>)
 80051ee:	f7fb fa03 	bl	80005f8 <__aeabi_dmul>
 80051f2:	4680      	mov	r8, r0
 80051f4:	4689      	mov	r9, r1
 80051f6:	e7bd      	b.n	8005174 <_dtoa_r+0x594>
 80051f8:	08006e30 	.word	0x08006e30
 80051fc:	08006e08 	.word	0x08006e08
 8005200:	3ff00000 	.word	0x3ff00000
 8005204:	40240000 	.word	0x40240000
 8005208:	401c0000 	.word	0x401c0000
 800520c:	40140000 	.word	0x40140000
 8005210:	3fe00000 	.word	0x3fe00000
 8005214:	9d01      	ldr	r5, [sp, #4]
 8005216:	4656      	mov	r6, sl
 8005218:	465f      	mov	r7, fp
 800521a:	4642      	mov	r2, r8
 800521c:	464b      	mov	r3, r9
 800521e:	4630      	mov	r0, r6
 8005220:	4639      	mov	r1, r7
 8005222:	f7fb fb13 	bl	800084c <__aeabi_ddiv>
 8005226:	f7fb fc97 	bl	8000b58 <__aeabi_d2iz>
 800522a:	4682      	mov	sl, r0
 800522c:	f7fb f97a 	bl	8000524 <__aeabi_i2d>
 8005230:	4642      	mov	r2, r8
 8005232:	464b      	mov	r3, r9
 8005234:	f7fb f9e0 	bl	80005f8 <__aeabi_dmul>
 8005238:	4602      	mov	r2, r0
 800523a:	460b      	mov	r3, r1
 800523c:	4630      	mov	r0, r6
 800523e:	4639      	mov	r1, r7
 8005240:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8005244:	f7fb f820 	bl	8000288 <__aeabi_dsub>
 8005248:	f805 6b01 	strb.w	r6, [r5], #1
 800524c:	9e01      	ldr	r6, [sp, #4]
 800524e:	9f03      	ldr	r7, [sp, #12]
 8005250:	1bae      	subs	r6, r5, r6
 8005252:	42b7      	cmp	r7, r6
 8005254:	4602      	mov	r2, r0
 8005256:	460b      	mov	r3, r1
 8005258:	d135      	bne.n	80052c6 <_dtoa_r+0x6e6>
 800525a:	f7fb f817 	bl	800028c <__adddf3>
 800525e:	4642      	mov	r2, r8
 8005260:	464b      	mov	r3, r9
 8005262:	4606      	mov	r6, r0
 8005264:	460f      	mov	r7, r1
 8005266:	f7fb fc57 	bl	8000b18 <__aeabi_dcmpgt>
 800526a:	b9d0      	cbnz	r0, 80052a2 <_dtoa_r+0x6c2>
 800526c:	4642      	mov	r2, r8
 800526e:	464b      	mov	r3, r9
 8005270:	4630      	mov	r0, r6
 8005272:	4639      	mov	r1, r7
 8005274:	f7fb fc28 	bl	8000ac8 <__aeabi_dcmpeq>
 8005278:	b110      	cbz	r0, 8005280 <_dtoa_r+0x6a0>
 800527a:	f01a 0f01 	tst.w	sl, #1
 800527e:	d110      	bne.n	80052a2 <_dtoa_r+0x6c2>
 8005280:	4620      	mov	r0, r4
 8005282:	ee18 1a10 	vmov	r1, s16
 8005286:	f000 fd13 	bl	8005cb0 <_Bfree>
 800528a:	2300      	movs	r3, #0
 800528c:	9800      	ldr	r0, [sp, #0]
 800528e:	702b      	strb	r3, [r5, #0]
 8005290:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005292:	3001      	adds	r0, #1
 8005294:	6018      	str	r0, [r3, #0]
 8005296:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005298:	2b00      	cmp	r3, #0
 800529a:	f43f acf1 	beq.w	8004c80 <_dtoa_r+0xa0>
 800529e:	601d      	str	r5, [r3, #0]
 80052a0:	e4ee      	b.n	8004c80 <_dtoa_r+0xa0>
 80052a2:	9f00      	ldr	r7, [sp, #0]
 80052a4:	462b      	mov	r3, r5
 80052a6:	461d      	mov	r5, r3
 80052a8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80052ac:	2a39      	cmp	r2, #57	; 0x39
 80052ae:	d106      	bne.n	80052be <_dtoa_r+0x6de>
 80052b0:	9a01      	ldr	r2, [sp, #4]
 80052b2:	429a      	cmp	r2, r3
 80052b4:	d1f7      	bne.n	80052a6 <_dtoa_r+0x6c6>
 80052b6:	9901      	ldr	r1, [sp, #4]
 80052b8:	2230      	movs	r2, #48	; 0x30
 80052ba:	3701      	adds	r7, #1
 80052bc:	700a      	strb	r2, [r1, #0]
 80052be:	781a      	ldrb	r2, [r3, #0]
 80052c0:	3201      	adds	r2, #1
 80052c2:	701a      	strb	r2, [r3, #0]
 80052c4:	e790      	b.n	80051e8 <_dtoa_r+0x608>
 80052c6:	4ba6      	ldr	r3, [pc, #664]	; (8005560 <_dtoa_r+0x980>)
 80052c8:	2200      	movs	r2, #0
 80052ca:	f7fb f995 	bl	80005f8 <__aeabi_dmul>
 80052ce:	2200      	movs	r2, #0
 80052d0:	2300      	movs	r3, #0
 80052d2:	4606      	mov	r6, r0
 80052d4:	460f      	mov	r7, r1
 80052d6:	f7fb fbf7 	bl	8000ac8 <__aeabi_dcmpeq>
 80052da:	2800      	cmp	r0, #0
 80052dc:	d09d      	beq.n	800521a <_dtoa_r+0x63a>
 80052de:	e7cf      	b.n	8005280 <_dtoa_r+0x6a0>
 80052e0:	9a08      	ldr	r2, [sp, #32]
 80052e2:	2a00      	cmp	r2, #0
 80052e4:	f000 80d7 	beq.w	8005496 <_dtoa_r+0x8b6>
 80052e8:	9a06      	ldr	r2, [sp, #24]
 80052ea:	2a01      	cmp	r2, #1
 80052ec:	f300 80ba 	bgt.w	8005464 <_dtoa_r+0x884>
 80052f0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80052f2:	2a00      	cmp	r2, #0
 80052f4:	f000 80b2 	beq.w	800545c <_dtoa_r+0x87c>
 80052f8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80052fc:	9e07      	ldr	r6, [sp, #28]
 80052fe:	9d04      	ldr	r5, [sp, #16]
 8005300:	9a04      	ldr	r2, [sp, #16]
 8005302:	441a      	add	r2, r3
 8005304:	9204      	str	r2, [sp, #16]
 8005306:	9a05      	ldr	r2, [sp, #20]
 8005308:	2101      	movs	r1, #1
 800530a:	441a      	add	r2, r3
 800530c:	4620      	mov	r0, r4
 800530e:	9205      	str	r2, [sp, #20]
 8005310:	f000 fd86 	bl	8005e20 <__i2b>
 8005314:	4607      	mov	r7, r0
 8005316:	2d00      	cmp	r5, #0
 8005318:	dd0c      	ble.n	8005334 <_dtoa_r+0x754>
 800531a:	9b05      	ldr	r3, [sp, #20]
 800531c:	2b00      	cmp	r3, #0
 800531e:	dd09      	ble.n	8005334 <_dtoa_r+0x754>
 8005320:	42ab      	cmp	r3, r5
 8005322:	9a04      	ldr	r2, [sp, #16]
 8005324:	bfa8      	it	ge
 8005326:	462b      	movge	r3, r5
 8005328:	1ad2      	subs	r2, r2, r3
 800532a:	9204      	str	r2, [sp, #16]
 800532c:	9a05      	ldr	r2, [sp, #20]
 800532e:	1aed      	subs	r5, r5, r3
 8005330:	1ad3      	subs	r3, r2, r3
 8005332:	9305      	str	r3, [sp, #20]
 8005334:	9b07      	ldr	r3, [sp, #28]
 8005336:	b31b      	cbz	r3, 8005380 <_dtoa_r+0x7a0>
 8005338:	9b08      	ldr	r3, [sp, #32]
 800533a:	2b00      	cmp	r3, #0
 800533c:	f000 80af 	beq.w	800549e <_dtoa_r+0x8be>
 8005340:	2e00      	cmp	r6, #0
 8005342:	dd13      	ble.n	800536c <_dtoa_r+0x78c>
 8005344:	4639      	mov	r1, r7
 8005346:	4632      	mov	r2, r6
 8005348:	4620      	mov	r0, r4
 800534a:	f000 fe29 	bl	8005fa0 <__pow5mult>
 800534e:	ee18 2a10 	vmov	r2, s16
 8005352:	4601      	mov	r1, r0
 8005354:	4607      	mov	r7, r0
 8005356:	4620      	mov	r0, r4
 8005358:	f000 fd78 	bl	8005e4c <__multiply>
 800535c:	ee18 1a10 	vmov	r1, s16
 8005360:	4680      	mov	r8, r0
 8005362:	4620      	mov	r0, r4
 8005364:	f000 fca4 	bl	8005cb0 <_Bfree>
 8005368:	ee08 8a10 	vmov	s16, r8
 800536c:	9b07      	ldr	r3, [sp, #28]
 800536e:	1b9a      	subs	r2, r3, r6
 8005370:	d006      	beq.n	8005380 <_dtoa_r+0x7a0>
 8005372:	ee18 1a10 	vmov	r1, s16
 8005376:	4620      	mov	r0, r4
 8005378:	f000 fe12 	bl	8005fa0 <__pow5mult>
 800537c:	ee08 0a10 	vmov	s16, r0
 8005380:	2101      	movs	r1, #1
 8005382:	4620      	mov	r0, r4
 8005384:	f000 fd4c 	bl	8005e20 <__i2b>
 8005388:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800538a:	2b00      	cmp	r3, #0
 800538c:	4606      	mov	r6, r0
 800538e:	f340 8088 	ble.w	80054a2 <_dtoa_r+0x8c2>
 8005392:	461a      	mov	r2, r3
 8005394:	4601      	mov	r1, r0
 8005396:	4620      	mov	r0, r4
 8005398:	f000 fe02 	bl	8005fa0 <__pow5mult>
 800539c:	9b06      	ldr	r3, [sp, #24]
 800539e:	2b01      	cmp	r3, #1
 80053a0:	4606      	mov	r6, r0
 80053a2:	f340 8081 	ble.w	80054a8 <_dtoa_r+0x8c8>
 80053a6:	f04f 0800 	mov.w	r8, #0
 80053aa:	6933      	ldr	r3, [r6, #16]
 80053ac:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80053b0:	6918      	ldr	r0, [r3, #16]
 80053b2:	f000 fce5 	bl	8005d80 <__hi0bits>
 80053b6:	f1c0 0020 	rsb	r0, r0, #32
 80053ba:	9b05      	ldr	r3, [sp, #20]
 80053bc:	4418      	add	r0, r3
 80053be:	f010 001f 	ands.w	r0, r0, #31
 80053c2:	f000 8092 	beq.w	80054ea <_dtoa_r+0x90a>
 80053c6:	f1c0 0320 	rsb	r3, r0, #32
 80053ca:	2b04      	cmp	r3, #4
 80053cc:	f340 808a 	ble.w	80054e4 <_dtoa_r+0x904>
 80053d0:	f1c0 001c 	rsb	r0, r0, #28
 80053d4:	9b04      	ldr	r3, [sp, #16]
 80053d6:	4403      	add	r3, r0
 80053d8:	9304      	str	r3, [sp, #16]
 80053da:	9b05      	ldr	r3, [sp, #20]
 80053dc:	4403      	add	r3, r0
 80053de:	4405      	add	r5, r0
 80053e0:	9305      	str	r3, [sp, #20]
 80053e2:	9b04      	ldr	r3, [sp, #16]
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	dd07      	ble.n	80053f8 <_dtoa_r+0x818>
 80053e8:	ee18 1a10 	vmov	r1, s16
 80053ec:	461a      	mov	r2, r3
 80053ee:	4620      	mov	r0, r4
 80053f0:	f000 fe30 	bl	8006054 <__lshift>
 80053f4:	ee08 0a10 	vmov	s16, r0
 80053f8:	9b05      	ldr	r3, [sp, #20]
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	dd05      	ble.n	800540a <_dtoa_r+0x82a>
 80053fe:	4631      	mov	r1, r6
 8005400:	461a      	mov	r2, r3
 8005402:	4620      	mov	r0, r4
 8005404:	f000 fe26 	bl	8006054 <__lshift>
 8005408:	4606      	mov	r6, r0
 800540a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800540c:	2b00      	cmp	r3, #0
 800540e:	d06e      	beq.n	80054ee <_dtoa_r+0x90e>
 8005410:	ee18 0a10 	vmov	r0, s16
 8005414:	4631      	mov	r1, r6
 8005416:	f000 fe8d 	bl	8006134 <__mcmp>
 800541a:	2800      	cmp	r0, #0
 800541c:	da67      	bge.n	80054ee <_dtoa_r+0x90e>
 800541e:	9b00      	ldr	r3, [sp, #0]
 8005420:	3b01      	subs	r3, #1
 8005422:	ee18 1a10 	vmov	r1, s16
 8005426:	9300      	str	r3, [sp, #0]
 8005428:	220a      	movs	r2, #10
 800542a:	2300      	movs	r3, #0
 800542c:	4620      	mov	r0, r4
 800542e:	f000 fc61 	bl	8005cf4 <__multadd>
 8005432:	9b08      	ldr	r3, [sp, #32]
 8005434:	ee08 0a10 	vmov	s16, r0
 8005438:	2b00      	cmp	r3, #0
 800543a:	f000 81b1 	beq.w	80057a0 <_dtoa_r+0xbc0>
 800543e:	2300      	movs	r3, #0
 8005440:	4639      	mov	r1, r7
 8005442:	220a      	movs	r2, #10
 8005444:	4620      	mov	r0, r4
 8005446:	f000 fc55 	bl	8005cf4 <__multadd>
 800544a:	9b02      	ldr	r3, [sp, #8]
 800544c:	2b00      	cmp	r3, #0
 800544e:	4607      	mov	r7, r0
 8005450:	f300 808e 	bgt.w	8005570 <_dtoa_r+0x990>
 8005454:	9b06      	ldr	r3, [sp, #24]
 8005456:	2b02      	cmp	r3, #2
 8005458:	dc51      	bgt.n	80054fe <_dtoa_r+0x91e>
 800545a:	e089      	b.n	8005570 <_dtoa_r+0x990>
 800545c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800545e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8005462:	e74b      	b.n	80052fc <_dtoa_r+0x71c>
 8005464:	9b03      	ldr	r3, [sp, #12]
 8005466:	1e5e      	subs	r6, r3, #1
 8005468:	9b07      	ldr	r3, [sp, #28]
 800546a:	42b3      	cmp	r3, r6
 800546c:	bfbf      	itttt	lt
 800546e:	9b07      	ldrlt	r3, [sp, #28]
 8005470:	9607      	strlt	r6, [sp, #28]
 8005472:	1af2      	sublt	r2, r6, r3
 8005474:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8005476:	bfb6      	itet	lt
 8005478:	189b      	addlt	r3, r3, r2
 800547a:	1b9e      	subge	r6, r3, r6
 800547c:	930a      	strlt	r3, [sp, #40]	; 0x28
 800547e:	9b03      	ldr	r3, [sp, #12]
 8005480:	bfb8      	it	lt
 8005482:	2600      	movlt	r6, #0
 8005484:	2b00      	cmp	r3, #0
 8005486:	bfb7      	itett	lt
 8005488:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800548c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8005490:	1a9d      	sublt	r5, r3, r2
 8005492:	2300      	movlt	r3, #0
 8005494:	e734      	b.n	8005300 <_dtoa_r+0x720>
 8005496:	9e07      	ldr	r6, [sp, #28]
 8005498:	9d04      	ldr	r5, [sp, #16]
 800549a:	9f08      	ldr	r7, [sp, #32]
 800549c:	e73b      	b.n	8005316 <_dtoa_r+0x736>
 800549e:	9a07      	ldr	r2, [sp, #28]
 80054a0:	e767      	b.n	8005372 <_dtoa_r+0x792>
 80054a2:	9b06      	ldr	r3, [sp, #24]
 80054a4:	2b01      	cmp	r3, #1
 80054a6:	dc18      	bgt.n	80054da <_dtoa_r+0x8fa>
 80054a8:	f1ba 0f00 	cmp.w	sl, #0
 80054ac:	d115      	bne.n	80054da <_dtoa_r+0x8fa>
 80054ae:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80054b2:	b993      	cbnz	r3, 80054da <_dtoa_r+0x8fa>
 80054b4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80054b8:	0d1b      	lsrs	r3, r3, #20
 80054ba:	051b      	lsls	r3, r3, #20
 80054bc:	b183      	cbz	r3, 80054e0 <_dtoa_r+0x900>
 80054be:	9b04      	ldr	r3, [sp, #16]
 80054c0:	3301      	adds	r3, #1
 80054c2:	9304      	str	r3, [sp, #16]
 80054c4:	9b05      	ldr	r3, [sp, #20]
 80054c6:	3301      	adds	r3, #1
 80054c8:	9305      	str	r3, [sp, #20]
 80054ca:	f04f 0801 	mov.w	r8, #1
 80054ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	f47f af6a 	bne.w	80053aa <_dtoa_r+0x7ca>
 80054d6:	2001      	movs	r0, #1
 80054d8:	e76f      	b.n	80053ba <_dtoa_r+0x7da>
 80054da:	f04f 0800 	mov.w	r8, #0
 80054de:	e7f6      	b.n	80054ce <_dtoa_r+0x8ee>
 80054e0:	4698      	mov	r8, r3
 80054e2:	e7f4      	b.n	80054ce <_dtoa_r+0x8ee>
 80054e4:	f43f af7d 	beq.w	80053e2 <_dtoa_r+0x802>
 80054e8:	4618      	mov	r0, r3
 80054ea:	301c      	adds	r0, #28
 80054ec:	e772      	b.n	80053d4 <_dtoa_r+0x7f4>
 80054ee:	9b03      	ldr	r3, [sp, #12]
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	dc37      	bgt.n	8005564 <_dtoa_r+0x984>
 80054f4:	9b06      	ldr	r3, [sp, #24]
 80054f6:	2b02      	cmp	r3, #2
 80054f8:	dd34      	ble.n	8005564 <_dtoa_r+0x984>
 80054fa:	9b03      	ldr	r3, [sp, #12]
 80054fc:	9302      	str	r3, [sp, #8]
 80054fe:	9b02      	ldr	r3, [sp, #8]
 8005500:	b96b      	cbnz	r3, 800551e <_dtoa_r+0x93e>
 8005502:	4631      	mov	r1, r6
 8005504:	2205      	movs	r2, #5
 8005506:	4620      	mov	r0, r4
 8005508:	f000 fbf4 	bl	8005cf4 <__multadd>
 800550c:	4601      	mov	r1, r0
 800550e:	4606      	mov	r6, r0
 8005510:	ee18 0a10 	vmov	r0, s16
 8005514:	f000 fe0e 	bl	8006134 <__mcmp>
 8005518:	2800      	cmp	r0, #0
 800551a:	f73f adbb 	bgt.w	8005094 <_dtoa_r+0x4b4>
 800551e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005520:	9d01      	ldr	r5, [sp, #4]
 8005522:	43db      	mvns	r3, r3
 8005524:	9300      	str	r3, [sp, #0]
 8005526:	f04f 0800 	mov.w	r8, #0
 800552a:	4631      	mov	r1, r6
 800552c:	4620      	mov	r0, r4
 800552e:	f000 fbbf 	bl	8005cb0 <_Bfree>
 8005532:	2f00      	cmp	r7, #0
 8005534:	f43f aea4 	beq.w	8005280 <_dtoa_r+0x6a0>
 8005538:	f1b8 0f00 	cmp.w	r8, #0
 800553c:	d005      	beq.n	800554a <_dtoa_r+0x96a>
 800553e:	45b8      	cmp	r8, r7
 8005540:	d003      	beq.n	800554a <_dtoa_r+0x96a>
 8005542:	4641      	mov	r1, r8
 8005544:	4620      	mov	r0, r4
 8005546:	f000 fbb3 	bl	8005cb0 <_Bfree>
 800554a:	4639      	mov	r1, r7
 800554c:	4620      	mov	r0, r4
 800554e:	f000 fbaf 	bl	8005cb0 <_Bfree>
 8005552:	e695      	b.n	8005280 <_dtoa_r+0x6a0>
 8005554:	2600      	movs	r6, #0
 8005556:	4637      	mov	r7, r6
 8005558:	e7e1      	b.n	800551e <_dtoa_r+0x93e>
 800555a:	9700      	str	r7, [sp, #0]
 800555c:	4637      	mov	r7, r6
 800555e:	e599      	b.n	8005094 <_dtoa_r+0x4b4>
 8005560:	40240000 	.word	0x40240000
 8005564:	9b08      	ldr	r3, [sp, #32]
 8005566:	2b00      	cmp	r3, #0
 8005568:	f000 80ca 	beq.w	8005700 <_dtoa_r+0xb20>
 800556c:	9b03      	ldr	r3, [sp, #12]
 800556e:	9302      	str	r3, [sp, #8]
 8005570:	2d00      	cmp	r5, #0
 8005572:	dd05      	ble.n	8005580 <_dtoa_r+0x9a0>
 8005574:	4639      	mov	r1, r7
 8005576:	462a      	mov	r2, r5
 8005578:	4620      	mov	r0, r4
 800557a:	f000 fd6b 	bl	8006054 <__lshift>
 800557e:	4607      	mov	r7, r0
 8005580:	f1b8 0f00 	cmp.w	r8, #0
 8005584:	d05b      	beq.n	800563e <_dtoa_r+0xa5e>
 8005586:	6879      	ldr	r1, [r7, #4]
 8005588:	4620      	mov	r0, r4
 800558a:	f000 fb51 	bl	8005c30 <_Balloc>
 800558e:	4605      	mov	r5, r0
 8005590:	b928      	cbnz	r0, 800559e <_dtoa_r+0x9be>
 8005592:	4b87      	ldr	r3, [pc, #540]	; (80057b0 <_dtoa_r+0xbd0>)
 8005594:	4602      	mov	r2, r0
 8005596:	f240 21ea 	movw	r1, #746	; 0x2ea
 800559a:	f7ff bb3b 	b.w	8004c14 <_dtoa_r+0x34>
 800559e:	693a      	ldr	r2, [r7, #16]
 80055a0:	3202      	adds	r2, #2
 80055a2:	0092      	lsls	r2, r2, #2
 80055a4:	f107 010c 	add.w	r1, r7, #12
 80055a8:	300c      	adds	r0, #12
 80055aa:	f000 fb33 	bl	8005c14 <memcpy>
 80055ae:	2201      	movs	r2, #1
 80055b0:	4629      	mov	r1, r5
 80055b2:	4620      	mov	r0, r4
 80055b4:	f000 fd4e 	bl	8006054 <__lshift>
 80055b8:	9b01      	ldr	r3, [sp, #4]
 80055ba:	f103 0901 	add.w	r9, r3, #1
 80055be:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 80055c2:	4413      	add	r3, r2
 80055c4:	9305      	str	r3, [sp, #20]
 80055c6:	f00a 0301 	and.w	r3, sl, #1
 80055ca:	46b8      	mov	r8, r7
 80055cc:	9304      	str	r3, [sp, #16]
 80055ce:	4607      	mov	r7, r0
 80055d0:	4631      	mov	r1, r6
 80055d2:	ee18 0a10 	vmov	r0, s16
 80055d6:	f7ff fa75 	bl	8004ac4 <quorem>
 80055da:	4641      	mov	r1, r8
 80055dc:	9002      	str	r0, [sp, #8]
 80055de:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80055e2:	ee18 0a10 	vmov	r0, s16
 80055e6:	f000 fda5 	bl	8006134 <__mcmp>
 80055ea:	463a      	mov	r2, r7
 80055ec:	9003      	str	r0, [sp, #12]
 80055ee:	4631      	mov	r1, r6
 80055f0:	4620      	mov	r0, r4
 80055f2:	f000 fdbb 	bl	800616c <__mdiff>
 80055f6:	68c2      	ldr	r2, [r0, #12]
 80055f8:	f109 3bff 	add.w	fp, r9, #4294967295	; 0xffffffff
 80055fc:	4605      	mov	r5, r0
 80055fe:	bb02      	cbnz	r2, 8005642 <_dtoa_r+0xa62>
 8005600:	4601      	mov	r1, r0
 8005602:	ee18 0a10 	vmov	r0, s16
 8005606:	f000 fd95 	bl	8006134 <__mcmp>
 800560a:	4602      	mov	r2, r0
 800560c:	4629      	mov	r1, r5
 800560e:	4620      	mov	r0, r4
 8005610:	9207      	str	r2, [sp, #28]
 8005612:	f000 fb4d 	bl	8005cb0 <_Bfree>
 8005616:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800561a:	ea43 0102 	orr.w	r1, r3, r2
 800561e:	9b04      	ldr	r3, [sp, #16]
 8005620:	430b      	orrs	r3, r1
 8005622:	464d      	mov	r5, r9
 8005624:	d10f      	bne.n	8005646 <_dtoa_r+0xa66>
 8005626:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800562a:	d02a      	beq.n	8005682 <_dtoa_r+0xaa2>
 800562c:	9b03      	ldr	r3, [sp, #12]
 800562e:	2b00      	cmp	r3, #0
 8005630:	dd02      	ble.n	8005638 <_dtoa_r+0xa58>
 8005632:	9b02      	ldr	r3, [sp, #8]
 8005634:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8005638:	f88b a000 	strb.w	sl, [fp]
 800563c:	e775      	b.n	800552a <_dtoa_r+0x94a>
 800563e:	4638      	mov	r0, r7
 8005640:	e7ba      	b.n	80055b8 <_dtoa_r+0x9d8>
 8005642:	2201      	movs	r2, #1
 8005644:	e7e2      	b.n	800560c <_dtoa_r+0xa2c>
 8005646:	9b03      	ldr	r3, [sp, #12]
 8005648:	2b00      	cmp	r3, #0
 800564a:	db04      	blt.n	8005656 <_dtoa_r+0xa76>
 800564c:	9906      	ldr	r1, [sp, #24]
 800564e:	430b      	orrs	r3, r1
 8005650:	9904      	ldr	r1, [sp, #16]
 8005652:	430b      	orrs	r3, r1
 8005654:	d122      	bne.n	800569c <_dtoa_r+0xabc>
 8005656:	2a00      	cmp	r2, #0
 8005658:	ddee      	ble.n	8005638 <_dtoa_r+0xa58>
 800565a:	ee18 1a10 	vmov	r1, s16
 800565e:	2201      	movs	r2, #1
 8005660:	4620      	mov	r0, r4
 8005662:	f000 fcf7 	bl	8006054 <__lshift>
 8005666:	4631      	mov	r1, r6
 8005668:	ee08 0a10 	vmov	s16, r0
 800566c:	f000 fd62 	bl	8006134 <__mcmp>
 8005670:	2800      	cmp	r0, #0
 8005672:	dc03      	bgt.n	800567c <_dtoa_r+0xa9c>
 8005674:	d1e0      	bne.n	8005638 <_dtoa_r+0xa58>
 8005676:	f01a 0f01 	tst.w	sl, #1
 800567a:	d0dd      	beq.n	8005638 <_dtoa_r+0xa58>
 800567c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8005680:	d1d7      	bne.n	8005632 <_dtoa_r+0xa52>
 8005682:	2339      	movs	r3, #57	; 0x39
 8005684:	f88b 3000 	strb.w	r3, [fp]
 8005688:	462b      	mov	r3, r5
 800568a:	461d      	mov	r5, r3
 800568c:	3b01      	subs	r3, #1
 800568e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8005692:	2a39      	cmp	r2, #57	; 0x39
 8005694:	d071      	beq.n	800577a <_dtoa_r+0xb9a>
 8005696:	3201      	adds	r2, #1
 8005698:	701a      	strb	r2, [r3, #0]
 800569a:	e746      	b.n	800552a <_dtoa_r+0x94a>
 800569c:	2a00      	cmp	r2, #0
 800569e:	dd07      	ble.n	80056b0 <_dtoa_r+0xad0>
 80056a0:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80056a4:	d0ed      	beq.n	8005682 <_dtoa_r+0xaa2>
 80056a6:	f10a 0301 	add.w	r3, sl, #1
 80056aa:	f88b 3000 	strb.w	r3, [fp]
 80056ae:	e73c      	b.n	800552a <_dtoa_r+0x94a>
 80056b0:	9b05      	ldr	r3, [sp, #20]
 80056b2:	f809 ac01 	strb.w	sl, [r9, #-1]
 80056b6:	4599      	cmp	r9, r3
 80056b8:	d047      	beq.n	800574a <_dtoa_r+0xb6a>
 80056ba:	ee18 1a10 	vmov	r1, s16
 80056be:	2300      	movs	r3, #0
 80056c0:	220a      	movs	r2, #10
 80056c2:	4620      	mov	r0, r4
 80056c4:	f000 fb16 	bl	8005cf4 <__multadd>
 80056c8:	45b8      	cmp	r8, r7
 80056ca:	ee08 0a10 	vmov	s16, r0
 80056ce:	f04f 0300 	mov.w	r3, #0
 80056d2:	f04f 020a 	mov.w	r2, #10
 80056d6:	4641      	mov	r1, r8
 80056d8:	4620      	mov	r0, r4
 80056da:	d106      	bne.n	80056ea <_dtoa_r+0xb0a>
 80056dc:	f000 fb0a 	bl	8005cf4 <__multadd>
 80056e0:	4680      	mov	r8, r0
 80056e2:	4607      	mov	r7, r0
 80056e4:	f109 0901 	add.w	r9, r9, #1
 80056e8:	e772      	b.n	80055d0 <_dtoa_r+0x9f0>
 80056ea:	f000 fb03 	bl	8005cf4 <__multadd>
 80056ee:	4639      	mov	r1, r7
 80056f0:	4680      	mov	r8, r0
 80056f2:	2300      	movs	r3, #0
 80056f4:	220a      	movs	r2, #10
 80056f6:	4620      	mov	r0, r4
 80056f8:	f000 fafc 	bl	8005cf4 <__multadd>
 80056fc:	4607      	mov	r7, r0
 80056fe:	e7f1      	b.n	80056e4 <_dtoa_r+0xb04>
 8005700:	9b03      	ldr	r3, [sp, #12]
 8005702:	9302      	str	r3, [sp, #8]
 8005704:	9d01      	ldr	r5, [sp, #4]
 8005706:	ee18 0a10 	vmov	r0, s16
 800570a:	4631      	mov	r1, r6
 800570c:	f7ff f9da 	bl	8004ac4 <quorem>
 8005710:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8005714:	9b01      	ldr	r3, [sp, #4]
 8005716:	f805 ab01 	strb.w	sl, [r5], #1
 800571a:	1aea      	subs	r2, r5, r3
 800571c:	9b02      	ldr	r3, [sp, #8]
 800571e:	4293      	cmp	r3, r2
 8005720:	dd09      	ble.n	8005736 <_dtoa_r+0xb56>
 8005722:	ee18 1a10 	vmov	r1, s16
 8005726:	2300      	movs	r3, #0
 8005728:	220a      	movs	r2, #10
 800572a:	4620      	mov	r0, r4
 800572c:	f000 fae2 	bl	8005cf4 <__multadd>
 8005730:	ee08 0a10 	vmov	s16, r0
 8005734:	e7e7      	b.n	8005706 <_dtoa_r+0xb26>
 8005736:	9b02      	ldr	r3, [sp, #8]
 8005738:	2b00      	cmp	r3, #0
 800573a:	bfc8      	it	gt
 800573c:	461d      	movgt	r5, r3
 800573e:	9b01      	ldr	r3, [sp, #4]
 8005740:	bfd8      	it	le
 8005742:	2501      	movle	r5, #1
 8005744:	441d      	add	r5, r3
 8005746:	f04f 0800 	mov.w	r8, #0
 800574a:	ee18 1a10 	vmov	r1, s16
 800574e:	2201      	movs	r2, #1
 8005750:	4620      	mov	r0, r4
 8005752:	f000 fc7f 	bl	8006054 <__lshift>
 8005756:	4631      	mov	r1, r6
 8005758:	ee08 0a10 	vmov	s16, r0
 800575c:	f000 fcea 	bl	8006134 <__mcmp>
 8005760:	2800      	cmp	r0, #0
 8005762:	dc91      	bgt.n	8005688 <_dtoa_r+0xaa8>
 8005764:	d102      	bne.n	800576c <_dtoa_r+0xb8c>
 8005766:	f01a 0f01 	tst.w	sl, #1
 800576a:	d18d      	bne.n	8005688 <_dtoa_r+0xaa8>
 800576c:	462b      	mov	r3, r5
 800576e:	461d      	mov	r5, r3
 8005770:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005774:	2a30      	cmp	r2, #48	; 0x30
 8005776:	d0fa      	beq.n	800576e <_dtoa_r+0xb8e>
 8005778:	e6d7      	b.n	800552a <_dtoa_r+0x94a>
 800577a:	9a01      	ldr	r2, [sp, #4]
 800577c:	429a      	cmp	r2, r3
 800577e:	d184      	bne.n	800568a <_dtoa_r+0xaaa>
 8005780:	9b00      	ldr	r3, [sp, #0]
 8005782:	3301      	adds	r3, #1
 8005784:	9300      	str	r3, [sp, #0]
 8005786:	2331      	movs	r3, #49	; 0x31
 8005788:	7013      	strb	r3, [r2, #0]
 800578a:	e6ce      	b.n	800552a <_dtoa_r+0x94a>
 800578c:	4b09      	ldr	r3, [pc, #36]	; (80057b4 <_dtoa_r+0xbd4>)
 800578e:	f7ff ba95 	b.w	8004cbc <_dtoa_r+0xdc>
 8005792:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005794:	2b00      	cmp	r3, #0
 8005796:	f47f aa6e 	bne.w	8004c76 <_dtoa_r+0x96>
 800579a:	4b07      	ldr	r3, [pc, #28]	; (80057b8 <_dtoa_r+0xbd8>)
 800579c:	f7ff ba8e 	b.w	8004cbc <_dtoa_r+0xdc>
 80057a0:	9b02      	ldr	r3, [sp, #8]
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	dcae      	bgt.n	8005704 <_dtoa_r+0xb24>
 80057a6:	9b06      	ldr	r3, [sp, #24]
 80057a8:	2b02      	cmp	r3, #2
 80057aa:	f73f aea8 	bgt.w	80054fe <_dtoa_r+0x91e>
 80057ae:	e7a9      	b.n	8005704 <_dtoa_r+0xb24>
 80057b0:	08006d37 	.word	0x08006d37
 80057b4:	08006c94 	.word	0x08006c94
 80057b8:	08006cb8 	.word	0x08006cb8

080057bc <__sflush_r>:
 80057bc:	898a      	ldrh	r2, [r1, #12]
 80057be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80057c2:	4605      	mov	r5, r0
 80057c4:	0710      	lsls	r0, r2, #28
 80057c6:	460c      	mov	r4, r1
 80057c8:	d458      	bmi.n	800587c <__sflush_r+0xc0>
 80057ca:	684b      	ldr	r3, [r1, #4]
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	dc05      	bgt.n	80057dc <__sflush_r+0x20>
 80057d0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	dc02      	bgt.n	80057dc <__sflush_r+0x20>
 80057d6:	2000      	movs	r0, #0
 80057d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80057dc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80057de:	2e00      	cmp	r6, #0
 80057e0:	d0f9      	beq.n	80057d6 <__sflush_r+0x1a>
 80057e2:	2300      	movs	r3, #0
 80057e4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80057e8:	682f      	ldr	r7, [r5, #0]
 80057ea:	602b      	str	r3, [r5, #0]
 80057ec:	d032      	beq.n	8005854 <__sflush_r+0x98>
 80057ee:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80057f0:	89a3      	ldrh	r3, [r4, #12]
 80057f2:	075a      	lsls	r2, r3, #29
 80057f4:	d505      	bpl.n	8005802 <__sflush_r+0x46>
 80057f6:	6863      	ldr	r3, [r4, #4]
 80057f8:	1ac0      	subs	r0, r0, r3
 80057fa:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80057fc:	b10b      	cbz	r3, 8005802 <__sflush_r+0x46>
 80057fe:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005800:	1ac0      	subs	r0, r0, r3
 8005802:	2300      	movs	r3, #0
 8005804:	4602      	mov	r2, r0
 8005806:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005808:	6a21      	ldr	r1, [r4, #32]
 800580a:	4628      	mov	r0, r5
 800580c:	47b0      	blx	r6
 800580e:	1c43      	adds	r3, r0, #1
 8005810:	89a3      	ldrh	r3, [r4, #12]
 8005812:	d106      	bne.n	8005822 <__sflush_r+0x66>
 8005814:	6829      	ldr	r1, [r5, #0]
 8005816:	291d      	cmp	r1, #29
 8005818:	d82c      	bhi.n	8005874 <__sflush_r+0xb8>
 800581a:	4a2a      	ldr	r2, [pc, #168]	; (80058c4 <__sflush_r+0x108>)
 800581c:	40ca      	lsrs	r2, r1
 800581e:	07d6      	lsls	r6, r2, #31
 8005820:	d528      	bpl.n	8005874 <__sflush_r+0xb8>
 8005822:	2200      	movs	r2, #0
 8005824:	6062      	str	r2, [r4, #4]
 8005826:	04d9      	lsls	r1, r3, #19
 8005828:	6922      	ldr	r2, [r4, #16]
 800582a:	6022      	str	r2, [r4, #0]
 800582c:	d504      	bpl.n	8005838 <__sflush_r+0x7c>
 800582e:	1c42      	adds	r2, r0, #1
 8005830:	d101      	bne.n	8005836 <__sflush_r+0x7a>
 8005832:	682b      	ldr	r3, [r5, #0]
 8005834:	b903      	cbnz	r3, 8005838 <__sflush_r+0x7c>
 8005836:	6560      	str	r0, [r4, #84]	; 0x54
 8005838:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800583a:	602f      	str	r7, [r5, #0]
 800583c:	2900      	cmp	r1, #0
 800583e:	d0ca      	beq.n	80057d6 <__sflush_r+0x1a>
 8005840:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005844:	4299      	cmp	r1, r3
 8005846:	d002      	beq.n	800584e <__sflush_r+0x92>
 8005848:	4628      	mov	r0, r5
 800584a:	f000 fd8b 	bl	8006364 <_free_r>
 800584e:	2000      	movs	r0, #0
 8005850:	6360      	str	r0, [r4, #52]	; 0x34
 8005852:	e7c1      	b.n	80057d8 <__sflush_r+0x1c>
 8005854:	6a21      	ldr	r1, [r4, #32]
 8005856:	2301      	movs	r3, #1
 8005858:	4628      	mov	r0, r5
 800585a:	47b0      	blx	r6
 800585c:	1c41      	adds	r1, r0, #1
 800585e:	d1c7      	bne.n	80057f0 <__sflush_r+0x34>
 8005860:	682b      	ldr	r3, [r5, #0]
 8005862:	2b00      	cmp	r3, #0
 8005864:	d0c4      	beq.n	80057f0 <__sflush_r+0x34>
 8005866:	2b1d      	cmp	r3, #29
 8005868:	d001      	beq.n	800586e <__sflush_r+0xb2>
 800586a:	2b16      	cmp	r3, #22
 800586c:	d101      	bne.n	8005872 <__sflush_r+0xb6>
 800586e:	602f      	str	r7, [r5, #0]
 8005870:	e7b1      	b.n	80057d6 <__sflush_r+0x1a>
 8005872:	89a3      	ldrh	r3, [r4, #12]
 8005874:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005878:	81a3      	strh	r3, [r4, #12]
 800587a:	e7ad      	b.n	80057d8 <__sflush_r+0x1c>
 800587c:	690f      	ldr	r7, [r1, #16]
 800587e:	2f00      	cmp	r7, #0
 8005880:	d0a9      	beq.n	80057d6 <__sflush_r+0x1a>
 8005882:	0793      	lsls	r3, r2, #30
 8005884:	680e      	ldr	r6, [r1, #0]
 8005886:	bf08      	it	eq
 8005888:	694b      	ldreq	r3, [r1, #20]
 800588a:	600f      	str	r7, [r1, #0]
 800588c:	bf18      	it	ne
 800588e:	2300      	movne	r3, #0
 8005890:	eba6 0807 	sub.w	r8, r6, r7
 8005894:	608b      	str	r3, [r1, #8]
 8005896:	f1b8 0f00 	cmp.w	r8, #0
 800589a:	dd9c      	ble.n	80057d6 <__sflush_r+0x1a>
 800589c:	6a21      	ldr	r1, [r4, #32]
 800589e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80058a0:	4643      	mov	r3, r8
 80058a2:	463a      	mov	r2, r7
 80058a4:	4628      	mov	r0, r5
 80058a6:	47b0      	blx	r6
 80058a8:	2800      	cmp	r0, #0
 80058aa:	dc06      	bgt.n	80058ba <__sflush_r+0xfe>
 80058ac:	89a3      	ldrh	r3, [r4, #12]
 80058ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80058b2:	81a3      	strh	r3, [r4, #12]
 80058b4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80058b8:	e78e      	b.n	80057d8 <__sflush_r+0x1c>
 80058ba:	4407      	add	r7, r0
 80058bc:	eba8 0800 	sub.w	r8, r8, r0
 80058c0:	e7e9      	b.n	8005896 <__sflush_r+0xda>
 80058c2:	bf00      	nop
 80058c4:	20400001 	.word	0x20400001

080058c8 <_fflush_r>:
 80058c8:	b538      	push	{r3, r4, r5, lr}
 80058ca:	690b      	ldr	r3, [r1, #16]
 80058cc:	4605      	mov	r5, r0
 80058ce:	460c      	mov	r4, r1
 80058d0:	b913      	cbnz	r3, 80058d8 <_fflush_r+0x10>
 80058d2:	2500      	movs	r5, #0
 80058d4:	4628      	mov	r0, r5
 80058d6:	bd38      	pop	{r3, r4, r5, pc}
 80058d8:	b118      	cbz	r0, 80058e2 <_fflush_r+0x1a>
 80058da:	6983      	ldr	r3, [r0, #24]
 80058dc:	b90b      	cbnz	r3, 80058e2 <_fflush_r+0x1a>
 80058de:	f000 f887 	bl	80059f0 <__sinit>
 80058e2:	4b14      	ldr	r3, [pc, #80]	; (8005934 <_fflush_r+0x6c>)
 80058e4:	429c      	cmp	r4, r3
 80058e6:	d11b      	bne.n	8005920 <_fflush_r+0x58>
 80058e8:	686c      	ldr	r4, [r5, #4]
 80058ea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d0ef      	beq.n	80058d2 <_fflush_r+0xa>
 80058f2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80058f4:	07d0      	lsls	r0, r2, #31
 80058f6:	d404      	bmi.n	8005902 <_fflush_r+0x3a>
 80058f8:	0599      	lsls	r1, r3, #22
 80058fa:	d402      	bmi.n	8005902 <_fflush_r+0x3a>
 80058fc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80058fe:	f000 f91a 	bl	8005b36 <__retarget_lock_acquire_recursive>
 8005902:	4628      	mov	r0, r5
 8005904:	4621      	mov	r1, r4
 8005906:	f7ff ff59 	bl	80057bc <__sflush_r>
 800590a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800590c:	07da      	lsls	r2, r3, #31
 800590e:	4605      	mov	r5, r0
 8005910:	d4e0      	bmi.n	80058d4 <_fflush_r+0xc>
 8005912:	89a3      	ldrh	r3, [r4, #12]
 8005914:	059b      	lsls	r3, r3, #22
 8005916:	d4dd      	bmi.n	80058d4 <_fflush_r+0xc>
 8005918:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800591a:	f000 f90d 	bl	8005b38 <__retarget_lock_release_recursive>
 800591e:	e7d9      	b.n	80058d4 <_fflush_r+0xc>
 8005920:	4b05      	ldr	r3, [pc, #20]	; (8005938 <_fflush_r+0x70>)
 8005922:	429c      	cmp	r4, r3
 8005924:	d101      	bne.n	800592a <_fflush_r+0x62>
 8005926:	68ac      	ldr	r4, [r5, #8]
 8005928:	e7df      	b.n	80058ea <_fflush_r+0x22>
 800592a:	4b04      	ldr	r3, [pc, #16]	; (800593c <_fflush_r+0x74>)
 800592c:	429c      	cmp	r4, r3
 800592e:	bf08      	it	eq
 8005930:	68ec      	ldreq	r4, [r5, #12]
 8005932:	e7da      	b.n	80058ea <_fflush_r+0x22>
 8005934:	08006d68 	.word	0x08006d68
 8005938:	08006d88 	.word	0x08006d88
 800593c:	08006d48 	.word	0x08006d48

08005940 <std>:
 8005940:	2300      	movs	r3, #0
 8005942:	b510      	push	{r4, lr}
 8005944:	4604      	mov	r4, r0
 8005946:	e9c0 3300 	strd	r3, r3, [r0]
 800594a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800594e:	6083      	str	r3, [r0, #8]
 8005950:	8181      	strh	r1, [r0, #12]
 8005952:	6643      	str	r3, [r0, #100]	; 0x64
 8005954:	81c2      	strh	r2, [r0, #14]
 8005956:	6183      	str	r3, [r0, #24]
 8005958:	4619      	mov	r1, r3
 800595a:	2208      	movs	r2, #8
 800595c:	305c      	adds	r0, #92	; 0x5c
 800595e:	f7fe fb79 	bl	8004054 <memset>
 8005962:	4b05      	ldr	r3, [pc, #20]	; (8005978 <std+0x38>)
 8005964:	6263      	str	r3, [r4, #36]	; 0x24
 8005966:	4b05      	ldr	r3, [pc, #20]	; (800597c <std+0x3c>)
 8005968:	62a3      	str	r3, [r4, #40]	; 0x28
 800596a:	4b05      	ldr	r3, [pc, #20]	; (8005980 <std+0x40>)
 800596c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800596e:	4b05      	ldr	r3, [pc, #20]	; (8005984 <std+0x44>)
 8005970:	6224      	str	r4, [r4, #32]
 8005972:	6323      	str	r3, [r4, #48]	; 0x30
 8005974:	bd10      	pop	{r4, pc}
 8005976:	bf00      	nop
 8005978:	08006545 	.word	0x08006545
 800597c:	08006567 	.word	0x08006567
 8005980:	0800659f 	.word	0x0800659f
 8005984:	080065c3 	.word	0x080065c3

08005988 <_cleanup_r>:
 8005988:	4901      	ldr	r1, [pc, #4]	; (8005990 <_cleanup_r+0x8>)
 800598a:	f000 b8af 	b.w	8005aec <_fwalk_reent>
 800598e:	bf00      	nop
 8005990:	080058c9 	.word	0x080058c9

08005994 <__sfmoreglue>:
 8005994:	b570      	push	{r4, r5, r6, lr}
 8005996:	2268      	movs	r2, #104	; 0x68
 8005998:	1e4d      	subs	r5, r1, #1
 800599a:	4355      	muls	r5, r2
 800599c:	460e      	mov	r6, r1
 800599e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80059a2:	f000 fd4b 	bl	800643c <_malloc_r>
 80059a6:	4604      	mov	r4, r0
 80059a8:	b140      	cbz	r0, 80059bc <__sfmoreglue+0x28>
 80059aa:	2100      	movs	r1, #0
 80059ac:	e9c0 1600 	strd	r1, r6, [r0]
 80059b0:	300c      	adds	r0, #12
 80059b2:	60a0      	str	r0, [r4, #8]
 80059b4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80059b8:	f7fe fb4c 	bl	8004054 <memset>
 80059bc:	4620      	mov	r0, r4
 80059be:	bd70      	pop	{r4, r5, r6, pc}

080059c0 <__sfp_lock_acquire>:
 80059c0:	4801      	ldr	r0, [pc, #4]	; (80059c8 <__sfp_lock_acquire+0x8>)
 80059c2:	f000 b8b8 	b.w	8005b36 <__retarget_lock_acquire_recursive>
 80059c6:	bf00      	nop
 80059c8:	20000309 	.word	0x20000309

080059cc <__sfp_lock_release>:
 80059cc:	4801      	ldr	r0, [pc, #4]	; (80059d4 <__sfp_lock_release+0x8>)
 80059ce:	f000 b8b3 	b.w	8005b38 <__retarget_lock_release_recursive>
 80059d2:	bf00      	nop
 80059d4:	20000309 	.word	0x20000309

080059d8 <__sinit_lock_acquire>:
 80059d8:	4801      	ldr	r0, [pc, #4]	; (80059e0 <__sinit_lock_acquire+0x8>)
 80059da:	f000 b8ac 	b.w	8005b36 <__retarget_lock_acquire_recursive>
 80059de:	bf00      	nop
 80059e0:	2000030a 	.word	0x2000030a

080059e4 <__sinit_lock_release>:
 80059e4:	4801      	ldr	r0, [pc, #4]	; (80059ec <__sinit_lock_release+0x8>)
 80059e6:	f000 b8a7 	b.w	8005b38 <__retarget_lock_release_recursive>
 80059ea:	bf00      	nop
 80059ec:	2000030a 	.word	0x2000030a

080059f0 <__sinit>:
 80059f0:	b510      	push	{r4, lr}
 80059f2:	4604      	mov	r4, r0
 80059f4:	f7ff fff0 	bl	80059d8 <__sinit_lock_acquire>
 80059f8:	69a3      	ldr	r3, [r4, #24]
 80059fa:	b11b      	cbz	r3, 8005a04 <__sinit+0x14>
 80059fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005a00:	f7ff bff0 	b.w	80059e4 <__sinit_lock_release>
 8005a04:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8005a08:	6523      	str	r3, [r4, #80]	; 0x50
 8005a0a:	4b13      	ldr	r3, [pc, #76]	; (8005a58 <__sinit+0x68>)
 8005a0c:	4a13      	ldr	r2, [pc, #76]	; (8005a5c <__sinit+0x6c>)
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	62a2      	str	r2, [r4, #40]	; 0x28
 8005a12:	42a3      	cmp	r3, r4
 8005a14:	bf04      	itt	eq
 8005a16:	2301      	moveq	r3, #1
 8005a18:	61a3      	streq	r3, [r4, #24]
 8005a1a:	4620      	mov	r0, r4
 8005a1c:	f000 f820 	bl	8005a60 <__sfp>
 8005a20:	6060      	str	r0, [r4, #4]
 8005a22:	4620      	mov	r0, r4
 8005a24:	f000 f81c 	bl	8005a60 <__sfp>
 8005a28:	60a0      	str	r0, [r4, #8]
 8005a2a:	4620      	mov	r0, r4
 8005a2c:	f000 f818 	bl	8005a60 <__sfp>
 8005a30:	2200      	movs	r2, #0
 8005a32:	60e0      	str	r0, [r4, #12]
 8005a34:	2104      	movs	r1, #4
 8005a36:	6860      	ldr	r0, [r4, #4]
 8005a38:	f7ff ff82 	bl	8005940 <std>
 8005a3c:	68a0      	ldr	r0, [r4, #8]
 8005a3e:	2201      	movs	r2, #1
 8005a40:	2109      	movs	r1, #9
 8005a42:	f7ff ff7d 	bl	8005940 <std>
 8005a46:	68e0      	ldr	r0, [r4, #12]
 8005a48:	2202      	movs	r2, #2
 8005a4a:	2112      	movs	r1, #18
 8005a4c:	f7ff ff78 	bl	8005940 <std>
 8005a50:	2301      	movs	r3, #1
 8005a52:	61a3      	str	r3, [r4, #24]
 8005a54:	e7d2      	b.n	80059fc <__sinit+0xc>
 8005a56:	bf00      	nop
 8005a58:	08006c80 	.word	0x08006c80
 8005a5c:	08005989 	.word	0x08005989

08005a60 <__sfp>:
 8005a60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a62:	4607      	mov	r7, r0
 8005a64:	f7ff ffac 	bl	80059c0 <__sfp_lock_acquire>
 8005a68:	4b1e      	ldr	r3, [pc, #120]	; (8005ae4 <__sfp+0x84>)
 8005a6a:	681e      	ldr	r6, [r3, #0]
 8005a6c:	69b3      	ldr	r3, [r6, #24]
 8005a6e:	b913      	cbnz	r3, 8005a76 <__sfp+0x16>
 8005a70:	4630      	mov	r0, r6
 8005a72:	f7ff ffbd 	bl	80059f0 <__sinit>
 8005a76:	3648      	adds	r6, #72	; 0x48
 8005a78:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005a7c:	3b01      	subs	r3, #1
 8005a7e:	d503      	bpl.n	8005a88 <__sfp+0x28>
 8005a80:	6833      	ldr	r3, [r6, #0]
 8005a82:	b30b      	cbz	r3, 8005ac8 <__sfp+0x68>
 8005a84:	6836      	ldr	r6, [r6, #0]
 8005a86:	e7f7      	b.n	8005a78 <__sfp+0x18>
 8005a88:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005a8c:	b9d5      	cbnz	r5, 8005ac4 <__sfp+0x64>
 8005a8e:	4b16      	ldr	r3, [pc, #88]	; (8005ae8 <__sfp+0x88>)
 8005a90:	60e3      	str	r3, [r4, #12]
 8005a92:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005a96:	6665      	str	r5, [r4, #100]	; 0x64
 8005a98:	f000 f84c 	bl	8005b34 <__retarget_lock_init_recursive>
 8005a9c:	f7ff ff96 	bl	80059cc <__sfp_lock_release>
 8005aa0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8005aa4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8005aa8:	6025      	str	r5, [r4, #0]
 8005aaa:	61a5      	str	r5, [r4, #24]
 8005aac:	2208      	movs	r2, #8
 8005aae:	4629      	mov	r1, r5
 8005ab0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005ab4:	f7fe face 	bl	8004054 <memset>
 8005ab8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8005abc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8005ac0:	4620      	mov	r0, r4
 8005ac2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005ac4:	3468      	adds	r4, #104	; 0x68
 8005ac6:	e7d9      	b.n	8005a7c <__sfp+0x1c>
 8005ac8:	2104      	movs	r1, #4
 8005aca:	4638      	mov	r0, r7
 8005acc:	f7ff ff62 	bl	8005994 <__sfmoreglue>
 8005ad0:	4604      	mov	r4, r0
 8005ad2:	6030      	str	r0, [r6, #0]
 8005ad4:	2800      	cmp	r0, #0
 8005ad6:	d1d5      	bne.n	8005a84 <__sfp+0x24>
 8005ad8:	f7ff ff78 	bl	80059cc <__sfp_lock_release>
 8005adc:	230c      	movs	r3, #12
 8005ade:	603b      	str	r3, [r7, #0]
 8005ae0:	e7ee      	b.n	8005ac0 <__sfp+0x60>
 8005ae2:	bf00      	nop
 8005ae4:	08006c80 	.word	0x08006c80
 8005ae8:	ffff0001 	.word	0xffff0001

08005aec <_fwalk_reent>:
 8005aec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005af0:	4606      	mov	r6, r0
 8005af2:	4688      	mov	r8, r1
 8005af4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005af8:	2700      	movs	r7, #0
 8005afa:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005afe:	f1b9 0901 	subs.w	r9, r9, #1
 8005b02:	d505      	bpl.n	8005b10 <_fwalk_reent+0x24>
 8005b04:	6824      	ldr	r4, [r4, #0]
 8005b06:	2c00      	cmp	r4, #0
 8005b08:	d1f7      	bne.n	8005afa <_fwalk_reent+0xe>
 8005b0a:	4638      	mov	r0, r7
 8005b0c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005b10:	89ab      	ldrh	r3, [r5, #12]
 8005b12:	2b01      	cmp	r3, #1
 8005b14:	d907      	bls.n	8005b26 <_fwalk_reent+0x3a>
 8005b16:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005b1a:	3301      	adds	r3, #1
 8005b1c:	d003      	beq.n	8005b26 <_fwalk_reent+0x3a>
 8005b1e:	4629      	mov	r1, r5
 8005b20:	4630      	mov	r0, r6
 8005b22:	47c0      	blx	r8
 8005b24:	4307      	orrs	r7, r0
 8005b26:	3568      	adds	r5, #104	; 0x68
 8005b28:	e7e9      	b.n	8005afe <_fwalk_reent+0x12>
	...

08005b2c <_localeconv_r>:
 8005b2c:	4800      	ldr	r0, [pc, #0]	; (8005b30 <_localeconv_r+0x4>)
 8005b2e:	4770      	bx	lr
 8005b30:	20000160 	.word	0x20000160

08005b34 <__retarget_lock_init_recursive>:
 8005b34:	4770      	bx	lr

08005b36 <__retarget_lock_acquire_recursive>:
 8005b36:	4770      	bx	lr

08005b38 <__retarget_lock_release_recursive>:
 8005b38:	4770      	bx	lr

08005b3a <__swhatbuf_r>:
 8005b3a:	b570      	push	{r4, r5, r6, lr}
 8005b3c:	460e      	mov	r6, r1
 8005b3e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005b42:	2900      	cmp	r1, #0
 8005b44:	b096      	sub	sp, #88	; 0x58
 8005b46:	4614      	mov	r4, r2
 8005b48:	461d      	mov	r5, r3
 8005b4a:	da08      	bge.n	8005b5e <__swhatbuf_r+0x24>
 8005b4c:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8005b50:	2200      	movs	r2, #0
 8005b52:	602a      	str	r2, [r5, #0]
 8005b54:	061a      	lsls	r2, r3, #24
 8005b56:	d410      	bmi.n	8005b7a <__swhatbuf_r+0x40>
 8005b58:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005b5c:	e00e      	b.n	8005b7c <__swhatbuf_r+0x42>
 8005b5e:	466a      	mov	r2, sp
 8005b60:	f000 fd86 	bl	8006670 <_fstat_r>
 8005b64:	2800      	cmp	r0, #0
 8005b66:	dbf1      	blt.n	8005b4c <__swhatbuf_r+0x12>
 8005b68:	9a01      	ldr	r2, [sp, #4]
 8005b6a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005b6e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005b72:	425a      	negs	r2, r3
 8005b74:	415a      	adcs	r2, r3
 8005b76:	602a      	str	r2, [r5, #0]
 8005b78:	e7ee      	b.n	8005b58 <__swhatbuf_r+0x1e>
 8005b7a:	2340      	movs	r3, #64	; 0x40
 8005b7c:	2000      	movs	r0, #0
 8005b7e:	6023      	str	r3, [r4, #0]
 8005b80:	b016      	add	sp, #88	; 0x58
 8005b82:	bd70      	pop	{r4, r5, r6, pc}

08005b84 <__smakebuf_r>:
 8005b84:	898b      	ldrh	r3, [r1, #12]
 8005b86:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005b88:	079d      	lsls	r5, r3, #30
 8005b8a:	4606      	mov	r6, r0
 8005b8c:	460c      	mov	r4, r1
 8005b8e:	d507      	bpl.n	8005ba0 <__smakebuf_r+0x1c>
 8005b90:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005b94:	6023      	str	r3, [r4, #0]
 8005b96:	6123      	str	r3, [r4, #16]
 8005b98:	2301      	movs	r3, #1
 8005b9a:	6163      	str	r3, [r4, #20]
 8005b9c:	b002      	add	sp, #8
 8005b9e:	bd70      	pop	{r4, r5, r6, pc}
 8005ba0:	ab01      	add	r3, sp, #4
 8005ba2:	466a      	mov	r2, sp
 8005ba4:	f7ff ffc9 	bl	8005b3a <__swhatbuf_r>
 8005ba8:	9900      	ldr	r1, [sp, #0]
 8005baa:	4605      	mov	r5, r0
 8005bac:	4630      	mov	r0, r6
 8005bae:	f000 fc45 	bl	800643c <_malloc_r>
 8005bb2:	b948      	cbnz	r0, 8005bc8 <__smakebuf_r+0x44>
 8005bb4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005bb8:	059a      	lsls	r2, r3, #22
 8005bba:	d4ef      	bmi.n	8005b9c <__smakebuf_r+0x18>
 8005bbc:	f023 0303 	bic.w	r3, r3, #3
 8005bc0:	f043 0302 	orr.w	r3, r3, #2
 8005bc4:	81a3      	strh	r3, [r4, #12]
 8005bc6:	e7e3      	b.n	8005b90 <__smakebuf_r+0xc>
 8005bc8:	4b0d      	ldr	r3, [pc, #52]	; (8005c00 <__smakebuf_r+0x7c>)
 8005bca:	62b3      	str	r3, [r6, #40]	; 0x28
 8005bcc:	89a3      	ldrh	r3, [r4, #12]
 8005bce:	6020      	str	r0, [r4, #0]
 8005bd0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005bd4:	81a3      	strh	r3, [r4, #12]
 8005bd6:	9b00      	ldr	r3, [sp, #0]
 8005bd8:	6163      	str	r3, [r4, #20]
 8005bda:	9b01      	ldr	r3, [sp, #4]
 8005bdc:	6120      	str	r0, [r4, #16]
 8005bde:	b15b      	cbz	r3, 8005bf8 <__smakebuf_r+0x74>
 8005be0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005be4:	4630      	mov	r0, r6
 8005be6:	f000 fd55 	bl	8006694 <_isatty_r>
 8005bea:	b128      	cbz	r0, 8005bf8 <__smakebuf_r+0x74>
 8005bec:	89a3      	ldrh	r3, [r4, #12]
 8005bee:	f023 0303 	bic.w	r3, r3, #3
 8005bf2:	f043 0301 	orr.w	r3, r3, #1
 8005bf6:	81a3      	strh	r3, [r4, #12]
 8005bf8:	89a0      	ldrh	r0, [r4, #12]
 8005bfa:	4305      	orrs	r5, r0
 8005bfc:	81a5      	strh	r5, [r4, #12]
 8005bfe:	e7cd      	b.n	8005b9c <__smakebuf_r+0x18>
 8005c00:	08005989 	.word	0x08005989

08005c04 <malloc>:
 8005c04:	4b02      	ldr	r3, [pc, #8]	; (8005c10 <malloc+0xc>)
 8005c06:	4601      	mov	r1, r0
 8005c08:	6818      	ldr	r0, [r3, #0]
 8005c0a:	f000 bc17 	b.w	800643c <_malloc_r>
 8005c0e:	bf00      	nop
 8005c10:	2000000c 	.word	0x2000000c

08005c14 <memcpy>:
 8005c14:	440a      	add	r2, r1
 8005c16:	4291      	cmp	r1, r2
 8005c18:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8005c1c:	d100      	bne.n	8005c20 <memcpy+0xc>
 8005c1e:	4770      	bx	lr
 8005c20:	b510      	push	{r4, lr}
 8005c22:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005c26:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005c2a:	4291      	cmp	r1, r2
 8005c2c:	d1f9      	bne.n	8005c22 <memcpy+0xe>
 8005c2e:	bd10      	pop	{r4, pc}

08005c30 <_Balloc>:
 8005c30:	b570      	push	{r4, r5, r6, lr}
 8005c32:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8005c34:	4604      	mov	r4, r0
 8005c36:	460d      	mov	r5, r1
 8005c38:	b976      	cbnz	r6, 8005c58 <_Balloc+0x28>
 8005c3a:	2010      	movs	r0, #16
 8005c3c:	f7ff ffe2 	bl	8005c04 <malloc>
 8005c40:	4602      	mov	r2, r0
 8005c42:	6260      	str	r0, [r4, #36]	; 0x24
 8005c44:	b920      	cbnz	r0, 8005c50 <_Balloc+0x20>
 8005c46:	4b18      	ldr	r3, [pc, #96]	; (8005ca8 <_Balloc+0x78>)
 8005c48:	4818      	ldr	r0, [pc, #96]	; (8005cac <_Balloc+0x7c>)
 8005c4a:	2166      	movs	r1, #102	; 0x66
 8005c4c:	f000 fcd0 	bl	80065f0 <__assert_func>
 8005c50:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005c54:	6006      	str	r6, [r0, #0]
 8005c56:	60c6      	str	r6, [r0, #12]
 8005c58:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8005c5a:	68f3      	ldr	r3, [r6, #12]
 8005c5c:	b183      	cbz	r3, 8005c80 <_Balloc+0x50>
 8005c5e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005c60:	68db      	ldr	r3, [r3, #12]
 8005c62:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8005c66:	b9b8      	cbnz	r0, 8005c98 <_Balloc+0x68>
 8005c68:	2101      	movs	r1, #1
 8005c6a:	fa01 f605 	lsl.w	r6, r1, r5
 8005c6e:	1d72      	adds	r2, r6, #5
 8005c70:	0092      	lsls	r2, r2, #2
 8005c72:	4620      	mov	r0, r4
 8005c74:	f000 fb60 	bl	8006338 <_calloc_r>
 8005c78:	b160      	cbz	r0, 8005c94 <_Balloc+0x64>
 8005c7a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8005c7e:	e00e      	b.n	8005c9e <_Balloc+0x6e>
 8005c80:	2221      	movs	r2, #33	; 0x21
 8005c82:	2104      	movs	r1, #4
 8005c84:	4620      	mov	r0, r4
 8005c86:	f000 fb57 	bl	8006338 <_calloc_r>
 8005c8a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005c8c:	60f0      	str	r0, [r6, #12]
 8005c8e:	68db      	ldr	r3, [r3, #12]
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d1e4      	bne.n	8005c5e <_Balloc+0x2e>
 8005c94:	2000      	movs	r0, #0
 8005c96:	bd70      	pop	{r4, r5, r6, pc}
 8005c98:	6802      	ldr	r2, [r0, #0]
 8005c9a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8005c9e:	2300      	movs	r3, #0
 8005ca0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005ca4:	e7f7      	b.n	8005c96 <_Balloc+0x66>
 8005ca6:	bf00      	nop
 8005ca8:	08006cc5 	.word	0x08006cc5
 8005cac:	08006da8 	.word	0x08006da8

08005cb0 <_Bfree>:
 8005cb0:	b570      	push	{r4, r5, r6, lr}
 8005cb2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8005cb4:	4605      	mov	r5, r0
 8005cb6:	460c      	mov	r4, r1
 8005cb8:	b976      	cbnz	r6, 8005cd8 <_Bfree+0x28>
 8005cba:	2010      	movs	r0, #16
 8005cbc:	f7ff ffa2 	bl	8005c04 <malloc>
 8005cc0:	4602      	mov	r2, r0
 8005cc2:	6268      	str	r0, [r5, #36]	; 0x24
 8005cc4:	b920      	cbnz	r0, 8005cd0 <_Bfree+0x20>
 8005cc6:	4b09      	ldr	r3, [pc, #36]	; (8005cec <_Bfree+0x3c>)
 8005cc8:	4809      	ldr	r0, [pc, #36]	; (8005cf0 <_Bfree+0x40>)
 8005cca:	218a      	movs	r1, #138	; 0x8a
 8005ccc:	f000 fc90 	bl	80065f0 <__assert_func>
 8005cd0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005cd4:	6006      	str	r6, [r0, #0]
 8005cd6:	60c6      	str	r6, [r0, #12]
 8005cd8:	b13c      	cbz	r4, 8005cea <_Bfree+0x3a>
 8005cda:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005cdc:	6862      	ldr	r2, [r4, #4]
 8005cde:	68db      	ldr	r3, [r3, #12]
 8005ce0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005ce4:	6021      	str	r1, [r4, #0]
 8005ce6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8005cea:	bd70      	pop	{r4, r5, r6, pc}
 8005cec:	08006cc5 	.word	0x08006cc5
 8005cf0:	08006da8 	.word	0x08006da8

08005cf4 <__multadd>:
 8005cf4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005cf8:	690d      	ldr	r5, [r1, #16]
 8005cfa:	4607      	mov	r7, r0
 8005cfc:	460c      	mov	r4, r1
 8005cfe:	461e      	mov	r6, r3
 8005d00:	f101 0c14 	add.w	ip, r1, #20
 8005d04:	2000      	movs	r0, #0
 8005d06:	f8dc 3000 	ldr.w	r3, [ip]
 8005d0a:	b299      	uxth	r1, r3
 8005d0c:	fb02 6101 	mla	r1, r2, r1, r6
 8005d10:	0c1e      	lsrs	r6, r3, #16
 8005d12:	0c0b      	lsrs	r3, r1, #16
 8005d14:	fb02 3306 	mla	r3, r2, r6, r3
 8005d18:	b289      	uxth	r1, r1
 8005d1a:	3001      	adds	r0, #1
 8005d1c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8005d20:	4285      	cmp	r5, r0
 8005d22:	f84c 1b04 	str.w	r1, [ip], #4
 8005d26:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8005d2a:	dcec      	bgt.n	8005d06 <__multadd+0x12>
 8005d2c:	b30e      	cbz	r6, 8005d72 <__multadd+0x7e>
 8005d2e:	68a3      	ldr	r3, [r4, #8]
 8005d30:	42ab      	cmp	r3, r5
 8005d32:	dc19      	bgt.n	8005d68 <__multadd+0x74>
 8005d34:	6861      	ldr	r1, [r4, #4]
 8005d36:	4638      	mov	r0, r7
 8005d38:	3101      	adds	r1, #1
 8005d3a:	f7ff ff79 	bl	8005c30 <_Balloc>
 8005d3e:	4680      	mov	r8, r0
 8005d40:	b928      	cbnz	r0, 8005d4e <__multadd+0x5a>
 8005d42:	4602      	mov	r2, r0
 8005d44:	4b0c      	ldr	r3, [pc, #48]	; (8005d78 <__multadd+0x84>)
 8005d46:	480d      	ldr	r0, [pc, #52]	; (8005d7c <__multadd+0x88>)
 8005d48:	21b5      	movs	r1, #181	; 0xb5
 8005d4a:	f000 fc51 	bl	80065f0 <__assert_func>
 8005d4e:	6922      	ldr	r2, [r4, #16]
 8005d50:	3202      	adds	r2, #2
 8005d52:	f104 010c 	add.w	r1, r4, #12
 8005d56:	0092      	lsls	r2, r2, #2
 8005d58:	300c      	adds	r0, #12
 8005d5a:	f7ff ff5b 	bl	8005c14 <memcpy>
 8005d5e:	4621      	mov	r1, r4
 8005d60:	4638      	mov	r0, r7
 8005d62:	f7ff ffa5 	bl	8005cb0 <_Bfree>
 8005d66:	4644      	mov	r4, r8
 8005d68:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8005d6c:	3501      	adds	r5, #1
 8005d6e:	615e      	str	r6, [r3, #20]
 8005d70:	6125      	str	r5, [r4, #16]
 8005d72:	4620      	mov	r0, r4
 8005d74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005d78:	08006d37 	.word	0x08006d37
 8005d7c:	08006da8 	.word	0x08006da8

08005d80 <__hi0bits>:
 8005d80:	0c03      	lsrs	r3, r0, #16
 8005d82:	041b      	lsls	r3, r3, #16
 8005d84:	b9d3      	cbnz	r3, 8005dbc <__hi0bits+0x3c>
 8005d86:	0400      	lsls	r0, r0, #16
 8005d88:	2310      	movs	r3, #16
 8005d8a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8005d8e:	bf04      	itt	eq
 8005d90:	0200      	lsleq	r0, r0, #8
 8005d92:	3308      	addeq	r3, #8
 8005d94:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8005d98:	bf04      	itt	eq
 8005d9a:	0100      	lsleq	r0, r0, #4
 8005d9c:	3304      	addeq	r3, #4
 8005d9e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8005da2:	bf04      	itt	eq
 8005da4:	0080      	lsleq	r0, r0, #2
 8005da6:	3302      	addeq	r3, #2
 8005da8:	2800      	cmp	r0, #0
 8005daa:	db05      	blt.n	8005db8 <__hi0bits+0x38>
 8005dac:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8005db0:	f103 0301 	add.w	r3, r3, #1
 8005db4:	bf08      	it	eq
 8005db6:	2320      	moveq	r3, #32
 8005db8:	4618      	mov	r0, r3
 8005dba:	4770      	bx	lr
 8005dbc:	2300      	movs	r3, #0
 8005dbe:	e7e4      	b.n	8005d8a <__hi0bits+0xa>

08005dc0 <__lo0bits>:
 8005dc0:	6803      	ldr	r3, [r0, #0]
 8005dc2:	f013 0207 	ands.w	r2, r3, #7
 8005dc6:	4601      	mov	r1, r0
 8005dc8:	d00b      	beq.n	8005de2 <__lo0bits+0x22>
 8005dca:	07da      	lsls	r2, r3, #31
 8005dcc:	d423      	bmi.n	8005e16 <__lo0bits+0x56>
 8005dce:	0798      	lsls	r0, r3, #30
 8005dd0:	bf49      	itett	mi
 8005dd2:	085b      	lsrmi	r3, r3, #1
 8005dd4:	089b      	lsrpl	r3, r3, #2
 8005dd6:	2001      	movmi	r0, #1
 8005dd8:	600b      	strmi	r3, [r1, #0]
 8005dda:	bf5c      	itt	pl
 8005ddc:	600b      	strpl	r3, [r1, #0]
 8005dde:	2002      	movpl	r0, #2
 8005de0:	4770      	bx	lr
 8005de2:	b298      	uxth	r0, r3
 8005de4:	b9a8      	cbnz	r0, 8005e12 <__lo0bits+0x52>
 8005de6:	0c1b      	lsrs	r3, r3, #16
 8005de8:	2010      	movs	r0, #16
 8005dea:	b2da      	uxtb	r2, r3
 8005dec:	b90a      	cbnz	r2, 8005df2 <__lo0bits+0x32>
 8005dee:	3008      	adds	r0, #8
 8005df0:	0a1b      	lsrs	r3, r3, #8
 8005df2:	071a      	lsls	r2, r3, #28
 8005df4:	bf04      	itt	eq
 8005df6:	091b      	lsreq	r3, r3, #4
 8005df8:	3004      	addeq	r0, #4
 8005dfa:	079a      	lsls	r2, r3, #30
 8005dfc:	bf04      	itt	eq
 8005dfe:	089b      	lsreq	r3, r3, #2
 8005e00:	3002      	addeq	r0, #2
 8005e02:	07da      	lsls	r2, r3, #31
 8005e04:	d403      	bmi.n	8005e0e <__lo0bits+0x4e>
 8005e06:	085b      	lsrs	r3, r3, #1
 8005e08:	f100 0001 	add.w	r0, r0, #1
 8005e0c:	d005      	beq.n	8005e1a <__lo0bits+0x5a>
 8005e0e:	600b      	str	r3, [r1, #0]
 8005e10:	4770      	bx	lr
 8005e12:	4610      	mov	r0, r2
 8005e14:	e7e9      	b.n	8005dea <__lo0bits+0x2a>
 8005e16:	2000      	movs	r0, #0
 8005e18:	4770      	bx	lr
 8005e1a:	2020      	movs	r0, #32
 8005e1c:	4770      	bx	lr
	...

08005e20 <__i2b>:
 8005e20:	b510      	push	{r4, lr}
 8005e22:	460c      	mov	r4, r1
 8005e24:	2101      	movs	r1, #1
 8005e26:	f7ff ff03 	bl	8005c30 <_Balloc>
 8005e2a:	4602      	mov	r2, r0
 8005e2c:	b928      	cbnz	r0, 8005e3a <__i2b+0x1a>
 8005e2e:	4b05      	ldr	r3, [pc, #20]	; (8005e44 <__i2b+0x24>)
 8005e30:	4805      	ldr	r0, [pc, #20]	; (8005e48 <__i2b+0x28>)
 8005e32:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8005e36:	f000 fbdb 	bl	80065f0 <__assert_func>
 8005e3a:	2301      	movs	r3, #1
 8005e3c:	6144      	str	r4, [r0, #20]
 8005e3e:	6103      	str	r3, [r0, #16]
 8005e40:	bd10      	pop	{r4, pc}
 8005e42:	bf00      	nop
 8005e44:	08006d37 	.word	0x08006d37
 8005e48:	08006da8 	.word	0x08006da8

08005e4c <__multiply>:
 8005e4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e50:	4691      	mov	r9, r2
 8005e52:	690a      	ldr	r2, [r1, #16]
 8005e54:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8005e58:	429a      	cmp	r2, r3
 8005e5a:	bfb8      	it	lt
 8005e5c:	460b      	movlt	r3, r1
 8005e5e:	460c      	mov	r4, r1
 8005e60:	bfbc      	itt	lt
 8005e62:	464c      	movlt	r4, r9
 8005e64:	4699      	movlt	r9, r3
 8005e66:	6927      	ldr	r7, [r4, #16]
 8005e68:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8005e6c:	68a3      	ldr	r3, [r4, #8]
 8005e6e:	6861      	ldr	r1, [r4, #4]
 8005e70:	eb07 060a 	add.w	r6, r7, sl
 8005e74:	42b3      	cmp	r3, r6
 8005e76:	b085      	sub	sp, #20
 8005e78:	bfb8      	it	lt
 8005e7a:	3101      	addlt	r1, #1
 8005e7c:	f7ff fed8 	bl	8005c30 <_Balloc>
 8005e80:	b930      	cbnz	r0, 8005e90 <__multiply+0x44>
 8005e82:	4602      	mov	r2, r0
 8005e84:	4b44      	ldr	r3, [pc, #272]	; (8005f98 <__multiply+0x14c>)
 8005e86:	4845      	ldr	r0, [pc, #276]	; (8005f9c <__multiply+0x150>)
 8005e88:	f240 115d 	movw	r1, #349	; 0x15d
 8005e8c:	f000 fbb0 	bl	80065f0 <__assert_func>
 8005e90:	f100 0514 	add.w	r5, r0, #20
 8005e94:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8005e98:	462b      	mov	r3, r5
 8005e9a:	2200      	movs	r2, #0
 8005e9c:	4543      	cmp	r3, r8
 8005e9e:	d321      	bcc.n	8005ee4 <__multiply+0x98>
 8005ea0:	f104 0314 	add.w	r3, r4, #20
 8005ea4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8005ea8:	f109 0314 	add.w	r3, r9, #20
 8005eac:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8005eb0:	9202      	str	r2, [sp, #8]
 8005eb2:	1b3a      	subs	r2, r7, r4
 8005eb4:	3a15      	subs	r2, #21
 8005eb6:	f022 0203 	bic.w	r2, r2, #3
 8005eba:	3204      	adds	r2, #4
 8005ebc:	f104 0115 	add.w	r1, r4, #21
 8005ec0:	428f      	cmp	r7, r1
 8005ec2:	bf38      	it	cc
 8005ec4:	2204      	movcc	r2, #4
 8005ec6:	9201      	str	r2, [sp, #4]
 8005ec8:	9a02      	ldr	r2, [sp, #8]
 8005eca:	9303      	str	r3, [sp, #12]
 8005ecc:	429a      	cmp	r2, r3
 8005ece:	d80c      	bhi.n	8005eea <__multiply+0x9e>
 8005ed0:	2e00      	cmp	r6, #0
 8005ed2:	dd03      	ble.n	8005edc <__multiply+0x90>
 8005ed4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d05a      	beq.n	8005f92 <__multiply+0x146>
 8005edc:	6106      	str	r6, [r0, #16]
 8005ede:	b005      	add	sp, #20
 8005ee0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005ee4:	f843 2b04 	str.w	r2, [r3], #4
 8005ee8:	e7d8      	b.n	8005e9c <__multiply+0x50>
 8005eea:	f8b3 a000 	ldrh.w	sl, [r3]
 8005eee:	f1ba 0f00 	cmp.w	sl, #0
 8005ef2:	d024      	beq.n	8005f3e <__multiply+0xf2>
 8005ef4:	f104 0e14 	add.w	lr, r4, #20
 8005ef8:	46a9      	mov	r9, r5
 8005efa:	f04f 0c00 	mov.w	ip, #0
 8005efe:	f85e 2b04 	ldr.w	r2, [lr], #4
 8005f02:	f8d9 1000 	ldr.w	r1, [r9]
 8005f06:	fa1f fb82 	uxth.w	fp, r2
 8005f0a:	b289      	uxth	r1, r1
 8005f0c:	fb0a 110b 	mla	r1, sl, fp, r1
 8005f10:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8005f14:	f8d9 2000 	ldr.w	r2, [r9]
 8005f18:	4461      	add	r1, ip
 8005f1a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8005f1e:	fb0a c20b 	mla	r2, sl, fp, ip
 8005f22:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8005f26:	b289      	uxth	r1, r1
 8005f28:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8005f2c:	4577      	cmp	r7, lr
 8005f2e:	f849 1b04 	str.w	r1, [r9], #4
 8005f32:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8005f36:	d8e2      	bhi.n	8005efe <__multiply+0xb2>
 8005f38:	9a01      	ldr	r2, [sp, #4]
 8005f3a:	f845 c002 	str.w	ip, [r5, r2]
 8005f3e:	9a03      	ldr	r2, [sp, #12]
 8005f40:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8005f44:	3304      	adds	r3, #4
 8005f46:	f1b9 0f00 	cmp.w	r9, #0
 8005f4a:	d020      	beq.n	8005f8e <__multiply+0x142>
 8005f4c:	6829      	ldr	r1, [r5, #0]
 8005f4e:	f104 0c14 	add.w	ip, r4, #20
 8005f52:	46ae      	mov	lr, r5
 8005f54:	f04f 0a00 	mov.w	sl, #0
 8005f58:	f8bc b000 	ldrh.w	fp, [ip]
 8005f5c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8005f60:	fb09 220b 	mla	r2, r9, fp, r2
 8005f64:	4492      	add	sl, r2
 8005f66:	b289      	uxth	r1, r1
 8005f68:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8005f6c:	f84e 1b04 	str.w	r1, [lr], #4
 8005f70:	f85c 2b04 	ldr.w	r2, [ip], #4
 8005f74:	f8be 1000 	ldrh.w	r1, [lr]
 8005f78:	0c12      	lsrs	r2, r2, #16
 8005f7a:	fb09 1102 	mla	r1, r9, r2, r1
 8005f7e:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8005f82:	4567      	cmp	r7, ip
 8005f84:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8005f88:	d8e6      	bhi.n	8005f58 <__multiply+0x10c>
 8005f8a:	9a01      	ldr	r2, [sp, #4]
 8005f8c:	50a9      	str	r1, [r5, r2]
 8005f8e:	3504      	adds	r5, #4
 8005f90:	e79a      	b.n	8005ec8 <__multiply+0x7c>
 8005f92:	3e01      	subs	r6, #1
 8005f94:	e79c      	b.n	8005ed0 <__multiply+0x84>
 8005f96:	bf00      	nop
 8005f98:	08006d37 	.word	0x08006d37
 8005f9c:	08006da8 	.word	0x08006da8

08005fa0 <__pow5mult>:
 8005fa0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005fa4:	4615      	mov	r5, r2
 8005fa6:	f012 0203 	ands.w	r2, r2, #3
 8005faa:	4606      	mov	r6, r0
 8005fac:	460f      	mov	r7, r1
 8005fae:	d007      	beq.n	8005fc0 <__pow5mult+0x20>
 8005fb0:	4c25      	ldr	r4, [pc, #148]	; (8006048 <__pow5mult+0xa8>)
 8005fb2:	3a01      	subs	r2, #1
 8005fb4:	2300      	movs	r3, #0
 8005fb6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8005fba:	f7ff fe9b 	bl	8005cf4 <__multadd>
 8005fbe:	4607      	mov	r7, r0
 8005fc0:	10ad      	asrs	r5, r5, #2
 8005fc2:	d03d      	beq.n	8006040 <__pow5mult+0xa0>
 8005fc4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8005fc6:	b97c      	cbnz	r4, 8005fe8 <__pow5mult+0x48>
 8005fc8:	2010      	movs	r0, #16
 8005fca:	f7ff fe1b 	bl	8005c04 <malloc>
 8005fce:	4602      	mov	r2, r0
 8005fd0:	6270      	str	r0, [r6, #36]	; 0x24
 8005fd2:	b928      	cbnz	r0, 8005fe0 <__pow5mult+0x40>
 8005fd4:	4b1d      	ldr	r3, [pc, #116]	; (800604c <__pow5mult+0xac>)
 8005fd6:	481e      	ldr	r0, [pc, #120]	; (8006050 <__pow5mult+0xb0>)
 8005fd8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8005fdc:	f000 fb08 	bl	80065f0 <__assert_func>
 8005fe0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005fe4:	6004      	str	r4, [r0, #0]
 8005fe6:	60c4      	str	r4, [r0, #12]
 8005fe8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8005fec:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8005ff0:	b94c      	cbnz	r4, 8006006 <__pow5mult+0x66>
 8005ff2:	f240 2171 	movw	r1, #625	; 0x271
 8005ff6:	4630      	mov	r0, r6
 8005ff8:	f7ff ff12 	bl	8005e20 <__i2b>
 8005ffc:	2300      	movs	r3, #0
 8005ffe:	f8c8 0008 	str.w	r0, [r8, #8]
 8006002:	4604      	mov	r4, r0
 8006004:	6003      	str	r3, [r0, #0]
 8006006:	f04f 0900 	mov.w	r9, #0
 800600a:	07eb      	lsls	r3, r5, #31
 800600c:	d50a      	bpl.n	8006024 <__pow5mult+0x84>
 800600e:	4639      	mov	r1, r7
 8006010:	4622      	mov	r2, r4
 8006012:	4630      	mov	r0, r6
 8006014:	f7ff ff1a 	bl	8005e4c <__multiply>
 8006018:	4639      	mov	r1, r7
 800601a:	4680      	mov	r8, r0
 800601c:	4630      	mov	r0, r6
 800601e:	f7ff fe47 	bl	8005cb0 <_Bfree>
 8006022:	4647      	mov	r7, r8
 8006024:	106d      	asrs	r5, r5, #1
 8006026:	d00b      	beq.n	8006040 <__pow5mult+0xa0>
 8006028:	6820      	ldr	r0, [r4, #0]
 800602a:	b938      	cbnz	r0, 800603c <__pow5mult+0x9c>
 800602c:	4622      	mov	r2, r4
 800602e:	4621      	mov	r1, r4
 8006030:	4630      	mov	r0, r6
 8006032:	f7ff ff0b 	bl	8005e4c <__multiply>
 8006036:	6020      	str	r0, [r4, #0]
 8006038:	f8c0 9000 	str.w	r9, [r0]
 800603c:	4604      	mov	r4, r0
 800603e:	e7e4      	b.n	800600a <__pow5mult+0x6a>
 8006040:	4638      	mov	r0, r7
 8006042:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006046:	bf00      	nop
 8006048:	08006ef8 	.word	0x08006ef8
 800604c:	08006cc5 	.word	0x08006cc5
 8006050:	08006da8 	.word	0x08006da8

08006054 <__lshift>:
 8006054:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006058:	460c      	mov	r4, r1
 800605a:	6849      	ldr	r1, [r1, #4]
 800605c:	6923      	ldr	r3, [r4, #16]
 800605e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8006062:	68a3      	ldr	r3, [r4, #8]
 8006064:	4607      	mov	r7, r0
 8006066:	4691      	mov	r9, r2
 8006068:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800606c:	f108 0601 	add.w	r6, r8, #1
 8006070:	42b3      	cmp	r3, r6
 8006072:	db0b      	blt.n	800608c <__lshift+0x38>
 8006074:	4638      	mov	r0, r7
 8006076:	f7ff fddb 	bl	8005c30 <_Balloc>
 800607a:	4605      	mov	r5, r0
 800607c:	b948      	cbnz	r0, 8006092 <__lshift+0x3e>
 800607e:	4602      	mov	r2, r0
 8006080:	4b2a      	ldr	r3, [pc, #168]	; (800612c <__lshift+0xd8>)
 8006082:	482b      	ldr	r0, [pc, #172]	; (8006130 <__lshift+0xdc>)
 8006084:	f240 11d9 	movw	r1, #473	; 0x1d9
 8006088:	f000 fab2 	bl	80065f0 <__assert_func>
 800608c:	3101      	adds	r1, #1
 800608e:	005b      	lsls	r3, r3, #1
 8006090:	e7ee      	b.n	8006070 <__lshift+0x1c>
 8006092:	2300      	movs	r3, #0
 8006094:	f100 0114 	add.w	r1, r0, #20
 8006098:	f100 0210 	add.w	r2, r0, #16
 800609c:	4618      	mov	r0, r3
 800609e:	4553      	cmp	r3, sl
 80060a0:	db37      	blt.n	8006112 <__lshift+0xbe>
 80060a2:	6920      	ldr	r0, [r4, #16]
 80060a4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80060a8:	f104 0314 	add.w	r3, r4, #20
 80060ac:	f019 091f 	ands.w	r9, r9, #31
 80060b0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80060b4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80060b8:	d02f      	beq.n	800611a <__lshift+0xc6>
 80060ba:	f1c9 0e20 	rsb	lr, r9, #32
 80060be:	468a      	mov	sl, r1
 80060c0:	f04f 0c00 	mov.w	ip, #0
 80060c4:	681a      	ldr	r2, [r3, #0]
 80060c6:	fa02 f209 	lsl.w	r2, r2, r9
 80060ca:	ea42 020c 	orr.w	r2, r2, ip
 80060ce:	f84a 2b04 	str.w	r2, [sl], #4
 80060d2:	f853 2b04 	ldr.w	r2, [r3], #4
 80060d6:	4298      	cmp	r0, r3
 80060d8:	fa22 fc0e 	lsr.w	ip, r2, lr
 80060dc:	d8f2      	bhi.n	80060c4 <__lshift+0x70>
 80060de:	1b03      	subs	r3, r0, r4
 80060e0:	3b15      	subs	r3, #21
 80060e2:	f023 0303 	bic.w	r3, r3, #3
 80060e6:	3304      	adds	r3, #4
 80060e8:	f104 0215 	add.w	r2, r4, #21
 80060ec:	4290      	cmp	r0, r2
 80060ee:	bf38      	it	cc
 80060f0:	2304      	movcc	r3, #4
 80060f2:	f841 c003 	str.w	ip, [r1, r3]
 80060f6:	f1bc 0f00 	cmp.w	ip, #0
 80060fa:	d001      	beq.n	8006100 <__lshift+0xac>
 80060fc:	f108 0602 	add.w	r6, r8, #2
 8006100:	3e01      	subs	r6, #1
 8006102:	4638      	mov	r0, r7
 8006104:	612e      	str	r6, [r5, #16]
 8006106:	4621      	mov	r1, r4
 8006108:	f7ff fdd2 	bl	8005cb0 <_Bfree>
 800610c:	4628      	mov	r0, r5
 800610e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006112:	f842 0f04 	str.w	r0, [r2, #4]!
 8006116:	3301      	adds	r3, #1
 8006118:	e7c1      	b.n	800609e <__lshift+0x4a>
 800611a:	3904      	subs	r1, #4
 800611c:	f853 2b04 	ldr.w	r2, [r3], #4
 8006120:	f841 2f04 	str.w	r2, [r1, #4]!
 8006124:	4298      	cmp	r0, r3
 8006126:	d8f9      	bhi.n	800611c <__lshift+0xc8>
 8006128:	e7ea      	b.n	8006100 <__lshift+0xac>
 800612a:	bf00      	nop
 800612c:	08006d37 	.word	0x08006d37
 8006130:	08006da8 	.word	0x08006da8

08006134 <__mcmp>:
 8006134:	b530      	push	{r4, r5, lr}
 8006136:	6902      	ldr	r2, [r0, #16]
 8006138:	690c      	ldr	r4, [r1, #16]
 800613a:	1b12      	subs	r2, r2, r4
 800613c:	d10e      	bne.n	800615c <__mcmp+0x28>
 800613e:	f100 0314 	add.w	r3, r0, #20
 8006142:	3114      	adds	r1, #20
 8006144:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8006148:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800614c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8006150:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8006154:	42a5      	cmp	r5, r4
 8006156:	d003      	beq.n	8006160 <__mcmp+0x2c>
 8006158:	d305      	bcc.n	8006166 <__mcmp+0x32>
 800615a:	2201      	movs	r2, #1
 800615c:	4610      	mov	r0, r2
 800615e:	bd30      	pop	{r4, r5, pc}
 8006160:	4283      	cmp	r3, r0
 8006162:	d3f3      	bcc.n	800614c <__mcmp+0x18>
 8006164:	e7fa      	b.n	800615c <__mcmp+0x28>
 8006166:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800616a:	e7f7      	b.n	800615c <__mcmp+0x28>

0800616c <__mdiff>:
 800616c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006170:	460c      	mov	r4, r1
 8006172:	4606      	mov	r6, r0
 8006174:	4611      	mov	r1, r2
 8006176:	4620      	mov	r0, r4
 8006178:	4690      	mov	r8, r2
 800617a:	f7ff ffdb 	bl	8006134 <__mcmp>
 800617e:	1e05      	subs	r5, r0, #0
 8006180:	d110      	bne.n	80061a4 <__mdiff+0x38>
 8006182:	4629      	mov	r1, r5
 8006184:	4630      	mov	r0, r6
 8006186:	f7ff fd53 	bl	8005c30 <_Balloc>
 800618a:	b930      	cbnz	r0, 800619a <__mdiff+0x2e>
 800618c:	4b3a      	ldr	r3, [pc, #232]	; (8006278 <__mdiff+0x10c>)
 800618e:	4602      	mov	r2, r0
 8006190:	f240 2132 	movw	r1, #562	; 0x232
 8006194:	4839      	ldr	r0, [pc, #228]	; (800627c <__mdiff+0x110>)
 8006196:	f000 fa2b 	bl	80065f0 <__assert_func>
 800619a:	2301      	movs	r3, #1
 800619c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80061a0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80061a4:	bfa4      	itt	ge
 80061a6:	4643      	movge	r3, r8
 80061a8:	46a0      	movge	r8, r4
 80061aa:	4630      	mov	r0, r6
 80061ac:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80061b0:	bfa6      	itte	ge
 80061b2:	461c      	movge	r4, r3
 80061b4:	2500      	movge	r5, #0
 80061b6:	2501      	movlt	r5, #1
 80061b8:	f7ff fd3a 	bl	8005c30 <_Balloc>
 80061bc:	b920      	cbnz	r0, 80061c8 <__mdiff+0x5c>
 80061be:	4b2e      	ldr	r3, [pc, #184]	; (8006278 <__mdiff+0x10c>)
 80061c0:	4602      	mov	r2, r0
 80061c2:	f44f 7110 	mov.w	r1, #576	; 0x240
 80061c6:	e7e5      	b.n	8006194 <__mdiff+0x28>
 80061c8:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80061cc:	6926      	ldr	r6, [r4, #16]
 80061ce:	60c5      	str	r5, [r0, #12]
 80061d0:	f104 0914 	add.w	r9, r4, #20
 80061d4:	f108 0514 	add.w	r5, r8, #20
 80061d8:	f100 0e14 	add.w	lr, r0, #20
 80061dc:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80061e0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80061e4:	f108 0210 	add.w	r2, r8, #16
 80061e8:	46f2      	mov	sl, lr
 80061ea:	2100      	movs	r1, #0
 80061ec:	f859 3b04 	ldr.w	r3, [r9], #4
 80061f0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80061f4:	fa1f f883 	uxth.w	r8, r3
 80061f8:	fa11 f18b 	uxtah	r1, r1, fp
 80061fc:	0c1b      	lsrs	r3, r3, #16
 80061fe:	eba1 0808 	sub.w	r8, r1, r8
 8006202:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8006206:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800620a:	fa1f f888 	uxth.w	r8, r8
 800620e:	1419      	asrs	r1, r3, #16
 8006210:	454e      	cmp	r6, r9
 8006212:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8006216:	f84a 3b04 	str.w	r3, [sl], #4
 800621a:	d8e7      	bhi.n	80061ec <__mdiff+0x80>
 800621c:	1b33      	subs	r3, r6, r4
 800621e:	3b15      	subs	r3, #21
 8006220:	f023 0303 	bic.w	r3, r3, #3
 8006224:	3304      	adds	r3, #4
 8006226:	3415      	adds	r4, #21
 8006228:	42a6      	cmp	r6, r4
 800622a:	bf38      	it	cc
 800622c:	2304      	movcc	r3, #4
 800622e:	441d      	add	r5, r3
 8006230:	4473      	add	r3, lr
 8006232:	469e      	mov	lr, r3
 8006234:	462e      	mov	r6, r5
 8006236:	4566      	cmp	r6, ip
 8006238:	d30e      	bcc.n	8006258 <__mdiff+0xec>
 800623a:	f10c 0203 	add.w	r2, ip, #3
 800623e:	1b52      	subs	r2, r2, r5
 8006240:	f022 0203 	bic.w	r2, r2, #3
 8006244:	3d03      	subs	r5, #3
 8006246:	45ac      	cmp	ip, r5
 8006248:	bf38      	it	cc
 800624a:	2200      	movcc	r2, #0
 800624c:	441a      	add	r2, r3
 800624e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8006252:	b17b      	cbz	r3, 8006274 <__mdiff+0x108>
 8006254:	6107      	str	r7, [r0, #16]
 8006256:	e7a3      	b.n	80061a0 <__mdiff+0x34>
 8006258:	f856 8b04 	ldr.w	r8, [r6], #4
 800625c:	fa11 f288 	uxtah	r2, r1, r8
 8006260:	1414      	asrs	r4, r2, #16
 8006262:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8006266:	b292      	uxth	r2, r2
 8006268:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800626c:	f84e 2b04 	str.w	r2, [lr], #4
 8006270:	1421      	asrs	r1, r4, #16
 8006272:	e7e0      	b.n	8006236 <__mdiff+0xca>
 8006274:	3f01      	subs	r7, #1
 8006276:	e7ea      	b.n	800624e <__mdiff+0xe2>
 8006278:	08006d37 	.word	0x08006d37
 800627c:	08006da8 	.word	0x08006da8

08006280 <__d2b>:
 8006280:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006284:	4689      	mov	r9, r1
 8006286:	2101      	movs	r1, #1
 8006288:	ec57 6b10 	vmov	r6, r7, d0
 800628c:	4690      	mov	r8, r2
 800628e:	f7ff fccf 	bl	8005c30 <_Balloc>
 8006292:	4604      	mov	r4, r0
 8006294:	b930      	cbnz	r0, 80062a4 <__d2b+0x24>
 8006296:	4602      	mov	r2, r0
 8006298:	4b25      	ldr	r3, [pc, #148]	; (8006330 <__d2b+0xb0>)
 800629a:	4826      	ldr	r0, [pc, #152]	; (8006334 <__d2b+0xb4>)
 800629c:	f240 310a 	movw	r1, #778	; 0x30a
 80062a0:	f000 f9a6 	bl	80065f0 <__assert_func>
 80062a4:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80062a8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80062ac:	bb35      	cbnz	r5, 80062fc <__d2b+0x7c>
 80062ae:	2e00      	cmp	r6, #0
 80062b0:	9301      	str	r3, [sp, #4]
 80062b2:	d028      	beq.n	8006306 <__d2b+0x86>
 80062b4:	4668      	mov	r0, sp
 80062b6:	9600      	str	r6, [sp, #0]
 80062b8:	f7ff fd82 	bl	8005dc0 <__lo0bits>
 80062bc:	9900      	ldr	r1, [sp, #0]
 80062be:	b300      	cbz	r0, 8006302 <__d2b+0x82>
 80062c0:	9a01      	ldr	r2, [sp, #4]
 80062c2:	f1c0 0320 	rsb	r3, r0, #32
 80062c6:	fa02 f303 	lsl.w	r3, r2, r3
 80062ca:	430b      	orrs	r3, r1
 80062cc:	40c2      	lsrs	r2, r0
 80062ce:	6163      	str	r3, [r4, #20]
 80062d0:	9201      	str	r2, [sp, #4]
 80062d2:	9b01      	ldr	r3, [sp, #4]
 80062d4:	61a3      	str	r3, [r4, #24]
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	bf14      	ite	ne
 80062da:	2202      	movne	r2, #2
 80062dc:	2201      	moveq	r2, #1
 80062de:	6122      	str	r2, [r4, #16]
 80062e0:	b1d5      	cbz	r5, 8006318 <__d2b+0x98>
 80062e2:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80062e6:	4405      	add	r5, r0
 80062e8:	f8c9 5000 	str.w	r5, [r9]
 80062ec:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80062f0:	f8c8 0000 	str.w	r0, [r8]
 80062f4:	4620      	mov	r0, r4
 80062f6:	b003      	add	sp, #12
 80062f8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80062fc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006300:	e7d5      	b.n	80062ae <__d2b+0x2e>
 8006302:	6161      	str	r1, [r4, #20]
 8006304:	e7e5      	b.n	80062d2 <__d2b+0x52>
 8006306:	a801      	add	r0, sp, #4
 8006308:	f7ff fd5a 	bl	8005dc0 <__lo0bits>
 800630c:	9b01      	ldr	r3, [sp, #4]
 800630e:	6163      	str	r3, [r4, #20]
 8006310:	2201      	movs	r2, #1
 8006312:	6122      	str	r2, [r4, #16]
 8006314:	3020      	adds	r0, #32
 8006316:	e7e3      	b.n	80062e0 <__d2b+0x60>
 8006318:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800631c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8006320:	f8c9 0000 	str.w	r0, [r9]
 8006324:	6918      	ldr	r0, [r3, #16]
 8006326:	f7ff fd2b 	bl	8005d80 <__hi0bits>
 800632a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800632e:	e7df      	b.n	80062f0 <__d2b+0x70>
 8006330:	08006d37 	.word	0x08006d37
 8006334:	08006da8 	.word	0x08006da8

08006338 <_calloc_r>:
 8006338:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800633a:	fba1 2402 	umull	r2, r4, r1, r2
 800633e:	b94c      	cbnz	r4, 8006354 <_calloc_r+0x1c>
 8006340:	4611      	mov	r1, r2
 8006342:	9201      	str	r2, [sp, #4]
 8006344:	f000 f87a 	bl	800643c <_malloc_r>
 8006348:	9a01      	ldr	r2, [sp, #4]
 800634a:	4605      	mov	r5, r0
 800634c:	b930      	cbnz	r0, 800635c <_calloc_r+0x24>
 800634e:	4628      	mov	r0, r5
 8006350:	b003      	add	sp, #12
 8006352:	bd30      	pop	{r4, r5, pc}
 8006354:	220c      	movs	r2, #12
 8006356:	6002      	str	r2, [r0, #0]
 8006358:	2500      	movs	r5, #0
 800635a:	e7f8      	b.n	800634e <_calloc_r+0x16>
 800635c:	4621      	mov	r1, r4
 800635e:	f7fd fe79 	bl	8004054 <memset>
 8006362:	e7f4      	b.n	800634e <_calloc_r+0x16>

08006364 <_free_r>:
 8006364:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006366:	2900      	cmp	r1, #0
 8006368:	d044      	beq.n	80063f4 <_free_r+0x90>
 800636a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800636e:	9001      	str	r0, [sp, #4]
 8006370:	2b00      	cmp	r3, #0
 8006372:	f1a1 0404 	sub.w	r4, r1, #4
 8006376:	bfb8      	it	lt
 8006378:	18e4      	addlt	r4, r4, r3
 800637a:	f000 f9bf 	bl	80066fc <__malloc_lock>
 800637e:	4a1e      	ldr	r2, [pc, #120]	; (80063f8 <_free_r+0x94>)
 8006380:	9801      	ldr	r0, [sp, #4]
 8006382:	6813      	ldr	r3, [r2, #0]
 8006384:	b933      	cbnz	r3, 8006394 <_free_r+0x30>
 8006386:	6063      	str	r3, [r4, #4]
 8006388:	6014      	str	r4, [r2, #0]
 800638a:	b003      	add	sp, #12
 800638c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006390:	f000 b9ba 	b.w	8006708 <__malloc_unlock>
 8006394:	42a3      	cmp	r3, r4
 8006396:	d908      	bls.n	80063aa <_free_r+0x46>
 8006398:	6825      	ldr	r5, [r4, #0]
 800639a:	1961      	adds	r1, r4, r5
 800639c:	428b      	cmp	r3, r1
 800639e:	bf01      	itttt	eq
 80063a0:	6819      	ldreq	r1, [r3, #0]
 80063a2:	685b      	ldreq	r3, [r3, #4]
 80063a4:	1949      	addeq	r1, r1, r5
 80063a6:	6021      	streq	r1, [r4, #0]
 80063a8:	e7ed      	b.n	8006386 <_free_r+0x22>
 80063aa:	461a      	mov	r2, r3
 80063ac:	685b      	ldr	r3, [r3, #4]
 80063ae:	b10b      	cbz	r3, 80063b4 <_free_r+0x50>
 80063b0:	42a3      	cmp	r3, r4
 80063b2:	d9fa      	bls.n	80063aa <_free_r+0x46>
 80063b4:	6811      	ldr	r1, [r2, #0]
 80063b6:	1855      	adds	r5, r2, r1
 80063b8:	42a5      	cmp	r5, r4
 80063ba:	d10b      	bne.n	80063d4 <_free_r+0x70>
 80063bc:	6824      	ldr	r4, [r4, #0]
 80063be:	4421      	add	r1, r4
 80063c0:	1854      	adds	r4, r2, r1
 80063c2:	42a3      	cmp	r3, r4
 80063c4:	6011      	str	r1, [r2, #0]
 80063c6:	d1e0      	bne.n	800638a <_free_r+0x26>
 80063c8:	681c      	ldr	r4, [r3, #0]
 80063ca:	685b      	ldr	r3, [r3, #4]
 80063cc:	6053      	str	r3, [r2, #4]
 80063ce:	4421      	add	r1, r4
 80063d0:	6011      	str	r1, [r2, #0]
 80063d2:	e7da      	b.n	800638a <_free_r+0x26>
 80063d4:	d902      	bls.n	80063dc <_free_r+0x78>
 80063d6:	230c      	movs	r3, #12
 80063d8:	6003      	str	r3, [r0, #0]
 80063da:	e7d6      	b.n	800638a <_free_r+0x26>
 80063dc:	6825      	ldr	r5, [r4, #0]
 80063de:	1961      	adds	r1, r4, r5
 80063e0:	428b      	cmp	r3, r1
 80063e2:	bf04      	itt	eq
 80063e4:	6819      	ldreq	r1, [r3, #0]
 80063e6:	685b      	ldreq	r3, [r3, #4]
 80063e8:	6063      	str	r3, [r4, #4]
 80063ea:	bf04      	itt	eq
 80063ec:	1949      	addeq	r1, r1, r5
 80063ee:	6021      	streq	r1, [r4, #0]
 80063f0:	6054      	str	r4, [r2, #4]
 80063f2:	e7ca      	b.n	800638a <_free_r+0x26>
 80063f4:	b003      	add	sp, #12
 80063f6:	bd30      	pop	{r4, r5, pc}
 80063f8:	2000030c 	.word	0x2000030c

080063fc <sbrk_aligned>:
 80063fc:	b570      	push	{r4, r5, r6, lr}
 80063fe:	4e0e      	ldr	r6, [pc, #56]	; (8006438 <sbrk_aligned+0x3c>)
 8006400:	460c      	mov	r4, r1
 8006402:	6831      	ldr	r1, [r6, #0]
 8006404:	4605      	mov	r5, r0
 8006406:	b911      	cbnz	r1, 800640e <sbrk_aligned+0x12>
 8006408:	f000 f88c 	bl	8006524 <_sbrk_r>
 800640c:	6030      	str	r0, [r6, #0]
 800640e:	4621      	mov	r1, r4
 8006410:	4628      	mov	r0, r5
 8006412:	f000 f887 	bl	8006524 <_sbrk_r>
 8006416:	1c43      	adds	r3, r0, #1
 8006418:	d00a      	beq.n	8006430 <sbrk_aligned+0x34>
 800641a:	1cc4      	adds	r4, r0, #3
 800641c:	f024 0403 	bic.w	r4, r4, #3
 8006420:	42a0      	cmp	r0, r4
 8006422:	d007      	beq.n	8006434 <sbrk_aligned+0x38>
 8006424:	1a21      	subs	r1, r4, r0
 8006426:	4628      	mov	r0, r5
 8006428:	f000 f87c 	bl	8006524 <_sbrk_r>
 800642c:	3001      	adds	r0, #1
 800642e:	d101      	bne.n	8006434 <sbrk_aligned+0x38>
 8006430:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8006434:	4620      	mov	r0, r4
 8006436:	bd70      	pop	{r4, r5, r6, pc}
 8006438:	20000310 	.word	0x20000310

0800643c <_malloc_r>:
 800643c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006440:	1ccd      	adds	r5, r1, #3
 8006442:	f025 0503 	bic.w	r5, r5, #3
 8006446:	3508      	adds	r5, #8
 8006448:	2d0c      	cmp	r5, #12
 800644a:	bf38      	it	cc
 800644c:	250c      	movcc	r5, #12
 800644e:	2d00      	cmp	r5, #0
 8006450:	4607      	mov	r7, r0
 8006452:	db01      	blt.n	8006458 <_malloc_r+0x1c>
 8006454:	42a9      	cmp	r1, r5
 8006456:	d905      	bls.n	8006464 <_malloc_r+0x28>
 8006458:	230c      	movs	r3, #12
 800645a:	603b      	str	r3, [r7, #0]
 800645c:	2600      	movs	r6, #0
 800645e:	4630      	mov	r0, r6
 8006460:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006464:	4e2e      	ldr	r6, [pc, #184]	; (8006520 <_malloc_r+0xe4>)
 8006466:	f000 f949 	bl	80066fc <__malloc_lock>
 800646a:	6833      	ldr	r3, [r6, #0]
 800646c:	461c      	mov	r4, r3
 800646e:	bb34      	cbnz	r4, 80064be <_malloc_r+0x82>
 8006470:	4629      	mov	r1, r5
 8006472:	4638      	mov	r0, r7
 8006474:	f7ff ffc2 	bl	80063fc <sbrk_aligned>
 8006478:	1c43      	adds	r3, r0, #1
 800647a:	4604      	mov	r4, r0
 800647c:	d14d      	bne.n	800651a <_malloc_r+0xde>
 800647e:	6834      	ldr	r4, [r6, #0]
 8006480:	4626      	mov	r6, r4
 8006482:	2e00      	cmp	r6, #0
 8006484:	d140      	bne.n	8006508 <_malloc_r+0xcc>
 8006486:	6823      	ldr	r3, [r4, #0]
 8006488:	4631      	mov	r1, r6
 800648a:	4638      	mov	r0, r7
 800648c:	eb04 0803 	add.w	r8, r4, r3
 8006490:	f000 f848 	bl	8006524 <_sbrk_r>
 8006494:	4580      	cmp	r8, r0
 8006496:	d13a      	bne.n	800650e <_malloc_r+0xd2>
 8006498:	6821      	ldr	r1, [r4, #0]
 800649a:	3503      	adds	r5, #3
 800649c:	1a6d      	subs	r5, r5, r1
 800649e:	f025 0503 	bic.w	r5, r5, #3
 80064a2:	3508      	adds	r5, #8
 80064a4:	2d0c      	cmp	r5, #12
 80064a6:	bf38      	it	cc
 80064a8:	250c      	movcc	r5, #12
 80064aa:	4629      	mov	r1, r5
 80064ac:	4638      	mov	r0, r7
 80064ae:	f7ff ffa5 	bl	80063fc <sbrk_aligned>
 80064b2:	3001      	adds	r0, #1
 80064b4:	d02b      	beq.n	800650e <_malloc_r+0xd2>
 80064b6:	6823      	ldr	r3, [r4, #0]
 80064b8:	442b      	add	r3, r5
 80064ba:	6023      	str	r3, [r4, #0]
 80064bc:	e00e      	b.n	80064dc <_malloc_r+0xa0>
 80064be:	6822      	ldr	r2, [r4, #0]
 80064c0:	1b52      	subs	r2, r2, r5
 80064c2:	d41e      	bmi.n	8006502 <_malloc_r+0xc6>
 80064c4:	2a0b      	cmp	r2, #11
 80064c6:	d916      	bls.n	80064f6 <_malloc_r+0xba>
 80064c8:	1961      	adds	r1, r4, r5
 80064ca:	42a3      	cmp	r3, r4
 80064cc:	6025      	str	r5, [r4, #0]
 80064ce:	bf18      	it	ne
 80064d0:	6059      	strne	r1, [r3, #4]
 80064d2:	6863      	ldr	r3, [r4, #4]
 80064d4:	bf08      	it	eq
 80064d6:	6031      	streq	r1, [r6, #0]
 80064d8:	5162      	str	r2, [r4, r5]
 80064da:	604b      	str	r3, [r1, #4]
 80064dc:	4638      	mov	r0, r7
 80064de:	f104 060b 	add.w	r6, r4, #11
 80064e2:	f000 f911 	bl	8006708 <__malloc_unlock>
 80064e6:	f026 0607 	bic.w	r6, r6, #7
 80064ea:	1d23      	adds	r3, r4, #4
 80064ec:	1af2      	subs	r2, r6, r3
 80064ee:	d0b6      	beq.n	800645e <_malloc_r+0x22>
 80064f0:	1b9b      	subs	r3, r3, r6
 80064f2:	50a3      	str	r3, [r4, r2]
 80064f4:	e7b3      	b.n	800645e <_malloc_r+0x22>
 80064f6:	6862      	ldr	r2, [r4, #4]
 80064f8:	42a3      	cmp	r3, r4
 80064fa:	bf0c      	ite	eq
 80064fc:	6032      	streq	r2, [r6, #0]
 80064fe:	605a      	strne	r2, [r3, #4]
 8006500:	e7ec      	b.n	80064dc <_malloc_r+0xa0>
 8006502:	4623      	mov	r3, r4
 8006504:	6864      	ldr	r4, [r4, #4]
 8006506:	e7b2      	b.n	800646e <_malloc_r+0x32>
 8006508:	4634      	mov	r4, r6
 800650a:	6876      	ldr	r6, [r6, #4]
 800650c:	e7b9      	b.n	8006482 <_malloc_r+0x46>
 800650e:	230c      	movs	r3, #12
 8006510:	603b      	str	r3, [r7, #0]
 8006512:	4638      	mov	r0, r7
 8006514:	f000 f8f8 	bl	8006708 <__malloc_unlock>
 8006518:	e7a1      	b.n	800645e <_malloc_r+0x22>
 800651a:	6025      	str	r5, [r4, #0]
 800651c:	e7de      	b.n	80064dc <_malloc_r+0xa0>
 800651e:	bf00      	nop
 8006520:	2000030c 	.word	0x2000030c

08006524 <_sbrk_r>:
 8006524:	b538      	push	{r3, r4, r5, lr}
 8006526:	4d06      	ldr	r5, [pc, #24]	; (8006540 <_sbrk_r+0x1c>)
 8006528:	2300      	movs	r3, #0
 800652a:	4604      	mov	r4, r0
 800652c:	4608      	mov	r0, r1
 800652e:	602b      	str	r3, [r5, #0]
 8006530:	f7fb f92c 	bl	800178c <_sbrk>
 8006534:	1c43      	adds	r3, r0, #1
 8006536:	d102      	bne.n	800653e <_sbrk_r+0x1a>
 8006538:	682b      	ldr	r3, [r5, #0]
 800653a:	b103      	cbz	r3, 800653e <_sbrk_r+0x1a>
 800653c:	6023      	str	r3, [r4, #0]
 800653e:	bd38      	pop	{r3, r4, r5, pc}
 8006540:	20000314 	.word	0x20000314

08006544 <__sread>:
 8006544:	b510      	push	{r4, lr}
 8006546:	460c      	mov	r4, r1
 8006548:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800654c:	f000 fa3c 	bl	80069c8 <_read_r>
 8006550:	2800      	cmp	r0, #0
 8006552:	bfab      	itete	ge
 8006554:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006556:	89a3      	ldrhlt	r3, [r4, #12]
 8006558:	181b      	addge	r3, r3, r0
 800655a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800655e:	bfac      	ite	ge
 8006560:	6563      	strge	r3, [r4, #84]	; 0x54
 8006562:	81a3      	strhlt	r3, [r4, #12]
 8006564:	bd10      	pop	{r4, pc}

08006566 <__swrite>:
 8006566:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800656a:	461f      	mov	r7, r3
 800656c:	898b      	ldrh	r3, [r1, #12]
 800656e:	05db      	lsls	r3, r3, #23
 8006570:	4605      	mov	r5, r0
 8006572:	460c      	mov	r4, r1
 8006574:	4616      	mov	r6, r2
 8006576:	d505      	bpl.n	8006584 <__swrite+0x1e>
 8006578:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800657c:	2302      	movs	r3, #2
 800657e:	2200      	movs	r2, #0
 8006580:	f000 f898 	bl	80066b4 <_lseek_r>
 8006584:	89a3      	ldrh	r3, [r4, #12]
 8006586:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800658a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800658e:	81a3      	strh	r3, [r4, #12]
 8006590:	4632      	mov	r2, r6
 8006592:	463b      	mov	r3, r7
 8006594:	4628      	mov	r0, r5
 8006596:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800659a:	f000 b817 	b.w	80065cc <_write_r>

0800659e <__sseek>:
 800659e:	b510      	push	{r4, lr}
 80065a0:	460c      	mov	r4, r1
 80065a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80065a6:	f000 f885 	bl	80066b4 <_lseek_r>
 80065aa:	1c43      	adds	r3, r0, #1
 80065ac:	89a3      	ldrh	r3, [r4, #12]
 80065ae:	bf15      	itete	ne
 80065b0:	6560      	strne	r0, [r4, #84]	; 0x54
 80065b2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80065b6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80065ba:	81a3      	strheq	r3, [r4, #12]
 80065bc:	bf18      	it	ne
 80065be:	81a3      	strhne	r3, [r4, #12]
 80065c0:	bd10      	pop	{r4, pc}

080065c2 <__sclose>:
 80065c2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80065c6:	f000 b831 	b.w	800662c <_close_r>
	...

080065cc <_write_r>:
 80065cc:	b538      	push	{r3, r4, r5, lr}
 80065ce:	4d07      	ldr	r5, [pc, #28]	; (80065ec <_write_r+0x20>)
 80065d0:	4604      	mov	r4, r0
 80065d2:	4608      	mov	r0, r1
 80065d4:	4611      	mov	r1, r2
 80065d6:	2200      	movs	r2, #0
 80065d8:	602a      	str	r2, [r5, #0]
 80065da:	461a      	mov	r2, r3
 80065dc:	f7fb f885 	bl	80016ea <_write>
 80065e0:	1c43      	adds	r3, r0, #1
 80065e2:	d102      	bne.n	80065ea <_write_r+0x1e>
 80065e4:	682b      	ldr	r3, [r5, #0]
 80065e6:	b103      	cbz	r3, 80065ea <_write_r+0x1e>
 80065e8:	6023      	str	r3, [r4, #0]
 80065ea:	bd38      	pop	{r3, r4, r5, pc}
 80065ec:	20000314 	.word	0x20000314

080065f0 <__assert_func>:
 80065f0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80065f2:	4614      	mov	r4, r2
 80065f4:	461a      	mov	r2, r3
 80065f6:	4b09      	ldr	r3, [pc, #36]	; (800661c <__assert_func+0x2c>)
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	4605      	mov	r5, r0
 80065fc:	68d8      	ldr	r0, [r3, #12]
 80065fe:	b14c      	cbz	r4, 8006614 <__assert_func+0x24>
 8006600:	4b07      	ldr	r3, [pc, #28]	; (8006620 <__assert_func+0x30>)
 8006602:	9100      	str	r1, [sp, #0]
 8006604:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006608:	4906      	ldr	r1, [pc, #24]	; (8006624 <__assert_func+0x34>)
 800660a:	462b      	mov	r3, r5
 800660c:	f000 f81e 	bl	800664c <fiprintf>
 8006610:	f000 faba 	bl	8006b88 <abort>
 8006614:	4b04      	ldr	r3, [pc, #16]	; (8006628 <__assert_func+0x38>)
 8006616:	461c      	mov	r4, r3
 8006618:	e7f3      	b.n	8006602 <__assert_func+0x12>
 800661a:	bf00      	nop
 800661c:	2000000c 	.word	0x2000000c
 8006620:	08006f04 	.word	0x08006f04
 8006624:	08006f11 	.word	0x08006f11
 8006628:	08006f3f 	.word	0x08006f3f

0800662c <_close_r>:
 800662c:	b538      	push	{r3, r4, r5, lr}
 800662e:	4d06      	ldr	r5, [pc, #24]	; (8006648 <_close_r+0x1c>)
 8006630:	2300      	movs	r3, #0
 8006632:	4604      	mov	r4, r0
 8006634:	4608      	mov	r0, r1
 8006636:	602b      	str	r3, [r5, #0]
 8006638:	f7fb f873 	bl	8001722 <_close>
 800663c:	1c43      	adds	r3, r0, #1
 800663e:	d102      	bne.n	8006646 <_close_r+0x1a>
 8006640:	682b      	ldr	r3, [r5, #0]
 8006642:	b103      	cbz	r3, 8006646 <_close_r+0x1a>
 8006644:	6023      	str	r3, [r4, #0]
 8006646:	bd38      	pop	{r3, r4, r5, pc}
 8006648:	20000314 	.word	0x20000314

0800664c <fiprintf>:
 800664c:	b40e      	push	{r1, r2, r3}
 800664e:	b503      	push	{r0, r1, lr}
 8006650:	4601      	mov	r1, r0
 8006652:	ab03      	add	r3, sp, #12
 8006654:	4805      	ldr	r0, [pc, #20]	; (800666c <fiprintf+0x20>)
 8006656:	f853 2b04 	ldr.w	r2, [r3], #4
 800665a:	6800      	ldr	r0, [r0, #0]
 800665c:	9301      	str	r3, [sp, #4]
 800665e:	f000 f883 	bl	8006768 <_vfiprintf_r>
 8006662:	b002      	add	sp, #8
 8006664:	f85d eb04 	ldr.w	lr, [sp], #4
 8006668:	b003      	add	sp, #12
 800666a:	4770      	bx	lr
 800666c:	2000000c 	.word	0x2000000c

08006670 <_fstat_r>:
 8006670:	b538      	push	{r3, r4, r5, lr}
 8006672:	4d07      	ldr	r5, [pc, #28]	; (8006690 <_fstat_r+0x20>)
 8006674:	2300      	movs	r3, #0
 8006676:	4604      	mov	r4, r0
 8006678:	4608      	mov	r0, r1
 800667a:	4611      	mov	r1, r2
 800667c:	602b      	str	r3, [r5, #0]
 800667e:	f7fb f85c 	bl	800173a <_fstat>
 8006682:	1c43      	adds	r3, r0, #1
 8006684:	d102      	bne.n	800668c <_fstat_r+0x1c>
 8006686:	682b      	ldr	r3, [r5, #0]
 8006688:	b103      	cbz	r3, 800668c <_fstat_r+0x1c>
 800668a:	6023      	str	r3, [r4, #0]
 800668c:	bd38      	pop	{r3, r4, r5, pc}
 800668e:	bf00      	nop
 8006690:	20000314 	.word	0x20000314

08006694 <_isatty_r>:
 8006694:	b538      	push	{r3, r4, r5, lr}
 8006696:	4d06      	ldr	r5, [pc, #24]	; (80066b0 <_isatty_r+0x1c>)
 8006698:	2300      	movs	r3, #0
 800669a:	4604      	mov	r4, r0
 800669c:	4608      	mov	r0, r1
 800669e:	602b      	str	r3, [r5, #0]
 80066a0:	f7fb f85b 	bl	800175a <_isatty>
 80066a4:	1c43      	adds	r3, r0, #1
 80066a6:	d102      	bne.n	80066ae <_isatty_r+0x1a>
 80066a8:	682b      	ldr	r3, [r5, #0]
 80066aa:	b103      	cbz	r3, 80066ae <_isatty_r+0x1a>
 80066ac:	6023      	str	r3, [r4, #0]
 80066ae:	bd38      	pop	{r3, r4, r5, pc}
 80066b0:	20000314 	.word	0x20000314

080066b4 <_lseek_r>:
 80066b4:	b538      	push	{r3, r4, r5, lr}
 80066b6:	4d07      	ldr	r5, [pc, #28]	; (80066d4 <_lseek_r+0x20>)
 80066b8:	4604      	mov	r4, r0
 80066ba:	4608      	mov	r0, r1
 80066bc:	4611      	mov	r1, r2
 80066be:	2200      	movs	r2, #0
 80066c0:	602a      	str	r2, [r5, #0]
 80066c2:	461a      	mov	r2, r3
 80066c4:	f7fb f854 	bl	8001770 <_lseek>
 80066c8:	1c43      	adds	r3, r0, #1
 80066ca:	d102      	bne.n	80066d2 <_lseek_r+0x1e>
 80066cc:	682b      	ldr	r3, [r5, #0]
 80066ce:	b103      	cbz	r3, 80066d2 <_lseek_r+0x1e>
 80066d0:	6023      	str	r3, [r4, #0]
 80066d2:	bd38      	pop	{r3, r4, r5, pc}
 80066d4:	20000314 	.word	0x20000314

080066d8 <__ascii_mbtowc>:
 80066d8:	b082      	sub	sp, #8
 80066da:	b901      	cbnz	r1, 80066de <__ascii_mbtowc+0x6>
 80066dc:	a901      	add	r1, sp, #4
 80066de:	b142      	cbz	r2, 80066f2 <__ascii_mbtowc+0x1a>
 80066e0:	b14b      	cbz	r3, 80066f6 <__ascii_mbtowc+0x1e>
 80066e2:	7813      	ldrb	r3, [r2, #0]
 80066e4:	600b      	str	r3, [r1, #0]
 80066e6:	7812      	ldrb	r2, [r2, #0]
 80066e8:	1e10      	subs	r0, r2, #0
 80066ea:	bf18      	it	ne
 80066ec:	2001      	movne	r0, #1
 80066ee:	b002      	add	sp, #8
 80066f0:	4770      	bx	lr
 80066f2:	4610      	mov	r0, r2
 80066f4:	e7fb      	b.n	80066ee <__ascii_mbtowc+0x16>
 80066f6:	f06f 0001 	mvn.w	r0, #1
 80066fa:	e7f8      	b.n	80066ee <__ascii_mbtowc+0x16>

080066fc <__malloc_lock>:
 80066fc:	4801      	ldr	r0, [pc, #4]	; (8006704 <__malloc_lock+0x8>)
 80066fe:	f7ff ba1a 	b.w	8005b36 <__retarget_lock_acquire_recursive>
 8006702:	bf00      	nop
 8006704:	20000308 	.word	0x20000308

08006708 <__malloc_unlock>:
 8006708:	4801      	ldr	r0, [pc, #4]	; (8006710 <__malloc_unlock+0x8>)
 800670a:	f7ff ba15 	b.w	8005b38 <__retarget_lock_release_recursive>
 800670e:	bf00      	nop
 8006710:	20000308 	.word	0x20000308

08006714 <__sfputc_r>:
 8006714:	6893      	ldr	r3, [r2, #8]
 8006716:	3b01      	subs	r3, #1
 8006718:	2b00      	cmp	r3, #0
 800671a:	b410      	push	{r4}
 800671c:	6093      	str	r3, [r2, #8]
 800671e:	da08      	bge.n	8006732 <__sfputc_r+0x1e>
 8006720:	6994      	ldr	r4, [r2, #24]
 8006722:	42a3      	cmp	r3, r4
 8006724:	db01      	blt.n	800672a <__sfputc_r+0x16>
 8006726:	290a      	cmp	r1, #10
 8006728:	d103      	bne.n	8006732 <__sfputc_r+0x1e>
 800672a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800672e:	f000 b95d 	b.w	80069ec <__swbuf_r>
 8006732:	6813      	ldr	r3, [r2, #0]
 8006734:	1c58      	adds	r0, r3, #1
 8006736:	6010      	str	r0, [r2, #0]
 8006738:	7019      	strb	r1, [r3, #0]
 800673a:	4608      	mov	r0, r1
 800673c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006740:	4770      	bx	lr

08006742 <__sfputs_r>:
 8006742:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006744:	4606      	mov	r6, r0
 8006746:	460f      	mov	r7, r1
 8006748:	4614      	mov	r4, r2
 800674a:	18d5      	adds	r5, r2, r3
 800674c:	42ac      	cmp	r4, r5
 800674e:	d101      	bne.n	8006754 <__sfputs_r+0x12>
 8006750:	2000      	movs	r0, #0
 8006752:	e007      	b.n	8006764 <__sfputs_r+0x22>
 8006754:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006758:	463a      	mov	r2, r7
 800675a:	4630      	mov	r0, r6
 800675c:	f7ff ffda 	bl	8006714 <__sfputc_r>
 8006760:	1c43      	adds	r3, r0, #1
 8006762:	d1f3      	bne.n	800674c <__sfputs_r+0xa>
 8006764:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006768 <_vfiprintf_r>:
 8006768:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800676c:	460d      	mov	r5, r1
 800676e:	b09d      	sub	sp, #116	; 0x74
 8006770:	4614      	mov	r4, r2
 8006772:	4698      	mov	r8, r3
 8006774:	4606      	mov	r6, r0
 8006776:	b118      	cbz	r0, 8006780 <_vfiprintf_r+0x18>
 8006778:	6983      	ldr	r3, [r0, #24]
 800677a:	b90b      	cbnz	r3, 8006780 <_vfiprintf_r+0x18>
 800677c:	f7ff f938 	bl	80059f0 <__sinit>
 8006780:	4b89      	ldr	r3, [pc, #548]	; (80069a8 <_vfiprintf_r+0x240>)
 8006782:	429d      	cmp	r5, r3
 8006784:	d11b      	bne.n	80067be <_vfiprintf_r+0x56>
 8006786:	6875      	ldr	r5, [r6, #4]
 8006788:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800678a:	07d9      	lsls	r1, r3, #31
 800678c:	d405      	bmi.n	800679a <_vfiprintf_r+0x32>
 800678e:	89ab      	ldrh	r3, [r5, #12]
 8006790:	059a      	lsls	r2, r3, #22
 8006792:	d402      	bmi.n	800679a <_vfiprintf_r+0x32>
 8006794:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006796:	f7ff f9ce 	bl	8005b36 <__retarget_lock_acquire_recursive>
 800679a:	89ab      	ldrh	r3, [r5, #12]
 800679c:	071b      	lsls	r3, r3, #28
 800679e:	d501      	bpl.n	80067a4 <_vfiprintf_r+0x3c>
 80067a0:	692b      	ldr	r3, [r5, #16]
 80067a2:	b9eb      	cbnz	r3, 80067e0 <_vfiprintf_r+0x78>
 80067a4:	4629      	mov	r1, r5
 80067a6:	4630      	mov	r0, r6
 80067a8:	f000 f980 	bl	8006aac <__swsetup_r>
 80067ac:	b1c0      	cbz	r0, 80067e0 <_vfiprintf_r+0x78>
 80067ae:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80067b0:	07dc      	lsls	r4, r3, #31
 80067b2:	d50e      	bpl.n	80067d2 <_vfiprintf_r+0x6a>
 80067b4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80067b8:	b01d      	add	sp, #116	; 0x74
 80067ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80067be:	4b7b      	ldr	r3, [pc, #492]	; (80069ac <_vfiprintf_r+0x244>)
 80067c0:	429d      	cmp	r5, r3
 80067c2:	d101      	bne.n	80067c8 <_vfiprintf_r+0x60>
 80067c4:	68b5      	ldr	r5, [r6, #8]
 80067c6:	e7df      	b.n	8006788 <_vfiprintf_r+0x20>
 80067c8:	4b79      	ldr	r3, [pc, #484]	; (80069b0 <_vfiprintf_r+0x248>)
 80067ca:	429d      	cmp	r5, r3
 80067cc:	bf08      	it	eq
 80067ce:	68f5      	ldreq	r5, [r6, #12]
 80067d0:	e7da      	b.n	8006788 <_vfiprintf_r+0x20>
 80067d2:	89ab      	ldrh	r3, [r5, #12]
 80067d4:	0598      	lsls	r0, r3, #22
 80067d6:	d4ed      	bmi.n	80067b4 <_vfiprintf_r+0x4c>
 80067d8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80067da:	f7ff f9ad 	bl	8005b38 <__retarget_lock_release_recursive>
 80067de:	e7e9      	b.n	80067b4 <_vfiprintf_r+0x4c>
 80067e0:	2300      	movs	r3, #0
 80067e2:	9309      	str	r3, [sp, #36]	; 0x24
 80067e4:	2320      	movs	r3, #32
 80067e6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80067ea:	f8cd 800c 	str.w	r8, [sp, #12]
 80067ee:	2330      	movs	r3, #48	; 0x30
 80067f0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80069b4 <_vfiprintf_r+0x24c>
 80067f4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80067f8:	f04f 0901 	mov.w	r9, #1
 80067fc:	4623      	mov	r3, r4
 80067fe:	469a      	mov	sl, r3
 8006800:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006804:	b10a      	cbz	r2, 800680a <_vfiprintf_r+0xa2>
 8006806:	2a25      	cmp	r2, #37	; 0x25
 8006808:	d1f9      	bne.n	80067fe <_vfiprintf_r+0x96>
 800680a:	ebba 0b04 	subs.w	fp, sl, r4
 800680e:	d00b      	beq.n	8006828 <_vfiprintf_r+0xc0>
 8006810:	465b      	mov	r3, fp
 8006812:	4622      	mov	r2, r4
 8006814:	4629      	mov	r1, r5
 8006816:	4630      	mov	r0, r6
 8006818:	f7ff ff93 	bl	8006742 <__sfputs_r>
 800681c:	3001      	adds	r0, #1
 800681e:	f000 80aa 	beq.w	8006976 <_vfiprintf_r+0x20e>
 8006822:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006824:	445a      	add	r2, fp
 8006826:	9209      	str	r2, [sp, #36]	; 0x24
 8006828:	f89a 3000 	ldrb.w	r3, [sl]
 800682c:	2b00      	cmp	r3, #0
 800682e:	f000 80a2 	beq.w	8006976 <_vfiprintf_r+0x20e>
 8006832:	2300      	movs	r3, #0
 8006834:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006838:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800683c:	f10a 0a01 	add.w	sl, sl, #1
 8006840:	9304      	str	r3, [sp, #16]
 8006842:	9307      	str	r3, [sp, #28]
 8006844:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006848:	931a      	str	r3, [sp, #104]	; 0x68
 800684a:	4654      	mov	r4, sl
 800684c:	2205      	movs	r2, #5
 800684e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006852:	4858      	ldr	r0, [pc, #352]	; (80069b4 <_vfiprintf_r+0x24c>)
 8006854:	f7f9 fcc4 	bl	80001e0 <memchr>
 8006858:	9a04      	ldr	r2, [sp, #16]
 800685a:	b9d8      	cbnz	r0, 8006894 <_vfiprintf_r+0x12c>
 800685c:	06d1      	lsls	r1, r2, #27
 800685e:	bf44      	itt	mi
 8006860:	2320      	movmi	r3, #32
 8006862:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006866:	0713      	lsls	r3, r2, #28
 8006868:	bf44      	itt	mi
 800686a:	232b      	movmi	r3, #43	; 0x2b
 800686c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006870:	f89a 3000 	ldrb.w	r3, [sl]
 8006874:	2b2a      	cmp	r3, #42	; 0x2a
 8006876:	d015      	beq.n	80068a4 <_vfiprintf_r+0x13c>
 8006878:	9a07      	ldr	r2, [sp, #28]
 800687a:	4654      	mov	r4, sl
 800687c:	2000      	movs	r0, #0
 800687e:	f04f 0c0a 	mov.w	ip, #10
 8006882:	4621      	mov	r1, r4
 8006884:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006888:	3b30      	subs	r3, #48	; 0x30
 800688a:	2b09      	cmp	r3, #9
 800688c:	d94e      	bls.n	800692c <_vfiprintf_r+0x1c4>
 800688e:	b1b0      	cbz	r0, 80068be <_vfiprintf_r+0x156>
 8006890:	9207      	str	r2, [sp, #28]
 8006892:	e014      	b.n	80068be <_vfiprintf_r+0x156>
 8006894:	eba0 0308 	sub.w	r3, r0, r8
 8006898:	fa09 f303 	lsl.w	r3, r9, r3
 800689c:	4313      	orrs	r3, r2
 800689e:	9304      	str	r3, [sp, #16]
 80068a0:	46a2      	mov	sl, r4
 80068a2:	e7d2      	b.n	800684a <_vfiprintf_r+0xe2>
 80068a4:	9b03      	ldr	r3, [sp, #12]
 80068a6:	1d19      	adds	r1, r3, #4
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	9103      	str	r1, [sp, #12]
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	bfbb      	ittet	lt
 80068b0:	425b      	neglt	r3, r3
 80068b2:	f042 0202 	orrlt.w	r2, r2, #2
 80068b6:	9307      	strge	r3, [sp, #28]
 80068b8:	9307      	strlt	r3, [sp, #28]
 80068ba:	bfb8      	it	lt
 80068bc:	9204      	strlt	r2, [sp, #16]
 80068be:	7823      	ldrb	r3, [r4, #0]
 80068c0:	2b2e      	cmp	r3, #46	; 0x2e
 80068c2:	d10c      	bne.n	80068de <_vfiprintf_r+0x176>
 80068c4:	7863      	ldrb	r3, [r4, #1]
 80068c6:	2b2a      	cmp	r3, #42	; 0x2a
 80068c8:	d135      	bne.n	8006936 <_vfiprintf_r+0x1ce>
 80068ca:	9b03      	ldr	r3, [sp, #12]
 80068cc:	1d1a      	adds	r2, r3, #4
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	9203      	str	r2, [sp, #12]
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	bfb8      	it	lt
 80068d6:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80068da:	3402      	adds	r4, #2
 80068dc:	9305      	str	r3, [sp, #20]
 80068de:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80069c4 <_vfiprintf_r+0x25c>
 80068e2:	7821      	ldrb	r1, [r4, #0]
 80068e4:	2203      	movs	r2, #3
 80068e6:	4650      	mov	r0, sl
 80068e8:	f7f9 fc7a 	bl	80001e0 <memchr>
 80068ec:	b140      	cbz	r0, 8006900 <_vfiprintf_r+0x198>
 80068ee:	2340      	movs	r3, #64	; 0x40
 80068f0:	eba0 000a 	sub.w	r0, r0, sl
 80068f4:	fa03 f000 	lsl.w	r0, r3, r0
 80068f8:	9b04      	ldr	r3, [sp, #16]
 80068fa:	4303      	orrs	r3, r0
 80068fc:	3401      	adds	r4, #1
 80068fe:	9304      	str	r3, [sp, #16]
 8006900:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006904:	482c      	ldr	r0, [pc, #176]	; (80069b8 <_vfiprintf_r+0x250>)
 8006906:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800690a:	2206      	movs	r2, #6
 800690c:	f7f9 fc68 	bl	80001e0 <memchr>
 8006910:	2800      	cmp	r0, #0
 8006912:	d03f      	beq.n	8006994 <_vfiprintf_r+0x22c>
 8006914:	4b29      	ldr	r3, [pc, #164]	; (80069bc <_vfiprintf_r+0x254>)
 8006916:	bb1b      	cbnz	r3, 8006960 <_vfiprintf_r+0x1f8>
 8006918:	9b03      	ldr	r3, [sp, #12]
 800691a:	3307      	adds	r3, #7
 800691c:	f023 0307 	bic.w	r3, r3, #7
 8006920:	3308      	adds	r3, #8
 8006922:	9303      	str	r3, [sp, #12]
 8006924:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006926:	443b      	add	r3, r7
 8006928:	9309      	str	r3, [sp, #36]	; 0x24
 800692a:	e767      	b.n	80067fc <_vfiprintf_r+0x94>
 800692c:	fb0c 3202 	mla	r2, ip, r2, r3
 8006930:	460c      	mov	r4, r1
 8006932:	2001      	movs	r0, #1
 8006934:	e7a5      	b.n	8006882 <_vfiprintf_r+0x11a>
 8006936:	2300      	movs	r3, #0
 8006938:	3401      	adds	r4, #1
 800693a:	9305      	str	r3, [sp, #20]
 800693c:	4619      	mov	r1, r3
 800693e:	f04f 0c0a 	mov.w	ip, #10
 8006942:	4620      	mov	r0, r4
 8006944:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006948:	3a30      	subs	r2, #48	; 0x30
 800694a:	2a09      	cmp	r2, #9
 800694c:	d903      	bls.n	8006956 <_vfiprintf_r+0x1ee>
 800694e:	2b00      	cmp	r3, #0
 8006950:	d0c5      	beq.n	80068de <_vfiprintf_r+0x176>
 8006952:	9105      	str	r1, [sp, #20]
 8006954:	e7c3      	b.n	80068de <_vfiprintf_r+0x176>
 8006956:	fb0c 2101 	mla	r1, ip, r1, r2
 800695a:	4604      	mov	r4, r0
 800695c:	2301      	movs	r3, #1
 800695e:	e7f0      	b.n	8006942 <_vfiprintf_r+0x1da>
 8006960:	ab03      	add	r3, sp, #12
 8006962:	9300      	str	r3, [sp, #0]
 8006964:	462a      	mov	r2, r5
 8006966:	4b16      	ldr	r3, [pc, #88]	; (80069c0 <_vfiprintf_r+0x258>)
 8006968:	a904      	add	r1, sp, #16
 800696a:	4630      	mov	r0, r6
 800696c:	f7fd fc1a 	bl	80041a4 <_printf_float>
 8006970:	4607      	mov	r7, r0
 8006972:	1c78      	adds	r0, r7, #1
 8006974:	d1d6      	bne.n	8006924 <_vfiprintf_r+0x1bc>
 8006976:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006978:	07d9      	lsls	r1, r3, #31
 800697a:	d405      	bmi.n	8006988 <_vfiprintf_r+0x220>
 800697c:	89ab      	ldrh	r3, [r5, #12]
 800697e:	059a      	lsls	r2, r3, #22
 8006980:	d402      	bmi.n	8006988 <_vfiprintf_r+0x220>
 8006982:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006984:	f7ff f8d8 	bl	8005b38 <__retarget_lock_release_recursive>
 8006988:	89ab      	ldrh	r3, [r5, #12]
 800698a:	065b      	lsls	r3, r3, #25
 800698c:	f53f af12 	bmi.w	80067b4 <_vfiprintf_r+0x4c>
 8006990:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006992:	e711      	b.n	80067b8 <_vfiprintf_r+0x50>
 8006994:	ab03      	add	r3, sp, #12
 8006996:	9300      	str	r3, [sp, #0]
 8006998:	462a      	mov	r2, r5
 800699a:	4b09      	ldr	r3, [pc, #36]	; (80069c0 <_vfiprintf_r+0x258>)
 800699c:	a904      	add	r1, sp, #16
 800699e:	4630      	mov	r0, r6
 80069a0:	f7fd fea4 	bl	80046ec <_printf_i>
 80069a4:	e7e4      	b.n	8006970 <_vfiprintf_r+0x208>
 80069a6:	bf00      	nop
 80069a8:	08006d68 	.word	0x08006d68
 80069ac:	08006d88 	.word	0x08006d88
 80069b0:	08006d48 	.word	0x08006d48
 80069b4:	08006f4a 	.word	0x08006f4a
 80069b8:	08006f54 	.word	0x08006f54
 80069bc:	080041a5 	.word	0x080041a5
 80069c0:	08006743 	.word	0x08006743
 80069c4:	08006f50 	.word	0x08006f50

080069c8 <_read_r>:
 80069c8:	b538      	push	{r3, r4, r5, lr}
 80069ca:	4d07      	ldr	r5, [pc, #28]	; (80069e8 <_read_r+0x20>)
 80069cc:	4604      	mov	r4, r0
 80069ce:	4608      	mov	r0, r1
 80069d0:	4611      	mov	r1, r2
 80069d2:	2200      	movs	r2, #0
 80069d4:	602a      	str	r2, [r5, #0]
 80069d6:	461a      	mov	r2, r3
 80069d8:	f7fa fe6a 	bl	80016b0 <_read>
 80069dc:	1c43      	adds	r3, r0, #1
 80069de:	d102      	bne.n	80069e6 <_read_r+0x1e>
 80069e0:	682b      	ldr	r3, [r5, #0]
 80069e2:	b103      	cbz	r3, 80069e6 <_read_r+0x1e>
 80069e4:	6023      	str	r3, [r4, #0]
 80069e6:	bd38      	pop	{r3, r4, r5, pc}
 80069e8:	20000314 	.word	0x20000314

080069ec <__swbuf_r>:
 80069ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80069ee:	460e      	mov	r6, r1
 80069f0:	4614      	mov	r4, r2
 80069f2:	4605      	mov	r5, r0
 80069f4:	b118      	cbz	r0, 80069fe <__swbuf_r+0x12>
 80069f6:	6983      	ldr	r3, [r0, #24]
 80069f8:	b90b      	cbnz	r3, 80069fe <__swbuf_r+0x12>
 80069fa:	f7fe fff9 	bl	80059f0 <__sinit>
 80069fe:	4b21      	ldr	r3, [pc, #132]	; (8006a84 <__swbuf_r+0x98>)
 8006a00:	429c      	cmp	r4, r3
 8006a02:	d12b      	bne.n	8006a5c <__swbuf_r+0x70>
 8006a04:	686c      	ldr	r4, [r5, #4]
 8006a06:	69a3      	ldr	r3, [r4, #24]
 8006a08:	60a3      	str	r3, [r4, #8]
 8006a0a:	89a3      	ldrh	r3, [r4, #12]
 8006a0c:	071a      	lsls	r2, r3, #28
 8006a0e:	d52f      	bpl.n	8006a70 <__swbuf_r+0x84>
 8006a10:	6923      	ldr	r3, [r4, #16]
 8006a12:	b36b      	cbz	r3, 8006a70 <__swbuf_r+0x84>
 8006a14:	6923      	ldr	r3, [r4, #16]
 8006a16:	6820      	ldr	r0, [r4, #0]
 8006a18:	1ac0      	subs	r0, r0, r3
 8006a1a:	6963      	ldr	r3, [r4, #20]
 8006a1c:	b2f6      	uxtb	r6, r6
 8006a1e:	4283      	cmp	r3, r0
 8006a20:	4637      	mov	r7, r6
 8006a22:	dc04      	bgt.n	8006a2e <__swbuf_r+0x42>
 8006a24:	4621      	mov	r1, r4
 8006a26:	4628      	mov	r0, r5
 8006a28:	f7fe ff4e 	bl	80058c8 <_fflush_r>
 8006a2c:	bb30      	cbnz	r0, 8006a7c <__swbuf_r+0x90>
 8006a2e:	68a3      	ldr	r3, [r4, #8]
 8006a30:	3b01      	subs	r3, #1
 8006a32:	60a3      	str	r3, [r4, #8]
 8006a34:	6823      	ldr	r3, [r4, #0]
 8006a36:	1c5a      	adds	r2, r3, #1
 8006a38:	6022      	str	r2, [r4, #0]
 8006a3a:	701e      	strb	r6, [r3, #0]
 8006a3c:	6963      	ldr	r3, [r4, #20]
 8006a3e:	3001      	adds	r0, #1
 8006a40:	4283      	cmp	r3, r0
 8006a42:	d004      	beq.n	8006a4e <__swbuf_r+0x62>
 8006a44:	89a3      	ldrh	r3, [r4, #12]
 8006a46:	07db      	lsls	r3, r3, #31
 8006a48:	d506      	bpl.n	8006a58 <__swbuf_r+0x6c>
 8006a4a:	2e0a      	cmp	r6, #10
 8006a4c:	d104      	bne.n	8006a58 <__swbuf_r+0x6c>
 8006a4e:	4621      	mov	r1, r4
 8006a50:	4628      	mov	r0, r5
 8006a52:	f7fe ff39 	bl	80058c8 <_fflush_r>
 8006a56:	b988      	cbnz	r0, 8006a7c <__swbuf_r+0x90>
 8006a58:	4638      	mov	r0, r7
 8006a5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006a5c:	4b0a      	ldr	r3, [pc, #40]	; (8006a88 <__swbuf_r+0x9c>)
 8006a5e:	429c      	cmp	r4, r3
 8006a60:	d101      	bne.n	8006a66 <__swbuf_r+0x7a>
 8006a62:	68ac      	ldr	r4, [r5, #8]
 8006a64:	e7cf      	b.n	8006a06 <__swbuf_r+0x1a>
 8006a66:	4b09      	ldr	r3, [pc, #36]	; (8006a8c <__swbuf_r+0xa0>)
 8006a68:	429c      	cmp	r4, r3
 8006a6a:	bf08      	it	eq
 8006a6c:	68ec      	ldreq	r4, [r5, #12]
 8006a6e:	e7ca      	b.n	8006a06 <__swbuf_r+0x1a>
 8006a70:	4621      	mov	r1, r4
 8006a72:	4628      	mov	r0, r5
 8006a74:	f000 f81a 	bl	8006aac <__swsetup_r>
 8006a78:	2800      	cmp	r0, #0
 8006a7a:	d0cb      	beq.n	8006a14 <__swbuf_r+0x28>
 8006a7c:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8006a80:	e7ea      	b.n	8006a58 <__swbuf_r+0x6c>
 8006a82:	bf00      	nop
 8006a84:	08006d68 	.word	0x08006d68
 8006a88:	08006d88 	.word	0x08006d88
 8006a8c:	08006d48 	.word	0x08006d48

08006a90 <__ascii_wctomb>:
 8006a90:	b149      	cbz	r1, 8006aa6 <__ascii_wctomb+0x16>
 8006a92:	2aff      	cmp	r2, #255	; 0xff
 8006a94:	bf85      	ittet	hi
 8006a96:	238a      	movhi	r3, #138	; 0x8a
 8006a98:	6003      	strhi	r3, [r0, #0]
 8006a9a:	700a      	strbls	r2, [r1, #0]
 8006a9c:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8006aa0:	bf98      	it	ls
 8006aa2:	2001      	movls	r0, #1
 8006aa4:	4770      	bx	lr
 8006aa6:	4608      	mov	r0, r1
 8006aa8:	4770      	bx	lr
	...

08006aac <__swsetup_r>:
 8006aac:	4b32      	ldr	r3, [pc, #200]	; (8006b78 <__swsetup_r+0xcc>)
 8006aae:	b570      	push	{r4, r5, r6, lr}
 8006ab0:	681d      	ldr	r5, [r3, #0]
 8006ab2:	4606      	mov	r6, r0
 8006ab4:	460c      	mov	r4, r1
 8006ab6:	b125      	cbz	r5, 8006ac2 <__swsetup_r+0x16>
 8006ab8:	69ab      	ldr	r3, [r5, #24]
 8006aba:	b913      	cbnz	r3, 8006ac2 <__swsetup_r+0x16>
 8006abc:	4628      	mov	r0, r5
 8006abe:	f7fe ff97 	bl	80059f0 <__sinit>
 8006ac2:	4b2e      	ldr	r3, [pc, #184]	; (8006b7c <__swsetup_r+0xd0>)
 8006ac4:	429c      	cmp	r4, r3
 8006ac6:	d10f      	bne.n	8006ae8 <__swsetup_r+0x3c>
 8006ac8:	686c      	ldr	r4, [r5, #4]
 8006aca:	89a3      	ldrh	r3, [r4, #12]
 8006acc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006ad0:	0719      	lsls	r1, r3, #28
 8006ad2:	d42c      	bmi.n	8006b2e <__swsetup_r+0x82>
 8006ad4:	06dd      	lsls	r5, r3, #27
 8006ad6:	d411      	bmi.n	8006afc <__swsetup_r+0x50>
 8006ad8:	2309      	movs	r3, #9
 8006ada:	6033      	str	r3, [r6, #0]
 8006adc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006ae0:	81a3      	strh	r3, [r4, #12]
 8006ae2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006ae6:	e03e      	b.n	8006b66 <__swsetup_r+0xba>
 8006ae8:	4b25      	ldr	r3, [pc, #148]	; (8006b80 <__swsetup_r+0xd4>)
 8006aea:	429c      	cmp	r4, r3
 8006aec:	d101      	bne.n	8006af2 <__swsetup_r+0x46>
 8006aee:	68ac      	ldr	r4, [r5, #8]
 8006af0:	e7eb      	b.n	8006aca <__swsetup_r+0x1e>
 8006af2:	4b24      	ldr	r3, [pc, #144]	; (8006b84 <__swsetup_r+0xd8>)
 8006af4:	429c      	cmp	r4, r3
 8006af6:	bf08      	it	eq
 8006af8:	68ec      	ldreq	r4, [r5, #12]
 8006afa:	e7e6      	b.n	8006aca <__swsetup_r+0x1e>
 8006afc:	0758      	lsls	r0, r3, #29
 8006afe:	d512      	bpl.n	8006b26 <__swsetup_r+0x7a>
 8006b00:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006b02:	b141      	cbz	r1, 8006b16 <__swsetup_r+0x6a>
 8006b04:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006b08:	4299      	cmp	r1, r3
 8006b0a:	d002      	beq.n	8006b12 <__swsetup_r+0x66>
 8006b0c:	4630      	mov	r0, r6
 8006b0e:	f7ff fc29 	bl	8006364 <_free_r>
 8006b12:	2300      	movs	r3, #0
 8006b14:	6363      	str	r3, [r4, #52]	; 0x34
 8006b16:	89a3      	ldrh	r3, [r4, #12]
 8006b18:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006b1c:	81a3      	strh	r3, [r4, #12]
 8006b1e:	2300      	movs	r3, #0
 8006b20:	6063      	str	r3, [r4, #4]
 8006b22:	6923      	ldr	r3, [r4, #16]
 8006b24:	6023      	str	r3, [r4, #0]
 8006b26:	89a3      	ldrh	r3, [r4, #12]
 8006b28:	f043 0308 	orr.w	r3, r3, #8
 8006b2c:	81a3      	strh	r3, [r4, #12]
 8006b2e:	6923      	ldr	r3, [r4, #16]
 8006b30:	b94b      	cbnz	r3, 8006b46 <__swsetup_r+0x9a>
 8006b32:	89a3      	ldrh	r3, [r4, #12]
 8006b34:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006b38:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006b3c:	d003      	beq.n	8006b46 <__swsetup_r+0x9a>
 8006b3e:	4621      	mov	r1, r4
 8006b40:	4630      	mov	r0, r6
 8006b42:	f7ff f81f 	bl	8005b84 <__smakebuf_r>
 8006b46:	89a0      	ldrh	r0, [r4, #12]
 8006b48:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006b4c:	f010 0301 	ands.w	r3, r0, #1
 8006b50:	d00a      	beq.n	8006b68 <__swsetup_r+0xbc>
 8006b52:	2300      	movs	r3, #0
 8006b54:	60a3      	str	r3, [r4, #8]
 8006b56:	6963      	ldr	r3, [r4, #20]
 8006b58:	425b      	negs	r3, r3
 8006b5a:	61a3      	str	r3, [r4, #24]
 8006b5c:	6923      	ldr	r3, [r4, #16]
 8006b5e:	b943      	cbnz	r3, 8006b72 <__swsetup_r+0xc6>
 8006b60:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006b64:	d1ba      	bne.n	8006adc <__swsetup_r+0x30>
 8006b66:	bd70      	pop	{r4, r5, r6, pc}
 8006b68:	0781      	lsls	r1, r0, #30
 8006b6a:	bf58      	it	pl
 8006b6c:	6963      	ldrpl	r3, [r4, #20]
 8006b6e:	60a3      	str	r3, [r4, #8]
 8006b70:	e7f4      	b.n	8006b5c <__swsetup_r+0xb0>
 8006b72:	2000      	movs	r0, #0
 8006b74:	e7f7      	b.n	8006b66 <__swsetup_r+0xba>
 8006b76:	bf00      	nop
 8006b78:	2000000c 	.word	0x2000000c
 8006b7c:	08006d68 	.word	0x08006d68
 8006b80:	08006d88 	.word	0x08006d88
 8006b84:	08006d48 	.word	0x08006d48

08006b88 <abort>:
 8006b88:	b508      	push	{r3, lr}
 8006b8a:	2006      	movs	r0, #6
 8006b8c:	f000 f82c 	bl	8006be8 <raise>
 8006b90:	2001      	movs	r0, #1
 8006b92:	f7fa fd83 	bl	800169c <_exit>

08006b96 <_raise_r>:
 8006b96:	291f      	cmp	r1, #31
 8006b98:	b538      	push	{r3, r4, r5, lr}
 8006b9a:	4604      	mov	r4, r0
 8006b9c:	460d      	mov	r5, r1
 8006b9e:	d904      	bls.n	8006baa <_raise_r+0x14>
 8006ba0:	2316      	movs	r3, #22
 8006ba2:	6003      	str	r3, [r0, #0]
 8006ba4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006ba8:	bd38      	pop	{r3, r4, r5, pc}
 8006baa:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8006bac:	b112      	cbz	r2, 8006bb4 <_raise_r+0x1e>
 8006bae:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006bb2:	b94b      	cbnz	r3, 8006bc8 <_raise_r+0x32>
 8006bb4:	4620      	mov	r0, r4
 8006bb6:	f000 f831 	bl	8006c1c <_getpid_r>
 8006bba:	462a      	mov	r2, r5
 8006bbc:	4601      	mov	r1, r0
 8006bbe:	4620      	mov	r0, r4
 8006bc0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006bc4:	f000 b818 	b.w	8006bf8 <_kill_r>
 8006bc8:	2b01      	cmp	r3, #1
 8006bca:	d00a      	beq.n	8006be2 <_raise_r+0x4c>
 8006bcc:	1c59      	adds	r1, r3, #1
 8006bce:	d103      	bne.n	8006bd8 <_raise_r+0x42>
 8006bd0:	2316      	movs	r3, #22
 8006bd2:	6003      	str	r3, [r0, #0]
 8006bd4:	2001      	movs	r0, #1
 8006bd6:	e7e7      	b.n	8006ba8 <_raise_r+0x12>
 8006bd8:	2400      	movs	r4, #0
 8006bda:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8006bde:	4628      	mov	r0, r5
 8006be0:	4798      	blx	r3
 8006be2:	2000      	movs	r0, #0
 8006be4:	e7e0      	b.n	8006ba8 <_raise_r+0x12>
	...

08006be8 <raise>:
 8006be8:	4b02      	ldr	r3, [pc, #8]	; (8006bf4 <raise+0xc>)
 8006bea:	4601      	mov	r1, r0
 8006bec:	6818      	ldr	r0, [r3, #0]
 8006bee:	f7ff bfd2 	b.w	8006b96 <_raise_r>
 8006bf2:	bf00      	nop
 8006bf4:	2000000c 	.word	0x2000000c

08006bf8 <_kill_r>:
 8006bf8:	b538      	push	{r3, r4, r5, lr}
 8006bfa:	4d07      	ldr	r5, [pc, #28]	; (8006c18 <_kill_r+0x20>)
 8006bfc:	2300      	movs	r3, #0
 8006bfe:	4604      	mov	r4, r0
 8006c00:	4608      	mov	r0, r1
 8006c02:	4611      	mov	r1, r2
 8006c04:	602b      	str	r3, [r5, #0]
 8006c06:	f7fa fd39 	bl	800167c <_kill>
 8006c0a:	1c43      	adds	r3, r0, #1
 8006c0c:	d102      	bne.n	8006c14 <_kill_r+0x1c>
 8006c0e:	682b      	ldr	r3, [r5, #0]
 8006c10:	b103      	cbz	r3, 8006c14 <_kill_r+0x1c>
 8006c12:	6023      	str	r3, [r4, #0]
 8006c14:	bd38      	pop	{r3, r4, r5, pc}
 8006c16:	bf00      	nop
 8006c18:	20000314 	.word	0x20000314

08006c1c <_getpid_r>:
 8006c1c:	f7fa bd26 	b.w	800166c <_getpid>

08006c20 <_init>:
 8006c20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c22:	bf00      	nop
 8006c24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006c26:	bc08      	pop	{r3}
 8006c28:	469e      	mov	lr, r3
 8006c2a:	4770      	bx	lr

08006c2c <_fini>:
 8006c2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c2e:	bf00      	nop
 8006c30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006c32:	bc08      	pop	{r3}
 8006c34:	469e      	mov	lr, r3
 8006c36:	4770      	bx	lr
